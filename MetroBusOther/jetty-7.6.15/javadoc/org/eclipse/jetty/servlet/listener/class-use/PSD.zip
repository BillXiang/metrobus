        (GFile                *file,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* _delete_file_async)          (void);
  void                (* _delete_file_finish)         (void);

  gboolean            (* trash)                       (GFile                *file,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* _trash_async)                (void);
  void                (* _trash_finish)               (void);

  gboolean            (* make_directory)              (GFile                *file,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* _make_directory_async)       (void);
  void                (* _make_directory_finish)      (void);

  gboolean            (* make_symbolic_link)          (GFile                *file,
                                                       const char           *symlink_value,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* _make_symbolic_link_async)   (void);
  void                (* _make_symbolic_link_finish)  (void);

  gboolean            (* copy)                        (GFile                *source,
                                                       GFile                *destination,
                                                       GFileCopyFlags        flags,
                                                       GCancellable         *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer              progress_callback_data,
                                                       GError              **error);
  void                (* copy_async)                  (GFile                *source,
                                                       GFile                *destination,
                                                       GFileCopyFlags        flags,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer              progress_callback_data,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* copy_finish)                 (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  gboolean            (* move)                        (GFile                *source,
                                                       GFile                *destination,
                                                       GFileCopyFlags        flags,
                                                       GCancellable         *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer              progress_callback_data,
                                                       GError              **error);
  void                (* _move_async)                 (void);
  void                (* _move_finish)                (void);

  void                (* mount_mountable)             (GFile                *file,
                                                       GMountMountFlags      flags,
                                                       GMountOperation      *mount_operation,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFile *             (* mount_mountable_finish)      (GFile                *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  void                (* unmount_mountable)           (GFile                *file,
                                                       GMountUnmountFlags    flags,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* unmount_mountable_finish)    (GFile                *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  void                (* eject_mountable)             (GFile                *file,
                                                       GMountUnmountFlags    flags,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* eject_mountable_finish)      (GFile                *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  void                (* mount_enclosing_volume)      (GFile                *location,
                                                       GMountMountFlags      flags,
                                                       GMountOperation      *mount_operation,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean         (* mount_enclosing_volume_finish)  (GFile                *location,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  GFileMonitor *      (* monitor_dir)                 (GFile                *file,
                                                       GFileMonitorFlags     flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  GFileMonitor *      (* monitor_file)                (GFile                *file,
                                                       GFileMonitorFlags     flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);

  GFileIOStream *     (* open_readwrite)              (GFile                *file,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* open_readwrite_async)        (GFile                *file,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFileIOStream *     (* open_readwrite_finish)       (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);
  GFileIOStream *     (* create_readwrite)            (GFile                *file,
						       GFileCreateFlags      flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* create_readwrite_async)      (GFile                *file,
						       GFileCreateFlags      flags,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFileIOStream *     (* create_readwrite_finish)      (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);
  GFileIOStream *     (* replace_readwrite)           (GFile                *file,
                                                       const char           *etag,
                                                       gboolean              make_backup,
                                                       GFileCreateFlags      flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* replace_readwrite_async)     (GFile                *file,
                                                       const char           *etag,
                                                       gboolean              make_backup,
                                                       GFileCreateFlags      flags,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFileIOStream *     (* replace_readwrite_finish)    (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  void                (* start_mountable)             (GFile                *file,
                                                       GDriveStartFlags      flags,
                                                       GMountOperation      *start_operation,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* start_mountable_finish)      (GFile                *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  void                (* stop_mountable)              (GFile                *file,
                                                       GMountUnmountFlags    flags,
                                                       GMountOperation      *mount_operation,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* stop_mountable_finish)       (GFile                *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  gboolean            supports_thread_contexts;

  void                (* unmount_mountable_with_operation) (GFile           *file,
                                                       GMountUnmountFlags    flags,
                                                       GMountOperation      *mount_operation,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* unmount_mountable_with_operation_finish) (GFile    *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  void                (* eject_mountable_with_operation) (GFile             *file,
                                                       GMountUnmountFlags    flags,
                                                       GMountOperation      *mount_operation,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* eject_mountable_with_operation_finish) (GFile      *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  void                (* poll_mountable)              (GFile                *file,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* poll_mountable_finish)       (GFile                *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);
};
</pre>
<p>
An interface for writing VFS file handles.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><a href="../gobject/gobject-Type-Information.html#GTypeInterface"><span class="type">GTypeInterface</span></a> <em class="structfield"><code><a name="GFileIface.g-iface"></a>g_iface</code></em>;</span></p></td>
<td>The parent interface.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.dup"></a>dup</code></em> ()</span></p></td>
<td>Duplicates a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.hash"></a>hash</code></em> ()</span></p></td>
<td>Creates a hash of a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.equal"></a>equal</code></em> ()</span></p></td>
<td>Checks equality of two given <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>s.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.is-native"></a>is_native</code></em> ()</span></p></td>
<td>Checks to see if a file is native to the system.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.has-uri-scheme"></a>has_uri_scheme</code></em> ()</span></p></td>
<td>Checks to see if a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> has a given URI scheme.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.get-uri-scheme"></a>get_uri_scheme</code></em> ()</span></p></td>
<td>Gets the URI scheme for a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.get-basename"></a>get_basename</code></em> ()</span></p></td>
<td>Gets the basename for a given <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.get-path"></a>get_path</code></em> ()</span></p></td>
<td>Gets the current path within a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.get-uri"></a>get_uri</code></em> ()</span></p></td>
<td>Gets a URI for the path within a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.get-parse-name"></a>get_parse_name</code></em> ()</span></p></td>
<td>Gets the parsed name for the <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.get-parent"></a>get_parent</code></em> ()</span></p></td>
<td>Gets the parent directory for the <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.prefix-matches"></a>prefix_matches</code></em> ()</span></p></td>
<td>Checks whether a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> contains a specified file.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.get-relative-path"></a>get_relative_path</code></em> ()</span></p></td>
<td>Gets the path for a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> relative to a given path.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.resolve-relative-path"></a>resolve_relative_path</code></em> ()</span></p></td>
<td>Resolves a relative path for a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> to an absolute path.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.get-child-for-display-name"></a>get_child_for_display_name</code></em> ()</span></p></td>
<td>Gets the child <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> for a given display name.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.enumerate-children"></a>enumerate_children</code></em> ()</span></p></td>
<td>Gets a <a class="link" href="GFileEnumerator.html" title="GFileEnumerator"><span class="type">GFileEnumerator</span></a> with the children of a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.enumerate-children-async"></a>enumerate_children_async</code></em> ()</span></p></td>
<td>Asynchronously gets a <a class="link" href="GFileEnumerator.html" title="GFileEnumerator"><span class="type">GFileEnumerator</span></a> with the children of a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.enumerate-children-finish"></a>enumerate_children_finish</code></em> ()</span></p></td>
<td>Finishes asynchronously enumerating the children.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.query-info"></a>query_info</code></em> ()</span></p></td>
<td>Gets the <a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a> for a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.query-info-async"></a>query_info_async</code></em> ()</span></p></td>
<td>Asynchronously gets the <a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a> for a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.query-info-finish"></a>query_info_finish</code></em> ()</span></p></td>
<td>Finishes an asynchronous query info operation.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.query-filesystem-info"></a>query_filesystem_info</code></em> ()</span></p></td>
<td>Gets a <a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a> for the file system <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> is on.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.query-filesystem-info-async"></a>query_filesystem_info_async</code></em> ()</span></p></td>
<td>Asynchronously gets a <a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a> for the file system <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> is on.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.query-filesystem-info-finish"></a>query_filesystem_info_finish</code></em> ()</span></p></td>
<td>Finishes asynchronously getting the file system info.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.find-enclosing-mount"></a>find_enclosing_mount</code></em> ()</span></p></td>
<td>Gets a <a class="link" href="GMount.html" title="GMount"><span class="type">GMount</span></a> for the <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.find-enclosing-mount-async"></a>find_enclosing_mount_async</code></em> ()</span></p></td>
<td>Asynchronously gets the <a class="link" href="GMount.html" title="GMount"><span class="type">GMount</span></a> for a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.find-enclosing-mount-finish"></a>find_enclosing_mount_finish</code></em> ()</span></p></td>
<td>Finishes asynchronously getting the volume.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.set-display-name"></a>set_display_name</code></em> ()</span></p></td>
<td>Sets the display name for a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.set-display-name-async"></a>set_display_name_async</code></em> ()</span></p></td>
<td>Asynchronously sets a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>'s display name.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.set-display-name-finish"></a>set_display_name_finish</code></em> ()</span></p></td>
<td>Finishes asynchronously setting a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>'s display name.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.query-settable-attributes"></a>query_settable_attributes</code></em> ()</span></p></td>
<td>Returns a list of <span class="type">GFileAttribute</span>s that can be set.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.-query-settable-attributes-async"></a>_query_settable_attributes_async</code></em> ()</span></p></td>
<td>Asynchronously gets a list of <span class="type">GFileAttribute</span>s that can be set.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.-query-settable-attributes-finish"></a>_query_settable_attributes_finish</code></em> ()</span></p></td>
<td>Finishes asynchronously querying settable attributes.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.query-writable-namespaces"></a>query_writable_namespaces</code></em> ()</span></p></td>
<td>Returns a list of <span class="type">GFileAttribute</span> namespaces that are writable.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.-query-writable-namespaces-async"></a>_query_writable_namespaces_async</code></em> ()</span></p></td>
<td>Asynchronously gets a list of <span class="type">GFileAttribute</span> namespaces that are writable.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.-query-writable-namespaces-finish"></a>_query_writable_namespaces_finish</code></em> ()</span></p></td>
<td>Finishes asynchronously querying the writable namespaces.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.set-attribute"></a>set_attribute</code></em> ()</span></p></td>
<td>Sets a <span class="type">GFileAttribute</span>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.set-attributes-from-info"></a>set_attributes_from_info</code></em> ()</span></p></td>
<td>Sets a <span class="type">GFileAttribute</span> with information from a <a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.set-attributes-async"></a>set_attributes_async</code></em> ()</span></p></td>
<td>Asynchronously sets a file's attributes.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.set-attributes-finish"></a>set_attributes_finish</code></em> ()</span></p></td>
<td>Finishes setting a file's attributes asynchronously.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.read-fn"></a>read_fn</code></em> ()</span></p></td>
<td>Reads a file asynchronously.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.read-async"></a>read_async</code></em> ()</span></p></td>
<td>Asynchronously reads a file.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.read-finish"></a>read_finish</code></em> ()</span></p></td>
<td>Finishes asynchronously reading a file.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.append-to"></a>append_to</code></em> ()</span></p></td>
<td>Writes to the end of a file.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.append-to-async"></a>append_to_async</code></em> ()</span></p></td>
<td>Asynchronously writes to the end of a file.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.append-to-finish"></a>append_to_finish</code></em> ()</span></p></td>
<td>Finishes an asynchronous file append operation.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.create"></a>create</code></em> ()</span></p></td>
<td>Creates a new file.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.create-async"></a>create_async</code></em> ()</span></p></td>
<td>Asynchronously creates a file.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.create-finish"></a>create_finish</code></em> ()</span></p></td>
<td>Finishes asynchronously creating a file.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.replace"></a>replace</code></em> ()</span></p></td>
<td>Replaces the contents of a file.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.replace-async"></a>replace_async</code></em> ()</span></p></td>
<td>Asynchronously replaces the contents of a file.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.replace-finish"></a>replace_finish</code></em> ()</span></p></td>
<td>Finishes asynchronously replacing a file.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.delete-file"></a>delete_file</code></em> ()</span></p></td>
<td>Deletes a file.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.-delete-file-async"></a>_delete_file_async</code></em> ()</span></p></td>
<td>Asynchronously deletes a file.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.-delete-file-finish"></a>_delete_file_finish</code></em> ()</span></p></td>
<td>Finishes an asynchronous delete.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.trash"></a>trash</code></em> ()</span></p></td>
<td>Sends a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> to the Trash location.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.-trash-async"></a>_trash_async</code></em> ()</span></p></td>
<td>Asynchronously sends a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> to the Trash location.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.-trash-finish"></a>_trash_finish</code></em> ()</span></p></td>
<td>Finishes an asynchronous file trashing operation.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.make-directory"></a>make_directory</code></em> ()</span></p></td>
<td>Makes a directory.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.-make-directory-async"></a>_make_directory_async</code></em> ()</span></p></td>
<td>Asynchronously makes a directory.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.-make-directory-finish"></a>_make_directory_finish</code></em> ()</span></p></td>
<td>Finishes making a directory asynchronously.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.make-symbolic-link"></a>make_symbolic_link</code></em> ()</span></p></td>
<td>Makes a symbolic link.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.-make-symbolic-link-async"></a>_make_symbolic_link_async</code></em> ()</span></p></td>
<td>Asynchronously makes a symbolic link</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.-make-symbolic-link-finish"></a>_make_symbolic_link_finish</code></em> ()</span></p></td>
<td>Finishes making a symbolic link asynchronously.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.copy"></a>copy</code></em> ()</span></p></td>
<td>Copies a file.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.copy-async"></a>copy_async</code></em> ()</span></p></td>
<td>Asynchronously copies a file.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.copy-finish"></a>copy_finish</code></em> ()</span></p></td>
<td>Finishes an asynchronous copy operation.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.move"></a>move</code></em> ()</span></p></td>
<td>Moves a file.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.-move-async"></a>_move_async</code></em> ()</span></p></td>
<td>Asynchronously moves a file.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.-move-finish"></a>_move_finish</code></em> ()</span></p></td>
<td>Finishes an asynchronous move operation.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.mount-mountable"></a>mount_mountable</code></em> ()</span></p></td>
<td>Mounts a mountable object.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.mount-mountable-finish"></a>mount_mountable_finish</code></em> ()</span></p></td>
<td>Finishes a mounting operation.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.unmount-mountable"></a>unmount_mountable</code></em> ()</span></p></td>
<td>Unmounts a mountable object.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.unmount-mountable-finish"></a>unmount_mountable_finish</code></em> ()</span></p></td>
<td>Finishes an unmount operation.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.eject-mountable"></a>eject_mountable</code></em> ()</span></p></td>
<td>Ejects a mountable.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.eject-mountable-finish"></a>eject_mountable_finish</code></em> ()</span></p></td>
<td>Finishes an eject operation.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.mount-enclosing-volume"></a>mount_enclosing_volume</code></em> ()</span></p></td>
<td>Mounts a specified location.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.mount-enclosing-volume-finish"></a>mount_enclosing_volume_finish</code></em> ()</span></p></td>
<td>Finishes mounting a specified location.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.monitor-dir"></a>monitor_dir</code></em> ()</span></p></td>
<td>Creates a <a class="link" href="GFileMonitor.html" title="GFileMonitor"><span class="type">GFileMonitor</span></a> for the location.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.monitor-file"></a>monitor_file</code></em> ()</span></p></td>
<td>Creates a <a class="link" href="GFileMonitor.html" title="GFileMonitor"><span class="type">GFileMonitor</span></a> for the location.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.open-readwrite"></a>open_readwrite</code></em> ()</span></p></td>
<td>Open file read/write. Since 2.22.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.open-readwrite-async"></a>open_readwrite_async</code></em> ()</span></p></td>
<td>Asynchronously opens file read/write. Since 2.22.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.open-readwrite-finish"></a>open_readwrite_finish</code></em> ()</span></p></td>
<td>Finishes an asynchronous open read/write. Since 2.22.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.create-readwrite"></a>create_readwrite</code></em> ()</span></p></td>
<td>Creates file read/write. Since 2.22.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.create-readwrite-async"></a>create_readwrite_async</code></em> ()</span></p></td>
<td>Asynchronously creates file read/write. Since 2.22.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.create-readwrite-finish"></a>create_readwrite_finish</code></em> ()</span></p></td>
<td>Finishes an asynchronous creates read/write. Since 2.22.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.replace-readwrite"></a>replace_readwrite</code></em> ()</span></p></td>
<td>Replaces file read/write. Since 2.22.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.replace-readwrite-async"></a>replace_readwrite_async</code></em> ()</span></p></td>
<td>Asynchronously replaces file read/write. Since 2.22.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.replace-readwrite-finish"></a>replace_readwrite_finish</code></em> ()</span></p></td>
<td>Finishes an asynchronous replace read/write. Since 2.22.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.start-mountable"></a>start_mountable</code></em> ()</span></p></td>
<td>Starts a mountable object. Since 2.22.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.start-mountable-finish"></a>start_mountable_finish</code></em> ()</span></p></td>
<td>Finishes an start operation. Since 2.22.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.stop-mountable"></a>stop_mountable</code></em> ()</span></p></td>
<td>Stops a mountable. Since 2.22.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.stop-mountable-finish"></a>stop_mountable_finish</code></em> ()</span></p></td>
<td>Finishes an stop operation. Since 2.22.</td>
</tr>
<tr>
<td><p><span class="term"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> <em class="structfield"><code><a name="GFileIface.supports-thread-contexts"></a>supports_thread_contexts</code></em>;</span></p></td>
<td>a boolean that indicates whether the <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> implementation supports thread-default contexts. Since 2.22.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.unmount-mountable-with-operation"></a>unmount_mountable_with_operation</code></em> ()</span></p></td>
<td>Unmounts a mountable object using a <a class="link" href="GMountOperation.html" title="GMountOperation"><span class="type">GMountOperation</span></a>. Since 2.22.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.unmount-mountable-with-operation-finish"></a>unmount_mountable_with_operation_finish</code></em> ()</span></p></td>
<td>Finishes an unmount operation using a <a class="link" href="GMountOperation.html" title="GMountOperation"><span class="type">GMountOperation</span></a>. Since 2.22.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.eject-mountable-with-operation"></a>eject_mountable_with_operation</code></em> ()</span></p></td>
<td>Ejects a mountable object using a <a class="link" href="GMountOperation.html" title="GMountOperation"><span class="type">GMountOperation</span></a>. Since 2.22.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.eject-mountable-with-operation-finish"></a>eject_mountable_with_operation_finish</code></em> ()</span></p></td>
<td>Finishes an eject operation using a <a class="link" href="GMountOperation.html" title="GMountOperation"><span class="type">GMountOperation</span></a>. Since 2.22.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.poll-mountable"></a>poll_mountable</code></em> ()</span></p></td>
<td>Polls a mountable object for media changes. Since 2.22.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GFileIface.poll-mountable-finish"></a>poll_mountable_finish</code></em> ()</span></p></td>
<td>Finishes an poll operation for media changes. Since 2.22.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="GFileQueryInfoFlags"></a><h3>enum GFileQueryInfoFlags</h3>
<pre class="programlisting">typedef enum {
  G_FILE_QUERY_INFO_NONE              = 0,
  G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = (1 &lt;&lt; 0)   /*&lt; nick=nofollow-symlinks &gt;*/
} GFileQueryInfoFlags;
</pre>
<p>
Flags used when querying a <a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><a name="G-FILE-QUERY-INFO-NONE:CAPS"></a><span class="term"><code class="literal">G_FILE_QUERY_INFO_NONE</code></span></p></td>
<td>No flags set.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-QUERY-INFO-NOFOLLOW-SYMLINKS:CAPS"></a><span class="term"><code class="literal">G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS</code></span></p></td>
<td>Don't follow symlinks.
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="GFileCreateFlags"></a><h3>enum GFileCreateFlags</h3>
<pre class="programlisting">typedef enum {
  G_FILE_CREATE_NONE    = 0,
  G_FILE_CREATE_PRIVATE = (1 &lt;&lt; 0),
  G_FILE_CREATE_REPLACE_DESTINATION = (1 &lt;&lt; 1)
} GFileCreateFlags;
</pre>
<p>
Flags used when an operation may create a file.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><a name="G-FILE-CREATE-NONE:CAPS"></a><span class="term"><code class="literal">G_FILE_CREATE_NONE</code></span></p></td>
<td>No flags set.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-CREATE-PRIVATE:CAPS"></a><span class="term"><code class="literal">G_FILE_CREATE_PRIVATE</code></span></p></td>
<td>Create a file that can only be
   accessed by the current user.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-CREATE-REPLACE-DESTINATION:CAPS"></a><span class="term"><code class="literal">G_FILE_CREATE_REPLACE_DESTINATION</code></span></p></td>
<td>Replace the destination
   as if it didn't exist before. Don't try to keep any old
   permissions, replace instead of following links. This
   is generally useful if you're doing a "copy over"
   rather than a "save new version of" replace operation.
   You can think of it as "unlink destination" before
   writing to it, although the implementation may not
   be exactly like that. Since 2.20
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="GFileCopyFlags"></a><h3>enum GFileCopyFlags</h3>
<pre class="programlisting">typedef enum {
  G_FILE_COPY_NONE                 = 0,          /*&lt; nick=none &gt;*/
  G_FILE_COPY_OVERWRITE            = (1 &lt;&lt; 0),
  G_FILE_COPY_BACKUP               = (1 &lt;&lt; 1),
  G_FILE_COPY_NOFOLLOW_SYMLINKS    = (1 &lt;&lt; 2),
  G_FILE_COPY_ALL_METADATA         = (1 &lt;&lt; 3),
  G_FILE_COPY_NO_FALLBACK_FOR_MOVE = (1 &lt;&lt; 4),
  G_FILE_COPY_TARGET_DEFAULT_PERMS = (1 &lt;&lt; 5)
} GFileCopyFlags;
</pre>
<p>
Flags used when copying or moving files.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><a name="G-FILE-COPY-NONE:CAPS"></a><span class="term"><code class="literal">G_FILE_COPY_NONE</code></span></p></td>
<td>No flags set.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-COPY-OVERWRITE:CAPS"></a><span class="term"><code class="literal">G_FILE_COPY_OVERWRITE</code></span></p></td>
<td>Overwrite any existing files
</td>
</tr>
<tr>
<td><p><a name="G-FILE-COPY-BACKUP:CAPS"></a><span class="term"><code class="literal">G_FILE_COPY_BACKUP</code></span></p></td>
<td>Make a backup of any existing files.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-COPY-NOFOLLOW-SYMLINKS:CAPS"></a><span class="term"><code class="literal">G_FILE_COPY_NOFOLLOW_SYMLINKS</code></span></p></td>
<td>Don't follow symlinks.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-COPY-ALL-METADATA:CAPS"></a><span class="term"><code class="literal">G_FILE_COPY_ALL_METADATA</code></span></p></td>
<td>Copy all file metadata instead of just default set used for copy (see <a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a>).
</td>
</tr>
<tr>
<td><p><a name="G-FILE-COPY-NO-FALLBACK-FOR-MOVE:CAPS"></a><span class="term"><code class="literal">G_FILE_COPY_NO_FALLBACK_FOR_MOVE</code></span></p></td>
<td>Don't use copy and delete fallback if native move not supported.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-COPY-TARGET-DEFAULT-PERMS:CAPS"></a><span class="term"><code class="literal">G_FILE_COPY_TARGET_DEFAULT_PERMS</code></span></p></td>
<td>Leaves target file with default perms, instead of setting the source file perms.
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="GFileMonitorFlags"></a><h3>enum GFileMonitorFlags</h3>
<pre class="programlisting">typedef enum {
  G_FILE_MONITOR_NONE         = 0,
  G_FILE_MONITOR_WATCH_MOUNTS = (1 &lt;&lt; 0),
  G_FILE_MONITOR_SEND_MOVED   = (1 &lt;&lt; 1)
} GFileMonitorFlags;
</pre>
<p>
Flags used to set what a <a class="link" href="GFileMonitor.html" title="GFileMonitor"><span class="type">GFileMonitor</span></a> will watch for.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><a name="G-FILE-MONITOR-NONE:CAPS"></a><span class="term"><code class="literal">G_FILE_MONITOR_NONE</code></span></p></td>
<td>No flags set.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-MONITOR-WATCH-MOUNTS:CAPS"></a><span class="term"><code class="literal">G_FILE_MONITOR_WATCH_MOUNTS</code></span></p></td>
<td>Watch for mount events.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-MONITOR-SEND-MOVED:CAPS"></a><span class="term"><code class="literal">G_FILE_MONITOR_SEND_MOVED</code></span></p></td>
<td>Pair DELETED and CREATED events caused
  by file renames (moves) and send a single G_FILE_MONITOR_EVENT_MOVED
  event instead (NB: not supported on all backends; the default
  behaviour -without specifying this flag- is to send single DELETED
  and CREATED events).
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="GFilesystemPreviewType"></a><h3>enum GFilesystemPreviewType</h3>
<pre class="programlisting">typedef enum {
  G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = 0,
  G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL,
  G_FILESYSTEM_PREVIEW_TYPE_NEVER
} GFilesystemPreviewType;
</pre>
<p>
Indicates a hint from the file system whether files should be
previewed in a file manager. Returned as the value of the key
<a class="link" href="GFileInfo.html#G-FILE-ATTRIBUTE-FILESYSTEM-USE-PREVIEW:CAPS" title="G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW"><span class="type">G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW</span></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><a name="G-FILESYSTEM-PREVIEW-TYPE-IF-ALWAYS:CAPS"></a><span class="term"><code class="literal">G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS</code></span></p></td>
<td>Only preview files if user has explicitly requested it.
</td>
</tr>
<tr>
<td><p><a name="G-FILESYSTEM-PREVIEW-TYPE-IF-LOCAL:CAPS"></a><span class="term"><code class="literal">G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL</code></span></p></td>
<td>Preview files if user has requested preview of "local" files.
</td>
</tr>
<tr>
<td><p><a name="G-FILESYSTEM-PREVIEW-TYPE-NEVER:CAPS"></a><span class="term"><code class="literal">G_FILESYSTEM_PREVIEW_TYPE_NEVER</code></span></p></td>
<td>Never preview files.
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="GFileProgressCallback"></a><h3>GFileProgressCallback ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                (*GFileProgressCallback)            (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#goffset"><span class="type">goffset</span></a> current_num_bytes</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#goffset"><span class="type">goffset</span></a> total_num_bytes</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
When doing file operations that may take a while, such as moving
a file or copying a file, a progress callback is used to pass how
far along that operation is to the application.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>current_num_bytes</code></em> :</span></p></td>
<td>the current number of bytes in the operation.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>total_num_bytes</code></em> :</span></p></td>
<td>the total number of bytes in the operation.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>user data passed to the callback.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="GFileReadMoreCallback"></a><h3>GFileReadMoreCallback ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            (*GFileReadMoreCallback)            (<em class="parameter"><code>const <span class="type">char</span> *file_contents</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#goffset"><span class="type">goffset</span></a> file_size</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> callback_data</code></em>);</pre>
<p>
When loading the partial contents of a file with <a class="link" href="GFile.html#g-file-load-partial-contents-async" title="g_file_load_partial_contents_async ()"><code class="function">g_file_load_partial_contents_async()</code></a>,
it may become necessary to determine if any more data from the file should be loaded.
A <a class="link" href="GFile.html#GFileReadMoreCallback" title="GFileReadMoreCallback ()"><span class="type">GFileReadMoreCallback</span></a> function facilitates this by returning <a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if more data
should be read, or <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file_contents</code></em> :</span></p></td>
<td>the data as currently read.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>file_size</code></em> :</span></p></td>
<td>the size of the data currently read.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback_data</code></em> :</span></p></td>
<td>data passed to the callback.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if more data should be read back. <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-new-for-path"></a><h3>g_file_new_for_path ()</h3>
<pre class="programlisting"><a class="link" href="GFile.html" title="GFile"><span class="returnvalue">GFile</span></a> *             g_file_new_for_path                 (<em class="parameter"><code>const <span class="type">char</span> *path</code></em>);</pre>
<p>
Constructs a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> for a given path. This operation never
fails, but the returned object might not support any I/O
operation if <em class="parameter"><code>path</code></em> is malformed.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>path</code></em> :</span></p></td>
<td>a string containing a relative or absolute path. The string
must be encoded in the glib filename encoding.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a new <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> for the given <em class="parameter"><code>path</code></em>.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-new-for-uri"></a><h3>g_file_new_for_uri ()</h3>
<pre class="programlisting"><a class="link" href="GFile.html" title="GFile"><span class="returnvalue">GFile</span></a> *             g_file_new_for_uri                  (<em class="parameter"><code>const <span class="type">char</span> *uri</code></em>);</pre>
<p>
Constructs a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> for a given URI. This operation never 
fails, but the returned object might not support any I/O 
operation if <em class="parameter"><code>uri</code></em> is malformed or if the uri type is 
not supported.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>uri</code></em> :</span></p></td>
<td>a UTF8 string containing a URI.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a new <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> for the given <em class="parameter"><code>uri</code></em>.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-new-for-commandline-arg"></a><h3>g_file_new_for_commandline_arg ()</h3>
<pre class="programlisting"><a class="link" href="GFile.html" title="GFile"><span class="returnvalue">GFile</span></a> *             g_file_new_for_commandline_arg      (<em class="parameter"><code>const <span class="type">char</span> *arg</code></em>);</pre>
<p>
Creates a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> with the given argument from the command line. The value of
<em class="parameter"><code>arg</code></em> can be either a URI, an absolute path or a relative path resolved
relative to the current working directory.
This operation never fails, but the returned object might not support any
I/O operation if <em class="parameter"><code>arg</code></em> points to a malformed path.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>arg</code></em> :</span></p></td>
<td>a command line string.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a new <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-new-tmp"></a><h3>g_file_new_tmp ()</h3>
<pre class="programlisting"><a class="link" href="GFile.html" title="GFile"><span class="returnvalue">GFile</span></a> *             g_file_new_tmp                      (<em class="parameter"><code>const <span class="type">char</span> *tmpl</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFileIOStream.html" title="GFileIOStream"><span class="type">GFileIOStream</span></a> **iostream</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Opens a file in the preferred directory for temporary files (as
returned by <a href="../glib/glib-Miscellaneous-Utility-Functions.html#g-get-tmp-dir"><code class="function">g_get_tmp_dir()</code></a>) and returns a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> and
<a class="link" href="GFileIOStream.html" title="GFileIOStream"><span class="type">GFileIOStream</span></a> pointing to it.
</p>
<p>
<em class="parameter"><code>tmpl</code></em> should be a string in the GLib file name encoding
containing a sequence of six 'X' characters, and containing no
directory components. If it is <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, a default template is used.
</p>
<p>
Unlike the other <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> constructors, this will return <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if
a temporary file could not be created.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>tmpl</code></em> :</span></p></td>
<td>Template for the file
name, as in <a href="../glib/glib-File-Utilities.html#g-file-open-tmp"><code class="function">g_file_open_tmp()</code></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> for a default template. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> filename][<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>iostream</code></em> :</span></p></td>
<td>on return, a <a class="link" href="GFileIOStream.html" title="GFileIOStream"><span class="type">GFileIOStream</span></a> for the created file. <span class="annotation">[<acronym title="Parameter for returning results. Default is transfer full."><span class="acronym">out</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a new <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.32</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-parse-name"></a><h3>g_file_parse_name ()</h3>
<pre class="programlisting"><a class="link" href="GFile.html" title="GFile"><span class="returnvalue">GFile</span></a> *             g_file_parse_name                   (<em class="parameter"><code>const <span class="type">char</span> *parse_name</code></em>);</pre>
<p>
Constructs a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> with the given <em class="parameter"><code>parse_name</code></em> (i.e. something given by <a class="link" href="GFile.html#g-file-get-parse-name" title="g_file_get_parse_name ()"><code class="function">g_file_get_parse_name()</code></a>).
This operation never fails, but the returned object might not support any I/O
operation if the <em class="parameter"><code>parse_name</code></em> cannot be parsed.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>parse_name</code></em> :</span></p></td>
<td>a file name or path to be parsed.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a new <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-dup"></a><h3>g_file_dup ()</h3>
<pre class="programlisting"><a class="link" href="GFile.html" title="GFile"><span class="returnvalue">GFile</span></a> *             g_file_dup                          (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>);</pre>
<p>
Duplicates a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> handle. This operation does not duplicate 
the actual file or directory represented by the <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>; see 
<a class="link" href="GFile.html#g-file-copy" title="g_file_copy ()"><code class="function">g_file_copy()</code></a> if attempting to copy a file. 
</p>
<p>
This call does no blocking i/o.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a new <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> that is a duplicate of the given <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-hash"></a><h3>g_file_hash ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#guint"><span class="returnvalue">guint</span></a>               g_file_hash                         (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gconstpointer"><span class="type">gconstpointer</span></a> file</code></em>);</pre>
<p>
Creates a hash value for a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.
</p>
<p>
This call does no blocking i/o.
</p>
<p>
Virtual: hash
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Basic-Types.html#gconstpointer"><span class="type">gconstpointer</span></a> to a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> GFile]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>0 if <em class="parameter"><code>file</code></em> is not a valid <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>, otherwise an
integer that can be used as hash value for the <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.
This function is intended for easily hashing a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> to
add to a <a href="../glib/glib-Hash-Tables.html#GHashTable"><span class="type">GHashTable</span></a> or similar data structure.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-equal"></a><h3>g_file_equal ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_equal                        (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file1</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file2</code></em>);</pre>
<p>
Checks equality of two given <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>s. Note that two
<a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>s that differ can still refer to the same
file on the filesystem due to various forms of filename
aliasing.
</p>
<p>
This call does no blocking i/o.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file1</code></em> :</span></p></td>
<td>the first <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>file2</code></em> :</span></p></td>
<td>the second <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if <em class="parameter"><code>file1</code></em> and <em class="parameter"><code>file2</code></em> are equal.
<a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> if either is not a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-get-basename"></a><h3>g_file_get_basename ()</h3>
<pre class="programlisting"><span class="returnvalue">char</span> *              g_file_get_basename                 (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>);</pre>
<p>
Gets the base name (the last component of the path) for a given <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.
</p>
<p>
If called for the top level of a system (such as the filesystem root
or a uri like sftp://host/) it will return a single directory separator
(and on Windows, possibly a drive letter).
</p>
<p>
The base name is a byte string (*not* UTF-8). It has no defined encoding
or rules other than it may not contain zero bytes.  If you want to use
filenames in a user interface you should use the display name that you
can get by requesting the <a class="link" href="GFileInfo.html#G-FILE-ATTRIBUTE-STANDARD-DISPLAY-NAME:CAPS" title="G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME"><code class="literal">G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME</code></a>
attribute with <a class="link" href="GFile.html#g-file-query-info" title="g_file_query_info ()"><code class="function">g_file_query_info()</code></a>.
</p>
<p>
This call does no blocking i/o.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>string containing the <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>'s base name, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
if given <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> is invalid. The returned string should be
freed with <a href="../glib/glib-Memory-Allocation.html#g-free"><code class="function">g_free()</code></a> when no longer needed.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-get-path"></a><h3>g_file_get_path ()</h3>
<pre class="programlisting"><span class="returnvalue">char</span> *              g_file_get_path                     (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>);</pre>
<p>
Gets the local pathname for <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>, if one exists. 
</p>
<p>
This call does no blocking i/o.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>string containing the <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>'s path, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if
no such path exists. The returned string should be
freed with <a href="../glib/glib-Memory-Allocation.html#g-free"><code class="function">g_free()</code></a> when no longer needed.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-get-uri"></a><h3>g_file_get_uri ()</h3>
<pre class="programlisting"><span class="returnvalue">char</span> *              g_file_get_uri                      (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>);</pre>
<p>
Gets the URI for the <em class="parameter"><code>file</code></em>.
</p>
<p>
This call does no blocking i/o.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a string containing the <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>'s URI.
The returned string should be freed with <a href="../glib/glib-Memory-Allocation.html#g-free"><code class="function">g_free()</code></a> when no longer needed.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-get-parse-name"></a><h3>g_file_get_parse_name ()</h3>
<pre class="programlisting"><span class="returnvalue">char</span> *              g_file_get_parse_name               (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>);</pre>
<p>
Gets the parse name of the <em class="parameter"><code>file</code></em>.
A parse name is a UTF-8 string that describes the
file such that one can get the <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> back using
<a class="link" href="GFile.html#g-file-parse-name" title="g_file_parse_name ()"><code class="function">g_file_parse_name()</code></a>.
</p>
<p>
This is generally used to show the <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> as a nice
full-pathname kind of string in a user interface,
like in a location entry.
</p>
<p>
For local files with names that can safely be converted
to UTF8 the pathname is used, otherwise the IRI is used
(a form of URI that allows UTF8 characters unescaped).
</p>
<p>
This call does no blocking i/o.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a string containing the <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>'s parse name. The returned
string should be freed with <a href="../glib/glib-Memory-Allocation.html#g-free"><code class="function">g_free()</code></a> when no longer needed.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-get-parent"></a><h3>g_file_get_parent ()</h3>
<pre class="programlisting"><a class="link" href="GFile.html" title="GFile"><span class="returnvalue">GFile</span></a> *             g_file_get_parent                   (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>);</pre>
<p>
Gets the parent directory for the <em class="parameter"><code>file</code></em>. 
If the <em class="parameter"><code>file</code></em> represents the root directory of the 
file system, then <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> will be returned.
</p>
<p>
This call does no blocking i/o.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> structure to the parent of the given
<a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if there is no parent.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-has-parent"></a><h3>g_file_has_parent ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_has_parent                   (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *parent</code></em>);</pre>
<p>
Checks if <em class="parameter"><code>file</code></em> has a parent, and optionally, if it is <em class="parameter"><code>parent</code></em>.
</p>
<p>
If <em class="parameter"><code>parent</code></em> is <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> then this function returns <a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if <em class="parameter"><code>file</code></em> has any
parent at all.  If <em class="parameter"><code>parent</code></em> is non-<a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> then <a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> is only returned
if <em class="parameter"><code>file</code></em> is a child of <em class="parameter"><code>parent</code></em>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>parent</code></em> :</span></p></td>
<td>the parent to check for, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if <em class="parameter"><code>file</code></em> is a child of <em class="parameter"><code>parent</code></em> (or any parent in the
case that <em class="parameter"><code>parent</code></em> is <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>).</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.24</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-get-child"></a><h3>g_file_get_child ()</h3>
<pre class="programlisting"><a class="link" href="GFile.html" title="GFile"><span class="returnvalue">GFile</span></a> *             g_file_get_child                    (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *name</code></em>);</pre>
<p>
Gets a child of <em class="parameter"><code>file</code></em> with basename equal to <em class="parameter"><code>name</code></em>.
</p>
<p>
Note that the file with that specific name might not exist, but
you can still have a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> that points to it. You can use this
for instance to create that file.
</p>
<p>
This call does no blocking i/o.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>name</code></em> :</span></p></td>
<td>string containing the child's basename.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> to a child specified by <em class="parameter"><code>name</code></em>.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-get-child-for-display-name"></a><h3>g_file_get_child_for_display_name ()</h3>
<pre class="programlisting"><a class="link" href="GFile.html" title="GFile"><span class="returnvalue">GFile</span></a> *             g_file_get_child_for_display_name   (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *display_name</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Gets the child of <em class="parameter"><code>file</code></em> for a given <em class="parameter"><code>display_name</code></em> (i.e. a UTF8
version of the name). If this function fails, it returns <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> and <em class="parameter"><code>error</code></em> will be 
set. This is very useful when constructing a GFile for a new file
and the user entered the filename in the user interface, for instance
when you select a directory and type a filename in the file selector.
</p>
<p>
This call does no blocking i/o.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>display_name</code></em> :</span></p></td>
<td>string to a possible child.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> to the specified child, or
<a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if the display name couldn't be converted.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-has-prefix"></a><h3>g_file_has_prefix ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_has_prefix                   (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *prefix</code></em>);</pre>
<p>
Checks whether <em class="parameter"><code>file</code></em> has the prefix specified by <em class="parameter"><code>prefix</code></em>. In other word, 
if the names of initial elements of <em class="parameter"><code>file</code></em>s pathname match <em class="parameter"><code>prefix</code></em>.
Only full pathname elements are matched, so a path like /foo is not
considered a prefix of /foobar, only of /foo/bar.
</p>
<p>
This call does no i/o, as it works purely on names. As such it can 
sometimes return <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> even if <em class="parameter"><code>file</code></em> is inside a <em class="parameter"><code>prefix</code></em> (from a 
filesystem point of view), because the prefix of <em class="parameter"><code>file</code></em> is an alias 
of <em class="parameter"><code>prefix</code></em>.
</p>
<p>
Virtual: prefix_matches
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>prefix</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the <em class="parameter"><code>files</code></em>'s parent, grandparent, etc is <em class="parameter"><code>prefix</code></em>.
<a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-get-relative-path"></a><h3>g_file_get_relative_path ()</h3>
<pre class="programlisting"><span class="returnvalue">char</span> *              g_file_get_relative_path            (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *parent</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *descendant</code></em>);</pre>
<p>
Gets the path for <em class="parameter"><code>descendant</code></em> relative to <em class="parameter"><code>parent</code></em>. 
</p>
<p>
This call does no blocking i/o.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>parent</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>descendant</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>string with the relative path from <em class="parameter"><code>descendant</code></em>
to <em class="parameter"><code>parent</code></em>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if <em class="parameter"><code>descendant</code></em> doesn't have <em class="parameter"><code>parent</code></em> as prefix.
The returned string should be freed with <a href="../glib/glib-Memory-Allocation.html#g-free"><code class="function">g_free()</code></a> when no longer needed.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-resolve-relative-path"></a><h3>g_file_resolve_relative_path ()</h3>
<pre class="programlisting"><a class="link" href="GFile.html" title="GFile"><span class="returnvalue">GFile</span></a> *             g_file_resolve_relative_path        (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *relative_path</code></em>);</pre>
<p>
Resolves a relative path for <em class="parameter"><code>file</code></em> to an absolute path.
</p>
<p>
This call does no blocking i/o.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>relative_path</code></em> :</span></p></td>
<td>a given relative path string.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> to the resolved path. <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if <em class="parameter"><code>relative_path</code></em>
is <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> or if <em class="parameter"><code>file</code></em> is invalid.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-is-native"></a><h3>g_file_is_native ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_is_native                    (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>);</pre>
<p>
Checks to see if a file is native to the platform.
</p>
<p>
A native file s one expressed in the platform-native filename format,
e.g. "C:\Windows" or "/usr/bin/". This does not mean the file is local,
as it might be on a locally mounted remote filesystem.
</p>
<p>
On some systems non-native files may be available using
the native filesystem via a userspace filesystem (FUSE), in
these cases this call will return <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a>, but <a class="link" href="GFile.html#g-file-get-path" title="g_file_get_path ()"><code class="function">g_file_get_path()</code></a>
will still return a native path.
</p>
<p>
This call does no blocking i/o.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if file is native.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-has-uri-scheme"></a><h3>g_file_has_uri_scheme ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_has_uri_scheme               (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *uri_scheme</code></em>);</pre>
<p>
Checks to see if a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> has a given URI scheme.
</p>
<p>
This call does no blocking i/o.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>uri_scheme</code></em> :</span></p></td>
<td>a string containing a URI scheme.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>'s backend supports the
given URI scheme, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> if URI scheme is <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>,
not supported, or <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> is invalid.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-get-uri-scheme"></a><h3>g_file_get_uri_scheme ()</h3>
<pre class="programlisting"><span class="returnvalue">char</span> *              g_file_get_uri_scheme               (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>);</pre>
<p>
Gets the URI scheme for a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.
RFC 3986 decodes the scheme as:
</p>
<pre class="programlisting">
URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ] 
</pre>
<p>
Common schemes include "file", "http", "ftp", etc. 
</p>
<p>
This call does no blocking i/o.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a string containing the URI scheme for the given
<a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>. The returned string should be freed with <a href="../glib/glib-Memory-Allocation.html#g-free"><code class="function">g_free()</code></a>
when no longer needed.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-read"></a><h3>g_file_read ()</h3>
<pre class="programlisting"><a class="link" href="GFileInputStream.html" title="GFileInputStream"><span class="returnvalue">GFileInputStream</span></a> *  g_file_read                         (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Opens a file for reading. The result is a <a class="link" href="GFileInputStream.html" title="GFileInputStream"><span class="type">GFileInputStream</span></a> that
can be used to read the contents of the file.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned. 
</p>
<p>
If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
If the file is a directory, the G_IO_ERROR_IS_DIRECTORY error will be returned.
Other errors are possible too, and depend on what kind of filesystem the file is on.
</p>
<p>
Virtual: read_fn
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>
<a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> to read.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>a <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a class="link" href="GFileInputStream.html" title="GFileInputStream"><span class="type">GFileInputStream</span></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-read-async"></a><h3>g_file_read_async ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_read_async                   (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> io_priority</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Asynchronously opens <em class="parameter"><code>file</code></em> for reading.
</p>
<p>
For more details, see <a class="link" href="GFile.html#g-file-read" title="g_file_read ()"><code class="function">g_file_read()</code></a> which is
the synchronous version of this call.
</p>
<p>
When the operation is finished, <em class="parameter"><code>callback</code></em> will be called. You can then call
<a class="link" href="GFile.html#g-file-read-finish" title="g_file_read_finish ()"><code class="function">g_file_read_finish()</code></a> to get the result of the operation.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>io_priority</code></em> :</span></p></td>
<td>the <a class="link" href="gio-GIOScheduler.html#io-priority">I/O priority</a>
of the request.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied. <span class="annotation">[<acronym title="The callback is valid until first called."><span class="acronym">scope async</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function. <span class="annotation">[<acronym title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><span class="acronym">closure</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-read-finish"></a><h3>g_file_read_finish ()</h3>
<pre class="programlisting"><a class="link" href="GFileInputStream.html" title="GFileInputStream"><span class="returnvalue">GFileInputStream</span></a> *  g_file_read_finish                  (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *res</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes an asynchronous file read operation started with 
<a class="link" href="GFile.html#g-file-read-async" title="g_file_read_async ()"><code class="function">g_file_read_async()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>res</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GFileInputStream.html" title="GFileInputStream"><span class="type">GFileInputStream</span></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-append-to"></a><h3>g_file_append_to ()</h3>
<pre class="programlisting"><a class="link" href="GFileOutputStream.html" title="GFileOutputStream"><span class="returnvalue">GFileOutputStream</span></a> * g_file_append_to                    (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Gets an output stream for appending data to the file. If
the file doesn't already exist it is created.
</p>
<p>
By default files created are generally readable by everyone,
but if you pass <a class="link" href="GFile.html#G-FILE-CREATE-PRIVATE:CAPS"><span class="type">G_FILE_CREATE_PRIVATE</span></a> in <em class="parameter"><code>flags</code></em> the file
will be made readable only to the current user, to the level that
is supported on the target filesystem.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned. 
</p>
<p>
Some file systems don't allow all file names, and may
return an <a class="link" href="gio-GIOError.html#G-IO-ERROR-INVALID-FILENAME:CAPS"><code class="literal">G_IO_ERROR_INVALID_FILENAME</code></a> error.
If the file is a directory the <a class="link" href="gio-GIOError.html#G-IO-ERROR-IS-DIRECTORY:CAPS"><code class="literal">G_IO_ERROR_IS_DIRECTORY</code></a> error will be
returned. Other errors are possible too, and depend on what kind of
filesystem the file is on.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a set of <a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GFileOutputStream.html" title="GFileOutputStream"><span class="type">GFileOutputStream</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-create"></a><h3>g_file_create ()</h3>
<pre class="programlisting"><a class="link" href="GFileOutputStream.html" title="GFileOutputStream"><span class="returnvalue">GFileOutputStream</span></a> * g_file_create                       (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Creates a new file and returns an output stream for writing to it.
The file must not already exist.
</p>
<p>
By default files created are generally readable by everyone,
but if you pass <a class="link" href="GFile.html#G-FILE-CREATE-PRIVATE:CAPS"><span class="type">G_FILE_CREATE_PRIVATE</span></a> in <em class="parameter"><code>flags</code></em> the file
will be made readable only to the current user, to the level that
is supported on the target filesystem.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned. 
</p>
<p>
If a file or directory with this name already exists the G_IO_ERROR_EXISTS
error will be returned.
Some file systems don't allow all file names, and may
return an G_IO_ERROR_INVALID_FILENAME error, and if the name
is to long G_IO_ERROR_FILENAME_TOO_LONG will be returned.
Other errors are possible too, and depend on what kind of
filesystem the file is on.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a set of <a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GFileOutputStream.html" title="GFileOutputStream"><span class="type">GFileOutputStream</span></a> for the newly created file, or
<a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-replace"></a><h3>g_file_replace ()</h3>
<pre class="programlisting"><a class="link" href="GFileOutputStream.html" title="GFileOutputStream"><span class="returnvalue">GFileOutputStream</span></a> * g_file_replace                      (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *etag</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> make_backup</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Returns an output stream for overwriting the file, possibly
creating a backup copy of the file first. If the file doesn't exist,
it will be created.
</p>
<p>
This will try to replace the file in the safest way possible so
that any errors during the writing will not affect an already
existing copy of the file. For instance, for local files it
may write to a temporary file and then atomically rename over
the destination when the stream is closed.
</p>
<p>
By default files created are generally readable by everyone,
but if you pass <a class="link" href="GFile.html#G-FILE-CREATE-PRIVATE:CAPS"><span class="type">G_FILE_CREATE_PRIVATE</span></a> in <em class="parameter"><code>flags</code></em> the file
will be made readable only to the current user, to the level that
is supported on the target filesystem.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned. 
</p>
<p>
If you pass in a non-<a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><span class="type">NULL</span></a> <em class="parameter"><code>etag</code></em> value, then this value is
compared to the current entity tag of the file, and if they differ
an G_IO_ERROR_WRONG_ETAG error is returned. This generally means
that the file has been changed since you last read it. You can get
the new etag from <a class="link" href="GFileOutputStream.html#g-file-output-stream-get-etag" title="g_file_output_stream_get_etag ()"><code class="function">g_file_output_stream_get_etag()</code></a> after you've
finished writing and closed the <a class="link" href="GFileOutputStream.html" title="GFileOutputStream"><span class="type">GFileOutputStream</span></a>. When you load
a new file you can use <a class="link" href="GFileInputStream.html#g-file-input-stream-query-info" title="g_file_input_stream_query_info ()"><code class="function">g_file_input_stream_query_info()</code></a> to get
the etag of the file.
</p>
<p>
If <em class="parameter"><code>make_backup</code></em> is <a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a>, this function will attempt to make a backup
of the current file before overwriting it. If this fails a G_IO_ERROR_CANT_CREATE_BACKUP
error will be returned. If you want to replace anyway, try again with
<em class="parameter"><code>make_backup</code></em> set to <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a>.
</p>
<p>
If the file is a directory the G_IO_ERROR_IS_DIRECTORY error will be returned,
and if the file is some other form of non-regular file then a
G_IO_ERROR_NOT_REGULAR_FILE error will be returned.
Some file systems don't allow all file names, and may
return an G_IO_ERROR_INVALID_FILENAME error, and if the name
is to long G_IO_ERROR_FILENAME_TOO_LONG will be returned.
Other errors are possible too, and depend on what kind of
filesystem the file is on.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>etag</code></em> :</span></p></td>
<td>an optional <a class="link" href="GFile.html#gfile-etag">entity tag</a> for the
current <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><span class="type">NULL</span></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>make_backup</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if a backup should be created.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a set of <a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GFileOutputStream.html" title="GFileOutputStream"><span class="type">GFileOutputStream</span></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-append-to-async"></a><h3>g_file_append_to_async ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_append_to_async              (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> io_priority</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Asynchronously opens <em class="parameter"><code>file</code></em> for appending.
</p>
<p>
For more details, see <a class="link" href="GFile.html#g-file-append-to" title="g_file_append_to ()"><code class="function">g_file_append_to()</code></a> which is
the synchronous version of this call.
</p>
<p>
When the operation is finished, <em class="parameter"><code>callback</code></em> will be called. You can then call
<a class="link" href="GFile.html#g-file-append-to-finish" title="g_file_append_to_finish ()"><code class="function">g_file_append_to_finish()</code></a> to get the result of the operation.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a set of <a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>io_priority</code></em> :</span></p></td>
<td>the <a class="link" href="gio-GIOScheduler.html#io-priority">I/O priority</a>
of the request.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied. <span class="annotation">[<acronym title="The callback is valid until first called."><span class="acronym">scope async</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function. <span class="annotation">[<acronym title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><span class="acronym">closure</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-append-to-finish"></a><h3>g_file_append_to_finish ()</h3>
<pre class="programlisting"><a class="link" href="GFileOutputStream.html" title="GFileOutputStream"><span class="returnvalue">GFileOutputStream</span></a> * g_file_append_to_finish             (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *res</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes an asynchronous file append operation started with 
<a class="link" href="GFile.html#g-file-append-to-async" title="g_file_append_to_async ()"><code class="function">g_file_append_to_async()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>res</code></em> :</span></p></td>
<td><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a></td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a valid <a class="link" href="GFileOutputStream.html" title="GFileOutputStream"><span class="type">GFileOutputStream</span></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-create-async"></a><h3>g_file_create_async ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_create_async                 (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> io_priority</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Asynchronously creates a new file and returns an output stream for writing to it.
The file must not already exist.
</p>
<p>
For more details, see <a class="link" href="GFile.html#g-file-create" title="g_file_create ()"><code class="function">g_file_create()</code></a> which is
the synchronous version of this call.
</p>
<p>
When the operation is finished, <em class="parameter"><code>callback</code></em> will be called. You can then call
<a class="link" href="GFile.html#g-file-create-finish" title="g_file_create_finish ()"><code class="function">g_file_create_finish()</code></a> to get the result of the operation.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a set of <a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>io_priority</code></em> :</span></p></td>
<td>the <a class="link" href="gio-GIOScheduler.html#io-priority">I/O priority</a>
of the request.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied. <span class="annotation">[<acronym title="The callback is valid until first called."><span class="acronym">scope async</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function. <span class="annotation">[<acronym title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><span class="acronym">closure</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-create-finish"></a><h3>g_file_create_finish ()</h3>
<pre class="programlisting"><a class="link" href="GFileOutputStream.html" title="GFileOutputStream"><span class="returnvalue">GFileOutputStream</span></a> * g_file_create_finish                (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *res</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes an asynchronous file create operation started with 
<a class="link" href="GFile.html#g-file-create-async" title="g_file_create_async ()"><code class="function">g_file_create_async()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>res</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GFileOutputStream.html" title="GFileOutputStream"><span class="type">GFileOutputStream</span></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-replace-async"></a><h3>g_file_replace_async ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_replace_async                (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *etag</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> make_backup</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> io_priority</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Asynchronously overwrites the file, replacing the contents, possibly
creating a backup copy of the file first.
</p>
<p>
For more details, see <a class="link" href="GFile.html#g-file-replace" title="g_file_replace ()"><code class="function">g_file_replace()</code></a> which is
the synchronous version of this call.
</p>
<p>
When the operation is finished, <em class="parameter"><code>callback</code></em> will be called. You can then call
<a class="link" href="GFile.html#g-file-replace-finish" title="g_file_replace_finish ()"><code class="function">g_file_replace_finish()</code></a> to get the result of the operation.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>etag</code></em> :</span></p></td>
<td>an <a class="link" href="GFile.html#gfile-etag">entity tag</a> for the
current <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>, or NULL to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>make_backup</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if a backup should be created.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a set of <a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>io_priority</code></em> :</span></p></td>
<td>the <a class="link" href="gio-GIOScheduler.html#io-priority">I/O priority</a>
of the request.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied. <span class="annotation">[<acronym title="The callback is valid until first called."><span class="acronym">scope async</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function. <span class="annotation">[<acronym title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><span class="acronym">closure</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-replace-finish"></a><h3>g_file_replace_finish ()</h3>
<pre class="programlisting"><a class="link" href="GFileOutputStream.html" title="GFileOutputStream"><span class="returnvalue">GFileOutputStream</span></a> * g_file_replace_finish               (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *res</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes an asynchronous file replace operation started with 
<a class="link" href="GFile.html#g-file-replace-async" title="g_file_replace_async ()"><code class="function">g_file_replace_async()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>res</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GFileOutputStream.html" title="GFileOutputStream"><span class="type">GFileOutputStream</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-query-info"></a><h3>g_file_query_info ()</h3>
<pre class="programlisting"><a class="link" href="GFileInfo.html" title="GFileInfo"><span class="returnvalue">GFileInfo</span></a> *         g_file_query_info                   (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *attributes</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Gets the requested information about specified <em class="parameter"><code>file</code></em>. The result
is a <a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a> object that contains key-value attributes (such as 
the type or size of the file).
</p>
<p>
The <em class="parameter"><code>attributes</code></em> value is a string that specifies the file attributes that
should be gathered. It is not an error if it's not possible to read a particular
requested attribute from a file - it just won't be set. <em class="parameter"><code>attributes</code></em> should
be a comma-separated list of attributes or attribute wildcards. The wildcard "*"
means all attributes, and a wildcard like "standard::*" means all attributes in the standard
namespace. An example attribute query be "standard::*,owner::user".
The standard attributes are available as defines, like <a class="link" href="GFileInfo.html#G-FILE-ATTRIBUTE-STANDARD-NAME:CAPS" title="G_FILE_ATTRIBUTE_STANDARD_NAME"><span class="type">G_FILE_ATTRIBUTE_STANDARD_NAME</span></a>.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned. 
</p>
<p>
For symlinks, normally the information about the target of the
symlink is returned, rather than information about the symlink itself.
However if you pass <a class="link" href="GFile.html#G-FILE-QUERY-INFO-NOFOLLOW-SYMLINKS:CAPS"><span class="type">G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS</span></a> in <em class="parameter"><code>flags</code></em> the
information about the symlink itself will be returned. Also, for symlinks
that point to non-existing files the information about the symlink itself
will be returned.
</p>
<p>
If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
Other errors are possible too, and depend on what kind of filesystem the file is on.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>attributes</code></em> :</span></p></td>
<td>an attribute query string.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a set of <a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a> for the given <em class="parameter"><code>file</code></em>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-query-info-async"></a><h3>g_file_query_info_async ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_query_info_async             (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *attributes</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> io_priority</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Asynchronously gets the requested information about specified <em class="parameter"><code>file</code></em>. The result
is a <a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a> object that contains key-value attributes (such as type or size
for the file).
</p>
<p>
For more details, see <a class="link" href="GFile.html#g-file-query-info" title="g_file_query_info ()"><code class="function">g_file_query_info()</code></a> which is
the synchronous version of this call.
</p>
<p>
When the operation is finished, <em class="parameter"><code>callback</code></em> will be called. You can then call
<a class="link" href="GFile.html#g-file-query-info-finish" title="g_file_query_info_finish ()"><code class="function">g_file_query_info_finish()</code></a> to get the result of the operation.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>attributes</code></em> :</span></p></td>
<td>an attribute query string.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a set of <a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>io_priority</code></em> :</span></p></td>
<td>the <a class="link" href="gio-GIOScheduler.html#io-priority">I/O priority</a>
of the request.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied. <span class="annotation">[<acronym title="The callback is valid until first called."><span class="acronym">scope async</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function. <span class="annotation">[<acronym title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><span class="acronym">closure</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-query-info-finish"></a><h3>g_file_query_info_finish ()</h3>
<pre class="programlisting"><a class="link" href="GFileInfo.html" title="GFileInfo"><span class="returnvalue">GFileInfo</span></a> *         g_file_query_info_finish            (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *res</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes an asynchronous file info query. 
See <a class="link" href="GFile.html#g-file-query-info-async" title="g_file_query_info_async ()"><code class="function">g_file_query_info_async()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>res</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a> for given <em class="parameter"><code>file</code></em> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-query-exists"></a><h3>g_file_query_exists ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_query_exists                 (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>);</pre>
<p>
Utility function to check if a particular file exists. This is
implemented using <a class="link" href="GFile.html#g-file-query-info" title="g_file_query_info ()"><code class="function">g_file_query_info()</code></a> and as such does blocking I/O.
</p>
<p>
Note that in many cases it is racy to first check for file existence
and then execute something based on the outcome of that, because the
file might have been created or removed in between the operations. The
general approach to handling that is to not check, but just do the
operation and handle the errors as they come.
</p>
<p>
As an example of race-free checking, take the case of reading a file, and
if it doesn't exist, creating it. There are two racy versions: read it, and
on error create it; and: check if it exists, if not create it. These
can both result in two processes creating the file (with perhaps a partially
written file as the result). The correct approach is to always try to create
the file with <a class="link" href="GFile.html#g-file-create" title="g_file_create ()"><code class="function">g_file_create()</code></a> which will either atomically create the file
or fail with a G_IO_ERROR_EXISTS error.
</p>
<p>
However, in many cases an existence check is useful in a user
interface, for instance to make a menu item sensitive/insensitive, so that
you don't have to fool users that something is possible and then just show
and error dialog. If you do this, you should make sure to also handle the
errors that can happen due to races when you execute the operation.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the file exists (and can be detected without error), <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise (or if cancelled).</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-query-file-type"></a><h3>g_file_query_file_type ()</h3>
<pre class="programlisting"><a class="link" href="GFileInfo.html#GFileType" title="enum GFileType"><span class="returnvalue">GFileType</span></a>           g_file_query_file_type              (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>);</pre>
<p>
Utility function to inspect the <a class="link" href="GFileInfo.html#GFileType" title="enum GFileType"><span class="type">GFileType</span></a> of a file. This is
implemented using <a class="link" href="GFile.html#g-file-query-info" title="g_file_query_info ()"><code class="function">g_file_query_info()</code></a> and as such does blocking I/O.
</p>
<p>
The primary use case of this method is to check if a file is a regular file,
directory, or symlink.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a set of <a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a> passed to <a class="link" href="GFile.html#g-file-query-info" title="g_file_query_info ()"><code class="function">g_file_query_info()</code></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>The <a class="link" href="GFileInfo.html#GFileType" title="enum GFileType"><span class="type">GFileType</span></a> of the file and <a class="link" href="GFileInfo.html#G-FILE-TYPE-UNKNOWN:CAPS"><span class="type">G_FILE_TYPE_UNKNOWN</span></a> if the file
does not exist</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.18</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-query-filesystem-info"></a><h3>g_file_query_filesystem_info ()</h3>
<pre class="programlisting"><a class="link" href="GFileInfo.html" title="GFileInfo"><span class="returnvalue">GFileInfo</span></a> *         g_file_query_filesystem_info        (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *attributes</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Similar to <a class="link" href="GFile.html#g-file-query-info" title="g_file_query_info ()"><code class="function">g_file_query_info()</code></a>, but obtains information
about the filesystem the <em class="parameter"><code>file</code></em> is on, rather than the file itself.
For instance the amount of space available and the type of
the filesystem.
</p>
<p>
The <em class="parameter"><code>attributes</code></em> value is a string that specifies the file attributes that
should be gathered. It is not an error if it's not possible to read a particular
requested attribute from a file - it just won't be set. <em class="parameter"><code>attributes</code></em> should
be a comma-separated list of attributes or attribute wildcards. The wildcard "*"
means all attributes, and a wildcard like "filesystem::*" means all attributes in the
filesystem namespace. The standard namespace for filesystem attributes is "filesystem".
Common attributes of interest are <a class="link" href="GFileInfo.html#G-FILE-ATTRIBUTE-FILESYSTEM-SIZE:CAPS" title="G_FILE_ATTRIBUTE_FILESYSTEM_SIZE"><span class="type">G_FILE_ATTRIBUTE_FILESYSTEM_SIZE</span></a>
(the total size of the filesystem in bytes), <a class="link" href="GFileInfo.html#G-FILE-ATTRIBUTE-FILESYSTEM-FREE:CAPS" title="G_FILE_ATTRIBUTE_FILESYSTEM_FREE"><span class="type">G_FILE_ATTRIBUTE_FILESYSTEM_FREE</span></a> (number of
bytes available), and <a class="link" href="GFileInfo.html#G-FILE-ATTRIBUTE-FILESYSTEM-TYPE:CAPS" title="G_FILE_ATTRIBUTE_FILESYSTEM_TYPE"><span class="type">G_FILE_ATTRIBUTE_FILESYSTEM_TYPE</span></a> (type of the filesystem).
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned. 
</p>
<p>
If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
Other errors are possible too, and depend on what kind of filesystem the file is on.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>attributes</code></em> :</span></p></td>
<td>an attribute query string.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if there was an error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-query-filesystem-info-async"></a><h3>g_file_query_filesystem_info_async ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_query_filesystem_info_async  (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *attributes</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> io_priority</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Asynchronously gets the requested information about the filesystem
that the specified <em class="parameter"><code>file</code></em> is on. The result is a <a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a> object
that contains key-value attributes (such as type or size for the
file).
</p>
<p>
For more details, see <a class="link" href="GFile.html#g-file-query-filesystem-info" title="g_file_query_filesystem_info ()"><code class="function">g_file_query_filesystem_info()</code></a> which is the
synchronous version of this call.
</p>
<p>
When the operation is finished, <em class="parameter"><code>callback</code></em> will be called. You can
then call <a class="link" href="GFile.html#g-file-query-info-finish" title="g_file_query_info_finish ()"><code class="function">g_file_query_info_finish()</code></a> to get the result of the
operation.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>attributes</code></em> :</span></p></td>
<td>an attribute query string.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>io_priority</code></em> :</span></p></td>
<td>the <a class="link" href="gio-GIOScheduler.html#io-priority">I/O priority</a>
of the request.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied. <span class="annotation">[<acronym title="The callback is valid until first called."><span class="acronym">scope async</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function. <span class="annotation">[<acronym title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><span class="acronym">closure</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-query-filesystem-info-finish"></a><h3>g_file_query_filesystem_info_finish ()</h3>
<pre class="programlisting"><a class="link" href="GFileInfo.html" title="GFileInfo"><span class="returnvalue">GFileInfo</span></a> *         g_file_query_filesystem_info_finish (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *res</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes an asynchronous filesystem info query.  See
<a class="link" href="GFile.html#g-file-query-filesystem-info-async" title="g_file_query_filesystem_info_async ()"><code class="function">g_file_query_filesystem_info_async()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>res</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a> for given <em class="parameter"><code>file</code></em> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-query-default-handler"></a><h3>g_file_query_default_handler ()</h3>
<pre class="programlisting"><a class="link" href="GAppInfo.html" title="GAppInfo"><span class="returnvalue">GAppInfo</span></a> *          g_file_query_default_handler        (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Returns the <a class="link" href="GAppInfo.html" title="GAppInfo"><span class="type">GAppInfo</span></a> that is registered as the default
application to handle the file specified by <em class="parameter"><code>file</code></em>.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> to open.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GAppInfo.html" title="GAppInfo"><span class="type">GAppInfo</span></a> if the handle was found, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if there were errors.
When you are done with it, release it with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-find-enclosing-mount"></a><h3>g_file_find_enclosing_mount ()</h3>
<pre class="programlisting"><a class="link" href="GMount.html" title="GMount"><span class="returnvalue">GMount</span></a> *            g_file_find_enclosing_mount         (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Gets a <a class="link" href="GMount.html" title="GMount"><span class="type">GMount</span></a> for the <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>. 
</p>
<p>
If the <a class="link" href="GFile.html#GFileIface" title="struct GFileIface"><span class="type">GFileIface</span></a> for <em class="parameter"><code>file</code></em> does not have a mount (e.g. possibly a 
remote share), <em class="parameter"><code>error</code></em> will be set to <a class="link" href="gio-GIOError.html#G-IO-ERROR-NOT-FOUND:CAPS"><code class="literal">G_IO_ERROR_NOT_FOUND</code></a> and <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
will be returned.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GMount.html" title="GMount"><span class="type">GMount</span></a> where the <em class="parameter"><code>file</code></em> is located or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-find-enclosing-mount-async"></a><h3>g_file_find_enclosing_mount_async ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_find_enclosing_mount_async   (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> io_priority</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Asynchronously gets the mount for the file.
</p>
<p>
For more details, see <a class="link" href="GFile.html#g-file-find-enclosing-mount" title="g_file_find_enclosing_mount ()"><code class="function">g_file_find_enclosing_mount()</code></a> which is
the synchronous version of this call.
</p>
<p>
When the operation is finished, <em class="parameter"><code>callback</code></em> will be called. You can then call
<a class="link" href="GFile.html#g-file-find-enclosing-mount-finish" title="g_file_find_enclosing_mount_finish ()"><code class="function">g_file_find_enclosing_mount_finish()</code></a> to get the result of the operation.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>io_priority</code></em> :</span></p></td>
<td>the <a class="link" href="gio-GIOScheduler.html#io-priority">I/O priority</a>
of the request.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied. <span class="annotation">[<acronym title="The callback is valid until first called."><span class="acronym">scope async</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function. <span class="annotation">[<acronym title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><span class="acronym">closure</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-find-enclosing-mount-finish"></a><h3>g_file_find_enclosing_mount_finish ()</h3>
<pre class="programlisting"><a class="link" href="GMount.html" title="GMount"><span class="returnvalue">GMount</span></a> *            g_file_find_enclosing_mount_finish  (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *res</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes an asynchronous find mount request. 
See <a class="link" href="GFile.html#g-file-find-enclosing-mount-async" title="g_file_find_enclosing_mount_async ()"><code class="function">g_file_find_enclosing_mount_async()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>res</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a class="link" href="GMount.html" title="GMount"><span class="type">GMount</span></a> for given <em class="parameter"><code>file</code></em> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-enumerate-children"></a><h3>g_file_enumerate_children ()</h3>
<pre class="programlisting"><a class="link" href="GFileEnumerator.html" title="GFileEnumerator"><span class="returnvalue">GFileEnumerator</span></a> *   g_file_enumerate_children           (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *attributes</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Gets the requested information about the files in a directory. The result
is a <a class="link" href="GFileEnumerator.html" title="GFileEnumerator"><span class="type">GFileEnumerator</span></a> object that will give out <a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a> objects for
all the files in the directory.
</p>
<p>
The <em class="parameter"><code>attributes</code></em> value is a string that specifies the file attributes that
should be gathered. It is not an error if it's not possible to read a particular
requested attribute from a file - it just won't be set. <em class="parameter"><code>attributes</code></em> should
be a comma-separated list of attributes or attribute wildcards. The wildcard "*"
means all attributes, and a wildcard like "standard::*" means all attributes in the standard
namespace. An example attribute query be "standard::*,owner::user".
The standard attributes are available as defines, like <a class="link" href="GFileInfo.html#G-FILE-ATTRIBUTE-STANDARD-NAME:CAPS" title="G_FILE_ATTRIBUTE_STANDARD_NAME"><span class="type">G_FILE_ATTRIBUTE_STANDARD_NAME</span></a>.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned. 
</p>
<p>
If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
If the file is not a directory, the G_FILE_ERROR_NOTDIR error will be returned.
Other errors are possible too.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>attributes</code></em> :</span></p></td>
<td>an attribute query string.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a set of <a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> for error reporting.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>A <a class="link" href="GFileEnumerator.html" title="GFileEnumerator"><span class="type">GFileEnumerator</span></a> if successful, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-enumerate-children-async"></a><h3>g_file_enumerate_children_async ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_enumerate_children_async     (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *attributes</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> io_priority</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Asynchronously gets the requested information about the files in a directory. The result
is a <a class="link" href="GFileEnumerator.html" title="GFileEnumerator"><span class="type">GFileEnumerator</span></a> object that will give out <a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a> objects for
all the files in the directory.
</p>
<p>
For more details, see <a class="link" href="GFile.html#g-file-enumerate-children" title="g_file_enumerate_children ()"><code class="function">g_file_enumerate_children()</code></a> which is
the synchronous version of this call.
</p>
<p>
When the operation is finished, <em class="parameter"><code>callback</code></em> will be called. You can then call
<a class="link" href="GFile.html#g-file-enumerate-children-finish" title="g_file_enumerate_children_finish ()"><code class="function">g_file_enumerate_children_finish()</code></a> to get the result of the operation.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>attributes</code></em> :</span></p></td>
<td>an attribute query string.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a set of <a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>io_priority</code></em> :</span></p></td>
<td>the <a class="link" href="gio-GIOScheduler.html#io-priority">I/O priority</a>
of the request.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>(scope async) : a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the
request is satisfied</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function. <span class="annotation">[<acronym title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><span class="acronym">closure</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-enumerate-children-finish"></a><h3>g_file_enumerate_children_finish ()</h3>
<pre class="programlisting"><a class="link" href="GFileEnumerator.html" title="GFileEnumerator"><span class="returnvalue">GFileEnumerator</span></a> *   g_file_enumerate_children_finish    (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *res</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes an async enumerate children operation.
See <a class="link" href="GFile.html#g-file-enumerate-children-async" title="g_file_enumerate_children_async ()"><code class="function">g_file_enumerate_children_async()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>res</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GFileEnumerator.html" title="GFileEnumerator"><span class="type">GFileEnumerator</span></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if an error occurred.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-set-display-name"></a><h3>g_file_set_display_name ()</h3>
<pre class="programlisting"><a class="link" href="GFile.html" title="GFile"><span class="returnvalue">GFile</span></a> *             g_file_set_display_name             (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *display_name</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Renames <em class="parameter"><code>file</code></em> to the specified display name.
</p>
<p>
The display name is converted from UTF8 to the correct encoding for the target
filesystem if possible and the <em class="parameter"><code>file</code></em> is renamed to this.
</p>
<p>
If you want to implement a rename operation in the user interface the edit name
(<a class="link" href="GFileInfo.html#G-FILE-ATTRIBUTE-STANDARD-EDIT-NAME:CAPS" title="G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME"><span class="type">G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME</span></a>) should be used as the initial value in the rename
widget, and then the result after editing should be passed to <a class="link" href="GFile.html#g-file-set-display-name" title="g_file_set_display_name ()"><code class="function">g_file_set_display_name()</code></a>.
</p>
<p>
On success the resulting converted filename is returned.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>display_name</code></em> :</span></p></td>
<td>a string.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> specifying what <em class="parameter"><code>file</code></em> was renamed to, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
if there was an error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-set-display-name-async"></a><h3>g_file_set_display_name_async ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_set_display_name_async       (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *display_name</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> io_priority</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Asynchronously sets the display name for a given <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.
</p>
<p>
For more details, see <a class="link" href="GFile.html#g-file-set-display-name" title="g_file_set_display_name ()"><code class="function">g_file_set_display_name()</code></a> which is
the synchronous version of this call.
</p>
<p>
When the operation is finished, <em class="parameter"><code>callback</code></em> will be called. You can then call
<a class="link" href="GFile.html#g-file-set-display-name-finish" title="g_file_set_display_name_finish ()"><code class="function">g_file_set_display_name_finish()</code></a> to get the result of the operation.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>display_name</code></em> :</span></p></td>
<td>a string.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>io_priority</code></em> :</span></p></td>
<td>the <a class="link" href="gio-GIOScheduler.html#io-priority">I/O priority</a>
of the request.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied. <span class="annotation">[<acronym title="The callback is valid until first called."><span class="acronym">scope async</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function. <span class="annotation">[<acronym title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><span class="acronym">closure</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-set-display-name-finish"></a><h3>g_file_set_display_name_finish ()</h3>
<pre class="programlisting"><a class="link" href="GFile.html" title="GFile"><span class="returnvalue">GFile</span></a> *             g_file_set_display_name_finish      (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *res</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes setting a display name started with 
<a class="link" href="GFile.html#g-file-set-display-name-async" title="g_file_set_display_name_async ()"><code class="function">g_file_set_display_name_async()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>res</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-delete"></a><h3>g_file_delete ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_delete                       (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Deletes a file. If the <em class="parameter"><code>file</code></em> is a directory, it will only be deleted if it 
is empty.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned. 
</p>
<p>
Virtual: delete_file
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the file was deleted. <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-trash"></a><h3>g_file_trash ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_trash                        (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Sends <em class="parameter"><code>file</code></em> to the "Trashcan", if possible. This is similar to
deleting it, but the user can recover it before emptying the trashcan.
Not all file systems support trashing, so this call can return the
<a class="link" href="gio-GIOError.html#G-IO-ERROR-NOT-SUPPORTED:CAPS"><code class="literal">G_IO_ERROR_NOT_SUPPORTED</code></a> error.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>
<a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> to send to trash.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on successful trash, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-copy"></a><h3>g_file_copy ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_copy                         (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *source</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *destination</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileCopyFlags" title="enum GFileCopyFlags"><span class="type">GFileCopyFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileProgressCallback" title="GFileProgressCallback ()"><span class="type">GFileProgressCallback</span></a> progress_callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> progress_callback_data</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Copies the file <em class="parameter"><code>source</code></em> to the location specified by <em class="parameter"><code>destination</code></em>.
Can not handle recursive copies of directories.
</p>
<p>
If the flag <a class="link" href="GFile.html#G-FILE-COPY-OVERWRITE:CAPS"><span class="type">G_FILE_COPY_OVERWRITE</span></a> is specified an already
existing <em class="parameter"><code>destination</code></em> file is overwritten.
</p>
<p>
If the flag <a class="link" href="GFile.html#G-FILE-COPY-NOFOLLOW-SYMLINKS:CAPS"><span class="type">G_FILE_COPY_NOFOLLOW_SYMLINKS</span></a> is specified then symlinks
will be copied as symlinks, otherwise the target of the
<em class="parameter"><code>source</code></em> symlink will be copied.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<p>
If <em class="parameter"><code>progress_callback</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be monitored by
setting this to a <a class="link" href="GFile.html#GFileProgressCallback" title="GFileProgressCallback ()"><span class="type">GFileProgressCallback</span></a> function. <em class="parameter"><code>progress_callback_data</code></em>
will be passed to this function. It is guaranteed that this callback will
be called after all data has been transferred with the total number of bytes
copied during the operation.
</p>
<p>
If the <em class="parameter"><code>source</code></em> file does not exist then the G_IO_ERROR_NOT_FOUND
error is returned, independent on the status of the <em class="parameter"><code>destination</code></em>.
</p>
<p>
If <a class="link" href="GFile.html#G-FILE-COPY-OVERWRITE:CAPS"><span class="type">G_FILE_COPY_OVERWRITE</span></a> is not specified and the target exists, then the
error G_IO_ERROR_EXISTS is returned.
</p>
<p>
If trying to overwrite a file over a directory the G_IO_ERROR_IS_DIRECTORY
error is returned. If trying to overwrite a directory with a directory the
G_IO_ERROR_WOULD_MERGE error is returned.
</p>
<p>
If the source is a directory and the target does not exist, or
<a class="link" href="GFile.html#G-FILE-COPY-OVERWRITE:CAPS"><span class="type">G_FILE_COPY_OVERWRITE</span></a> is specified and the target is a file, then the
G_IO_ERROR_WOULD_RECURSE error is returned.
</p>
<p>
If you are interested in copying the <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> object itself (not the on-disk
file), see <a class="link" href="GFile.html#g-file-dup" title="g_file_dup ()"><code class="function">g_file_dup()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>source</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>destination</code></em> :</span></p></td>
<td>destination <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>set of <a class="link" href="GFile.html#GFileCopyFlags" title="enum GFileCopyFlags"><span class="type">GFileCopyFlags</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>progress_callback</code></em> :</span></p></td>
<td>function to callback with
progress information, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if progress information is not needed. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>][<acronym title="The callback is valid only during the call to the method."><span class="acronym">scope call</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>progress_callback_data</code></em> :</span></p></td>
<td>user data to pass to <em class="parameter"><code>progress_callback</code></em>. <span class="annotation">[<acronym title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><span class="acronym">closure</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> to set on error, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-copy-async"></a><h3>g_file_copy_async ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_copy_async                   (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *source</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *destination</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileCopyFlags" title="enum GFileCopyFlags"><span class="type">GFileCopyFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> io_priority</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileProgressCallback" title="GFileProgressCallback ()"><span class="type">GFileProgressCallback</span></a> progress_callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> progress_callback_data</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Copies the file <em class="parameter"><code>source</code></em> to the location specified by <em class="parameter"><code>destination</code></em>
asynchronously. For details of the behaviour, see <a class="link" href="GFile.html#g-file-copy" title="g_file_copy ()"><code class="function">g_file_copy()</code></a>.
</p>
<p>
If <em class="parameter"><code>progress_callback</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then that function that will be called
just like in <a class="link" href="GFile.html#g-file-copy" title="g_file_copy ()"><code class="function">g_file_copy()</code></a>, however the callback will run in the main loop,
not in the thread that is doing the I/O operation.
</p>
<p>
When the operation is finished, <em class="parameter"><code>callback</code></em> will be called. You can then call
<a class="link" href="GFile.html#g-file-copy-finish" title="g_file_copy_finish ()"><code class="function">g_file_copy_finish()</code></a> to get the result of the operation.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>source</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>destination</code></em> :</span></p></td>
<td>destination <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>set of <a class="link" href="GFile.html#GFileCopyFlags" title="enum GFileCopyFlags"><span class="type">GFileCopyFlags</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>io_priority</code></em> :</span></p></td>
<td>the <a class="link" href="gio-GIOScheduler.html#io-priority">I/O priority</a>
of the request</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>progress_callback</code></em> :</span></p></td>
<td>function to callback with progress
information, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if progress information is not needed. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>progress_callback_data</code></em> :</span></p></td>
<td>user data to pass to <em class="parameter"><code>progress_callback</code></em>. <span class="annotation">[<acronym title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><span class="acronym">closure</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-copy-finish"></a><h3>g_file_copy_finish ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_copy_finish                  (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *res</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes copying the file started with 
<a class="link" href="GFile.html#g-file-copy-async" title="g_file_copy_async ()"><code class="function">g_file_copy_async()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>res</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> on error.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-move"></a><h3>g_file_move ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_move                         (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *source</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *destination</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileCopyFlags" title="enum GFileCopyFlags"><span class="type">GFileCopyFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileProgressCallback" title="GFileProgressCallback ()"><span class="type">GFileProgressCallback</span></a> progress_callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> progress_callback_data</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Tries to move the file or directory <em class="parameter"><code>source</code></em> to the location specified by <em class="parameter"><code>destination</code></em>.
If native move operations are supported then this is used, otherwise a copy + delete
fallback is used. The native implementation may support moving directories (for instance
on moves inside the same filesystem), but the fallback code does not.
</p>
<p>
If the flag <a class="link" href="GFile.html#G-FILE-COPY-OVERWRITE:CAPS"><span class="type">G_FILE_COPY_OVERWRITE</span></a> is specified an already
existing <em class="parameter"><code>destination</code></em> file is overwritten.
</p>
<p>
If the flag <a class="link" href="GFile.html#G-FILE-COPY-NOFOLLOW-SYMLINKS:CAPS"><span class="type">G_FILE_COPY_NOFOLLOW_SYMLINKS</span></a> is specified then symlinks
will be copied as symlinks, otherwise the target of the
<em class="parameter"><code>source</code></em> symlink will be copied.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned. 
</p>
<p>
If <em class="parameter"><code>progress_callback</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be monitored by
setting this to a <a class="link" href="GFile.html#GFileProgressCallback" title="GFileProgressCallback ()"><span class="type">GFileProgressCallback</span></a> function. <em class="parameter"><code>progress_callback_data</code></em>
will be passed to this function. It is guaranteed that this callback will
be called after all data has been transferred with the total number of bytes
copied during the operation.
</p>
<p>
If the <em class="parameter"><code>source</code></em> file does not exist then the G_IO_ERROR_NOT_FOUND
error is returned, independent on the status of the <em class="parameter"><code>destination</code></em>.
</p>
<p>
If <a class="link" href="GFile.html#G-FILE-COPY-OVERWRITE:CAPS"><span class="type">G_FILE_COPY_OVERWRITE</span></a> is not specified and the target exists, then the
error G_IO_ERROR_EXISTS is returned.
</p>
<p>
If trying to overwrite a file over a directory the G_IO_ERROR_IS_DIRECTORY
error is returned. If trying to overwrite a directory with a directory the
G_IO_ERROR_WOULD_MERGE error is returned.
</p>
<p>
If the source is a directory and the target does not exist, or <a class="link" href="GFile.html#G-FILE-COPY-OVERWRITE:CAPS"><span class="type">G_FILE_COPY_OVERWRITE</span></a> is
specified and the target is a file, then the G_IO_ERROR_WOULD_RECURSE error
may be returned (if the native move operation isn't available).
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>source</code></em> :</span></p></td>
<td>
<a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> pointing to the source location.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>destination</code></em> :</span></p></td>
<td>
<a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> pointing to the destination location.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>set of <a class="link" href="GFile.html#GFileCopyFlags" title="enum GFileCopyFlags"><span class="type">GFileCopyFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>progress_callback</code></em> :</span></p></td>
<td>
<a class="link" href="GFile.html#GFileProgressCallback" title="GFileProgressCallback ()"><span class="type">GFileProgressCallback</span></a> function for updates. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>][<acronym title="The callback is valid only during the call to the method."><span class="acronym">scope call</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>progress_callback_data</code></em> :</span></p></td>
<td>gpointer to user data for the callback function. <span class="annotation">[<acronym title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><span class="acronym">closure</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> for returning error conditions, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on successful move, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-make-directory"></a><h3>g_file_make_directory ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_make_directory               (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Creates a directory. Note that this will only create a child directory of
the immediate parent directory of the path or URI given by the <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>. To 
recursively create directories, see <a class="link" href="GFile.html#g-file-make-directory-with-parents" title="g_file_make_directory_with_parents ()"><code class="function">g_file_make_directory_with_parents()</code></a>.
This function will fail if the parent directory does not exist, setting 
<em class="parameter"><code>error</code></em> to <a class="link" href="gio-GIOError.html#G-IO-ERROR-NOT-FOUND:CAPS"><code class="literal">G_IO_ERROR_NOT_FOUND</code></a>. If the file system doesn't support creating
directories, this function will fail, setting <em class="parameter"><code>error</code></em> to 
<a class="link" href="gio-GIOError.html#G-IO-ERROR-NOT-SUPPORTED:CAPS"><code class="literal">G_IO_ERROR_NOT_SUPPORTED</code></a>.
</p>
<p>
For a local <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> the newly created directory will have the default
(current) ownership and permissions of the current process.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on successful creation, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-make-directory-with-parents"></a><h3>g_file_make_directory_with_parents ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_make_directory_with_parents  (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Creates a directory and any parent directories that may not exist similar to
'mkdir -p'. If the file system does not support creating directories, this
function will fail, setting <em class="parameter"><code>error</code></em> to <a class="link" href="gio-GIOError.html#G-IO-ERROR-NOT-SUPPORTED:CAPS"><code class="literal">G_IO_ERROR_NOT_SUPPORTED</code></a>. If the
directory itself already exists, this function will fail setting <em class="parameter"><code>error</code></em>
to <a class="link" href="gio-GIOError.html#G-IO-ERROR-EXISTS:CAPS"><code class="literal">G_IO_ERROR_EXISTS</code></a>, unlike the similar <a href="../glib/glib-File-Utilities.html#g-mkdir-with-parents"><code class="function">g_mkdir_with_parents()</code></a>.
</p>
<p>
For a local <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> the newly created directories will have the default
(current) ownership and permissions of the current process.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if all directories have been successfully created, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a>
otherwise.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.18</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-make-symbolic-link"></a><h3>g_file_make_symbolic_link ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_make_symbolic_link           (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *symlink_value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Creates a symbolic link named <em class="parameter"><code>file</code></em> which contains the string
<em class="parameter"><code>symlink_value</code></em>.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> with the name of the symlink to create</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>symlink_value</code></em> :</span></p></td>
<td>a string with the path for the target of the new symlink</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on the creation of a new symlink, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-query-settable-attributes"></a><h3>g_file_query_settable_attributes ()</h3>
<pre class="programlisting"><a class="link" href="gio-GFileAttribute.html#GFileAttributeInfoList" title="GFileAttributeInfoList"><span class="returnvalue">GFileAttributeInfoList</span></a> * g_file_query_settable_attributes
                                                        (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Obtain the list of settable attributes for the file.
</p>
<p>
Returns the type and full attribute name of all the attributes 
that can be set on this file. This doesn't mean setting it will always 
succeed though, you might get an access failure, or some specific 
file may not support a specific attribute.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="gio-GFileAttribute.html#GFileAttributeInfoList" title="GFileAttributeInfoList"><span class="type">GFileAttributeInfoList</span></a> describing the settable attributes.
When you are done with it, release it with <a class="link" href="gio-GFileAttribute.html#g-file-attribute-info-list-unref" title="g_file_attribute_info_list_unref ()"><code class="function">g_file_attribute_info_list_unref()</code></a>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-query-writable-namespaces"></a><h3>g_file_query_writable_namespaces ()</h3>
<pre class="programlisting"><a class="link" href="gio-GFileAttribute.html#GFileAttributeInfoList" title="GFileAttributeInfoList"><span class="returnvalue">GFileAttributeInfoList</span></a> * g_file_query_writable_namespaces
                                                        (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Obtain the list of attribute namespaces where new attributes 
can be created by a user. An example of this is extended
attributes (in the "xattr" namespace).
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="gio-GFileAttribute.html#GFileAttributeInfoList" title="GFileAttributeInfoList"><span class="type">GFileAttributeInfoList</span></a> describing the writable namespaces.
When you are done with it, release it with <a class="link" href="gio-GFileAttribute.html#g-file-attribute-info-list-unref" title="g_file_attribute_info_list_unref ()"><code class="function">g_file_attribute_info_list_unref()</code></a>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-set-attribute"></a><h3>g_file_set_attribute ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_set_attribute                (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *attribute</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gio-GFileAttribute.html#GFileAttributeType" title="enum GFileAttributeType"><span class="type">GFileAttributeType</span></a> type</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> value_p</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Sets an attribute in the file with attribute name <em class="parameter"><code>attribute</code></em> to <em class="parameter"><code>value</code></em>.
</p>
<p>
Some attributes can be unset by setting <em class="parameter"><code>attribute</code></em> to
<a class="link" href="gio-GFileAttribute.html#G-FILE-ATTRIBUTE-TYPE-INVALID:CAPS"><code class="literal">G_FILE_ATTRIBUTE_TYPE_INVALID</code></a> and <em class="parameter"><code>value_p</code></em> to <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>attribute</code></em> :</span></p></td>
<td>a string containing the attribute's name.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>The type of the attribute</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>value_p</code></em> :</span></p></td>
<td>a pointer to the value (or the pointer itself if the type is a pointer type). <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a set of <a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the attribute was set, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-set-attributes-from-info"></a><h3>g_file_set_attributes_from_info ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_set_attributes_from_info     (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a> *info</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Tries to set all attributes in the <a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a> on the target values, 
not stopping on the first error.
</p>
<p>
If there is any error during this operation then <em class="parameter"><code>error</code></em> will be set to
the first error. Error on particular fields are flagged by setting 
the "status" field in the attribute value to 
<a class="link" href="gio-GFileAttribute.html#G-FILE-ATTRIBUTE-STATUS-ERROR-SETTING:CAPS"><code class="literal">G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING</code></a>, which means you can also detect
further errors.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>info</code></em> :</span></p></td>
<td>a <a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td><a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a></td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if there was any error, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-set-attributes-async"></a><h3>g_file_set_attributes_async ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_set_attributes_async         (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a> *info</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> io_priority</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Asynchronously sets the attributes of <em class="parameter"><code>file</code></em> with <em class="parameter"><code>info</code></em>.
</p>
<p>
For more details, see <a class="link" href="GFile.html#g-file-set-attributes-from-info" title="g_file_set_attributes_from_info ()"><code class="function">g_file_set_attributes_from_info()</code></a> which is
the synchronous version of this call.
</p>
<p>
When the operation is finished, <em class="parameter"><code>callback</code></em> will be called. You can then call
<a class="link" href="GFile.html#g-file-set-attributes-finish" title="g_file_set_attributes_finish ()"><code class="function">g_file_set_attributes_finish()</code></a> to get the result of the operation.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>info</code></em> :</span></p></td>
<td>a <a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a <a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>io_priority</code></em> :</span></p></td>
<td>the <a class="link" href="gio-GIOScheduler.html#io-priority">I/O priority</a>
of the request.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a>. <span class="annotation">[<acronym title="The callback is valid until first called."><span class="acronym">scope async</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a>. <span class="annotation">[<acronym title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><span class="acronym">closure</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-set-attributes-finish"></a><h3>g_file_set_attributes_finish ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_set_attributes_finish        (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *result</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a> **info</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes setting an attribute started in <a class="link" href="GFile.html#g-file-set-attributes-async" title="g_file_set_attributes_async ()"><code class="function">g_file_set_attributes_async()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>result</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>info</code></em> :</span></p></td>
<td>a <a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a>. <span class="annotation">[<acronym title="Parameter for returning results. Default is transfer full."><span class="acronym">out</span></acronym>][<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the attributes were set correctly, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-set-attribute-string"></a><h3>g_file_set_attribute_string ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_set_attribute_string         (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *attribute</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Sets <em class="parameter"><code>attribute</code></em> of type <a class="link" href="gio-GFileAttribute.html#G-FILE-ATTRIBUTE-TYPE-STRING:CAPS"><code class="literal">G_FILE_ATTRIBUTE_TYPE_STRING</code></a> to <em class="parameter"><code>value</code></em>. 
If <em class="parameter"><code>attribute</code></em> is of a different type, this operation will fail.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>attribute</code></em> :</span></p></td>
<td>a string containing the attribute's name.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>value</code></em> :</span></p></td>
<td>a string containing the attribute's value.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>
<a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the <em class="parameter"><code>attribute</code></em> was successfully set, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-set-attribute-byte-string"></a><h3>g_file_set_attribute_byte_string ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_set_attribute_byte_string    (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *attribute</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Sets <em class="parameter"><code>attribute</code></em> of type <a class="link" href="gio-GFileAttribute.html#G-FILE-ATTRIBUTE-TYPE-BYTE-STRING:CAPS"><code class="literal">G_FILE_ATTRIBUTE_TYPE_BYTE_STRING</code></a> to <em class="parameter"><code>value</code></em>. 
If <em class="parameter"><code>attribute</code></em> is of a different type, this operation will fail, 
returning <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a>. 
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>attribute</code></em> :</span></p></td>
<td>a string containing the attribute's name.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>value</code></em> :</span></p></td>
<td>a string containing the attribute's new value.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a <a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the <em class="parameter"><code>attribute</code></em> was successfully set to <em class="parameter"><code>value</code></em>
in the <em class="parameter"><code>file</code></em>, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-set-attribute-uint32"></a><h3>g_file_set_attribute_uint32 ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_set_attribute_uint32         (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *attribute</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint32"><span class="type">guint32</span></a> value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Sets <em class="parameter"><code>attribute</code></em> of type <a class="link" href="gio-GFileAttribute.html#G-FILE-ATTRIBUTE-TYPE-UINT32:CAPS"><code class="literal">G_FILE_ATTRIBUTE_TYPE_UINT32</code></a> to <em class="parameter"><code>value</code></em>. 
If <em class="parameter"><code>attribute</code></em> is of a different type, this operation will fail.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>attribute</code></em> :</span></p></td>
<td>a string containing the attribute's name.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>value</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Basic-Types.html#guint32"><span class="type">guint32</span></a> containing the attribute's new value.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a <a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the <em class="parameter"><code>attribute</code></em> was successfully set to <em class="parameter"><code>value</code></em>
in the <em class="parameter"><code>file</code></em>, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-set-attribute-int32"></a><h3>g_file_set_attribute_int32 ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_set_attribute_int32          (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *attribute</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint32"><span class="type">gint32</span></a> value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Sets <em class="parameter"><code>attribute</code></em> of type <a class="link" href="gio-GFileAttribute.html#G-FILE-ATTRIBUTE-TYPE-INT32:CAPS"><code class="literal">G_FILE_ATTRIBUTE_TYPE_INT32</code></a> to <em class="parameter"><code>value</code></em>. 
If <em class="parameter"><code>attribute</code></em> is of a different type, this operation will fail.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>attribute</code></em> :</span></p></td>
<td>a string containing the attribute's name.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>value</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Basic-Types.html#gint32"><span class="type">gint32</span></a> containing the attribute's new value.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a <a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the <em class="parameter"><code>attribute</code></em> was successfully set to <em class="parameter"><code>value</code></em>
in the <em class="parameter"><code>file</code></em>, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-set-attribute-uint64"></a><h3>g_file_set_attribute_uint64 ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_set_attribute_uint64         (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *attribute</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint64"><span class="type">guint64</span></a> value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Sets <em class="parameter"><code>attribute</code></em> of type <a class="link" href="gio-GFileAttribute.html#G-FILE-ATTRIBUTE-TYPE-UINT64:CAPS"><code class="literal">G_FILE_ATTRIBUTE_TYPE_UINT64</code></a> to <em class="parameter"><code>value</code></em>. 
If <em class="parameter"><code>attribute</code></em> is of a different type, this operation will fail.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>attribute</code></em> :</span></p></td>
<td>a string containing the attribute's name.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>value</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Basic-Types.html#guint64"><span class="type">guint64</span></a> containing the attribute's new value.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a <a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the <em class="parameter"><code>attribute</code></em> was successfully set to <em class="parameter"><code>value</code></em>
in the <em class="parameter"><code>file</code></em>, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-set-attribute-int64"></a><h3>g_file_set_attribute_int64 ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_set_attribute_int64          (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *attribute</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint64"><span class="type">gint64</span></a> value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Sets <em class="parameter"><code>attribute</code></em> of type <a class="link" href="gio-GFileAttribute.html#G-FILE-ATTRIBUTE-TYPE-INT64:CAPS"><code class="literal">G_FILE_ATTRIBUTE_TYPE_INT64</code></a> to <em class="parameter"><code>value</code></em>. 
If <em class="parameter"><code>attribute</code></em> is of a different type, this operation will fail.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>attribute</code></em> :</span></p></td>
<td>a string containing the attribute's name.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>value</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Basic-Types.html#guint64"><span class="type">guint64</span></a> containing the attribute's new value.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a <a class="link" href="GFile.html#GFileQueryInfoFlags" title="enum GFileQueryInfoFlags"><span class="type">GFileQueryInfoFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the <em class="parameter"><code>attribute</code></em> was successfully set, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-mount-mountable"></a><h3>g_file_mount_mountable ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_mount_mountable              (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GMount.html#GMountMountFlags" title="enum GMountMountFlags"><span class="type">GMountMountFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GMountOperation.html" title="GMountOperation"><span class="type">GMountOperation</span></a> *mount_operation</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Mounts a file of type G_FILE_TYPE_MOUNTABLE.
Using <em class="parameter"><code>mount_operation</code></em>, you can request callbacks when, for instance, 
passwords are needed during authentication.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<p>
When the operation is finished, <em class="parameter"><code>callback</code></em> will be called. You can then call
<a class="link" href="GFile.html#g-file-mount-mountable-finish" title="g_file_mount_mountable_finish ()"><code class="function">g_file_mount_mountable_finish()</code></a> to get the result of the operation.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>flags affecting the operation</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>mount_operation</code></em> :</span></p></td>
<td>a <a class="link" href="GMountOperation.html" title="GMountOperation"><span class="type">GMountOperation</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to avoid user interaction. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="The callback is valid until first called."><span class="acronym">scope async</span></acronym>][<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function. <span class="annotation">[<acronym title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><span class="acronym">closure</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-mount-mountable-finish"></a><h3>g_file_mount_mountable_finish ()</h3>
<pre class="programlisting"><a class="link" href="GFile.html" title="GFile"><span class="returnvalue">GFile</span></a> *             g_file_mount_mountable_finish       (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *result</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes a mount operation. See <a class="link" href="GFile.html#g-file-mount-mountable" title="g_file_mount_mountable ()"><code class="function">g_file_mount_mountable()</code></a> for details.
</p>
<p>
Finish an asynchronous mount operation that was started 
with <a class="link" href="GFile.html#g-file-mount-mountable" title="g_file_mount_mountable ()"><code class="function">g_file_mount_mountable()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>result</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-unmount-mountable"></a><h3>g_file_unmount_mountable ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_unmount_mountable            (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GMount.html#GMountUnmountFlags" title="enum GMountUnmountFlags"><span class="type">GMountUnmountFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<div class="warning" style="margin-left: 0.5in; margin-right: 0.5in;">
<h3 class="title">Warning</h3>
<p><code class="literal">g_file_unmount_mountable</code> has been deprecated since version 2.22 and should not be used in newly-written code. Use <a class="link" href="GFile.html#g-file-unmount-mountable-with-operation" title="g_file_unmount_mountable_with_operation ()"><code class="function">g_file_unmount_mountable_with_operation()</code></a> instead.</p>
</div>
<p>
Unmounts a file of type G_FILE_TYPE_MOUNTABLE.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<p>
When the operation is finished, <em class="parameter"><code>callback</code></em> will be called. You can then call
<a class="link" href="GFile.html#g-file-unmount-mountable-finish" title="g_file_unmount_mountable_finish ()"><code class="function">g_file_unmount_mountable_finish()</code></a> to get the result of the operation.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>flags affecting the operation</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="The callback is valid until first called."><span class="acronym">scope async</span></acronym>][<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function. <span class="annotation">[<acronym title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><span class="acronym">closure</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-unmount-mountable-finish"></a><h3>g_file_unmount_mountable_finish ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_unmount_mountable_finish     (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *result</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<div class="warning" style="margin-left: 0.5in; margin-right: 0.5in;">
<h3 class="title">Warning</h3>
<p><code class="literal">g_file_unmount_mountable_finish</code> has been deprecated since version 2.22 and should not be used in newly-written code. Use <a class="link" href="GFile.html#g-file-unmount-mountable-with-operation-finish" title="g_file_unmount_mountable_with_operation_finish ()"><code class="function">g_file_unmount_mountable_with_operation_finish()</code></a> instead.</p>
</div>
<p>
Finishes an unmount operation, see <a class="link" href="GFile.html#g-file-unmount-mountable" title="g_file_unmount_mountable ()"><code class="function">g_file_unmount_mountable()</code></a> for details.
</p>
<p>
Finish an asynchronous unmount operation that was started 
with <a class="link" href="GFile.html#g-file-unmount-mountable" title="g_file_unmount_mountable ()"><code class="function">g_file_unmount_mountable()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>result</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the operation finished successfully. <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a>
otherwise.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-unmount-mountable-with-operation"></a><h3>g_file_unmount_mountable_with_operation ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_unmount_mountable_with_operation
                                                        (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GMount.html#GMountUnmountFlags" title="enum GMountUnmountFlags"><span class="type">GMountUnmountFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GMountOperation.html" title="GMountOperation"><span class="type">GMountOperation</span></a> *mount_operation</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Unmounts a file of type G_FILE_TYPE_MOUNTABLE.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<p>
When the operation is finished, <em class="parameter"><code>callback</code></em> will be called. You can then call
<a class="link" href="GFile.html#g-file-unmount-mountable-finish" title="g_file_unmount_mountable_finish ()"><code class="function">g_file_unmount_mountable_finish()</code></a> to get the result of the operation.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>flags affecting the operation</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>mount_operation</code></em> :</span></p></td>
<td>a <a class="link" href="GMountOperation.html" title="GMountOperation"><span class="type">GMountOperation</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to avoid user interaction. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="The callback is valid until first called."><span class="acronym">scope async</span></acronym>][<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function. <span class="annotation">[<acronym title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><span class="acronym">closure</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-unmount-mountable-with-operation-finish"></a><h3>g_file_unmount_mountable_with_operation_finish ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_unmount_mountable_with_operation_finish
                                                        (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *result</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes an unmount operation, see <a class="link" href="GFile.html#g-file-unmount-mountable-with-operation" title="g_file_unmount_mountable_with_operation ()"><code class="function">g_file_unmount_mountable_with_operation()</code></a> for details.
</p>
<p>
Finish an asynchronous unmount operation that was started
with <a class="link" href="GFile.html#g-file-unmount-mountable-with-operation" title="g_file_unmount_mountable_with_operation ()"><code class="function">g_file_unmount_mountable_with_operation()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>result</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the operation finished successfully. <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a>
otherwise.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-eject-mountable"></a><h3>g_file_eject_mountable ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_eject_mountable              (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GMount.html#GMountUnmountFlags" title="enum GMountUnmountFlags"><span class="type">GMountUnmountFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<div class="warning" style="margin-left: 0.5in; margin-right: 0.5in;">
<h3 class="title">Warning</h3>
<p><code class="literal">g_file_eject_mountable</code> has been deprecated since version 2.22 and should not be used in newly-written code. Use <a class="link" href="GFile.html#g-file-eject-mountable-with-operation" title="g_file_eject_mountable_with_operation ()"><code class="function">g_file_eject_mountable_with_operation()</code></a> instead.</p>
</div>
<p>
Starts an asynchronous eject on a mountable.  
When this operation has completed, <em class="parameter"><code>callback</code></em> will be called with
<em class="parameter"><code>user_user</code></em> data, and the operation can be finalized with 
<a class="link" href="GFile.html#g-file-eject-mountable-finish" title="g_file_eject_mountable_finish ()"><code class="function">g_file_eject_mountable_finish()</code></a>.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>flags affecting the operation</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="The callback is valid until first called."><span class="acronym">scope async</span></acronym>][<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function. <span class="annotation">[<acronym title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><span class="acronym">closure</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-eject-mountable-finish"></a><h3>g_file_eject_mountable_finish ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_eject_mountable_finish       (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *result</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<div class="warning" style="margin-left: 0.5in; margin-right: 0.5in;">
<h3 class="title">Warning</h3>
<p><code class="literal">g_file_eject_mountable_finish</code> has been deprecated since version 2.22 and should not be used in newly-written code. Use <a class="link" href="GFile.html#g-file-eject-mountable-with-operation-finish" title="g_file_eject_mountable_with_operation_finish ()"><code class="function">g_file_eject_mountable_with_operation_finish()</code></a> instead.</p>
</div>
<p>
Finishes an asynchronous eject operation started by 
<a class="link" href="GFile.html#g-file-eject-mountable" title="g_file_eject_mountable ()"><code class="function">g_file_eject_mountable()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>result</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the <em class="parameter"><code>file</code></em> was ejected successfully. <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a>
otherwise.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-eject-mountable-with-operation"></a><h3>g_file_eject_mountable_with_operation ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_eject_mountable_with_operation
                                                        (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GMount.html#GMountUnmountFlags" title="enum GMountUnmountFlags"><span class="type">GMountUnmountFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GMountOperation.html" title="GMountOperation"><span class="type">GMountOperation</span></a> *mount_operation</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Starts an asynchronous eject on a mountable.
When this operation has completed, <em class="parameter"><code>callback</code></em> will be called with
<em class="parameter"><code>user_user</code></em> data, and the operation can be finalized with
<a class="link" href="GFile.html#g-file-eject-mountable-with-operation-finish" title="g_file_eject_mountable_with_operation_finish ()"><code class="function">g_file_eject_mountable_with_operation_finish()</code></a>.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>flags affecting the operation</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>mount_operation</code></em> :</span></p></td>
<td>a <a class="link" href="GMountOperation.html" title="GMountOperation"><span class="type">GMountOperation</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to avoid user interaction. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="The callback is valid until first called."><span class="acronym">scope async</span></acronym>][<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function. <span class="annotation">[<acronym title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><span class="acronym">closure</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-eject-mountable-with-operation-finish"></a><h3>g_file_eject_mountable_with_operation_finish ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_eject_mountable_with_operation_finish
                                                        (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *result</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes an asynchronous eject operation started by
<a class="link" href="GFile.html#g-file-eject-mountable-with-operation" title="g_file_eject_mountable_with_operation ()"><code class="function">g_file_eject_mountable_with_operation()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>result</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the <em class="parameter"><code>file</code></em> was ejected successfully. <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a>
otherwise.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-start-mountable"></a><h3>g_file_start_mountable ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_start_mountable              (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GDrive.html#GDriveStartFlags" title="enum GDriveStartFlags"><span class="type">GDriveStartFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GMountOperation.html" title="GMountOperation"><span class="type">GMountOperation</span></a> *start_operation</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Starts a file of type G_FILE_TYPE_MOUNTABLE.
Using <em class="parameter"><code>start_operation</code></em>, you can request callbacks when, for instance,
passwords are needed during authentication.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<p>
When the operation is finished, <em class="parameter"><code>callback</code></em> will be called. You can then call
<a class="link" href="GFile.html#g-file-mount-mountable-finish" title="g_file_mount_mountable_finish ()"><code class="function">g_file_mount_mountable_finish()</code></a> to get the result of the operation.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>flags affecting the operation</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>start_operation</code></em> :</span></p></td>
<td>a <a class="link" href="GMountOperation.html" title="GMountOperation"><span class="type">GMountOperation</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to avoid user interaction. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-start-mountable-finish"></a><h3>g_file_start_mountable_finish ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_start_mountable_finish       (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *result</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes a start operation. See <a class="link" href="GFile.html#g-file-start-mountable" title="g_file_start_mountable ()"><code class="function">g_file_start_mountable()</code></a> for details.
</p>
<p>
Finish an asynchronous start operation that was started
with <a class="link" href="GFile.html#g-file-start-mountable" title="g_file_start_mountable ()"><code class="function">g_file_start_mountable()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>result</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the operation finished successfully. <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a>
otherwise.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-stop-mountable"></a><h3>g_file_stop_mountable ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_stop_mountable               (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GMount.html#GMountUnmountFlags" title="enum GMountUnmountFlags"><span class="type">GMountUnmountFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GMountOperation.html" title="GMountOperation"><span class="type">GMountOperation</span></a> *mount_operation</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Stops a file of type G_FILE_TYPE_MOUNTABLE.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<p>
When the operation is finished, <em class="parameter"><code>callback</code></em> will be called. You can then call
<a class="link" href="GFile.html#g-file-stop-mountable-finish" title="g_file_stop_mountable_finish ()"><code class="function">g_file_stop_mountable_finish()</code></a> to get the result of the operation.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>flags affecting the operation</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>mount_operation</code></em> :</span></p></td>
<td>a <a class="link" href="GMountOperation.html" title="GMountOperation"><span class="type">GMountOperation</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to avoid user interaction. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-stop-mountable-finish"></a><h3>g_file_stop_mountable_finish ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_stop_mountable_finish        (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *result</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes an stop operation, see <a class="link" href="GFile.html#g-file-stop-mountable" title="g_file_stop_mountable ()"><code class="function">g_file_stop_mountable()</code></a> for details.
</p>
<p>
Finish an asynchronous stop operation that was started
with <a class="link" href="GFile.html#g-file-stop-mountable" title="g_file_stop_mountable ()"><code class="function">g_file_stop_mountable()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>result</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the operation finished successfully. <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a>
otherwise.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-poll-mountable"></a><h3>g_file_poll_mountable ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_poll_mountable               (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Polls a file of type G_FILE_TYPE_MOUNTABLE.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<p>
When the operation is finished, <em class="parameter"><code>callback</code></em> will be called. You can then call
<a class="link" href="GFile.html#g-file-mount-mountable-finish" title="g_file_mount_mountable_finish ()"><code class="function">g_file_mount_mountable_finish()</code></a> to get the result of the operation.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-poll-mountable-finish"></a><h3>g_file_poll_mountable_finish ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_poll_mountable_finish        (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *result</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes a poll operation. See <a class="link" href="GFile.html#g-file-poll-mountable" title="g_file_poll_mountable ()"><code class="function">g_file_poll_mountable()</code></a> for details.
</p>
<p>
Finish an asynchronous poll operation that was polled
with <a class="link" href="GFile.html#g-file-poll-mountable" title="g_file_poll_mountable ()"><code class="function">g_file_poll_mountable()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>result</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the operation finished successfully. <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a>
otherwise.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-mount-enclosing-volume"></a><h3>g_file_mount_enclosing_volume ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_mount_enclosing_volume       (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *location</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GMount.html#GMountMountFlags" title="enum GMountMountFlags"><span class="type">GMountMountFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GMountOperation.html" title="GMountOperation"><span class="type">GMountOperation</span></a> *mount_operation</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Starts a <em class="parameter"><code>mount_operation</code></em>, mounting the volume that contains the file <em class="parameter"><code>location</code></em>. 
</p>
<p>
When this operation has completed, <em class="parameter"><code>callback</code></em> will be called with
<em class="parameter"><code>user_user</code></em> data, and the operation can be finalized with 
<a class="link" href="GFile.html#g-file-mount-enclosing-volume-finish" title="g_file_mount_enclosing_volume_finish ()"><code class="function">g_file_mount_enclosing_volume_finish()</code></a>.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>location</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>flags affecting the operation</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>mount_operation</code></em> :</span></p></td>
<td>a <a class="link" href="GMountOperation.html" title="GMountOperation"><span class="type">GMountOperation</span></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to avoid user interaction. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-mount-enclosing-volume-finish"></a><h3>g_file_mount_enclosing_volume_finish ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_mount_enclosing_volume_finish
                                                        (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *location</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *result</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes a mount operation started by <a class="link" href="GFile.html#g-file-mount-enclosing-volume" title="g_file_mount_enclosing_volume ()"><code class="function">g_file_mount_enclosing_volume()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>location</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>result</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if successful. If an error
has occurred, this function will return <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> and set <em class="parameter"><code>error</code></em>
appropriately if present.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-monitor-directory"></a><h3>g_file_monitor_directory ()</h3>
<pre class="programlisting"><a class="link" href="GFileMonitor.html" title="GFileMonitor"><span class="returnvalue">GFileMonitor</span></a> *      g_file_monitor_directory            (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileMonitorFlags" title="enum GFileMonitorFlags"><span class="type">GFileMonitorFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Obtains a directory monitor for the given file.
This may fail if directory monitoring is not supported.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned. 
</p>
<p>
Virtual: monitor_dir
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a set of <a class="link" href="GFile.html#GFileMonitorFlags" title="enum GFileMonitorFlags"><span class="type">GFileMonitorFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GFileMonitor.html" title="GFileMonitor"><span class="type">GFileMonitor</span></a> for the given <em class="parameter"><code>file</code></em>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-monitor-file"></a><h3>g_file_monitor_file ()</h3>
<pre class="programlisting"><a class="link" href="GFileMonitor.html" title="GFileMonitor"><span class="returnvalue">GFileMonitor</span></a> *      g_file_monitor_file                 (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileMonitorFlags" title="enum GFileMonitorFlags"><span class="type">GFileMonitorFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Obtains a file monitor for the given file. If no file notification
mechanism exists, then regular polling of the file is used.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a set of <a class="link" href="GFile.html#GFileMonitorFlags" title="enum GFileMonitorFlags"><span class="type">GFileMonitorFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GFileMonitor.html" title="GFileMonitor"><span class="type">GFileMonitor</span></a> for the given <em class="parameter"><code>file</code></em>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-monitor"></a><h3>g_file_monitor ()</h3>
<pre class="programlisting"><a class="link" href="GFileMonitor.html" title="GFileMonitor"><span class="returnvalue">GFileMonitor</span></a> *      g_file_monitor                      (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileMonitorFlags" title="enum GFileMonitorFlags"><span class="type">GFileMonitorFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Obtains a file or directory monitor for the given file, depending
on the type of the file.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a set of <a class="link" href="GFile.html#GFileMonitorFlags" title="enum GFileMonitorFlags"><span class="type">GFileMonitorFlags</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GFileMonitor.html" title="GFileMonitor"><span class="type">GFileMonitor</span></a> for the given <em class="parameter"><code>file</code></em>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.18</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-load-contents"></a><h3>g_file_load_contents ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_load_contents                (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><span class="type">char</span> **contents</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gsize"><span class="type">gsize</span></a> *length</code></em>,
                                                         <em class="parameter"><code><span class="type">char</span> **etag_out</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Loads the content of the file into memory. The data is always 
zero-terminated, but this is not included in the resultant <em class="parameter"><code>length</code></em>.
The returned <em class="parameter"><code>content</code></em> should be freed with <a href="../glib/glib-Memory-Allocation.html#g-free"><code class="function">g_free()</code></a> when no longer
needed.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>contents</code></em> :</span></p></td>
<td>a location to place the contents of the file. <span class="annotation">[<acronym title="Parameter for returning results. Default is transfer full."><span class="acronym">out</span></acronym>][<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>][<acronym title="Generics and defining elements of containers and arrays."><span class="acronym">element-type</span></acronym> guint8][<acronym title="Parameter points to an array of items."><span class="acronym">array</span></acronym> length=length]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>length</code></em> :</span></p></td>
<td>a location to place the length of the contents of the file,
or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if the length is not needed. <span class="annotation">[<acronym title="Parameter for returning results. Default is transfer full."><span class="acronym">out</span></acronym>][<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>etag_out</code></em> :</span></p></td>
<td>a location to place the current entity tag for the file,
or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if the entity tag is not needed. <span class="annotation">[<acronym title="Parameter for returning results. Default is transfer full."><span class="acronym">out</span></acronym>][<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the <em class="parameter"><code>file</code></em>'s contents were successfully loaded.
<a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> if there were errors.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-load-contents-async"></a><h3>g_file_load_contents_async ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_load_contents_async          (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Starts an asynchronous load of the <em class="parameter"><code>file</code></em>'s contents.
</p>
<p>
For more details, see <a class="link" href="GFile.html#g-file-load-contents" title="g_file_load_contents ()"><code class="function">g_file_load_contents()</code></a> which is
the synchronous version of this call.
</p>
<p>
When the load operation has completed, <em class="parameter"><code>callback</code></em> will be called 
with <em class="parameter"><code>user</code></em> data. To finish the operation, call 
<a class="link" href="GFile.html#g-file-load-contents-finish" title="g_file_load_contents_finish ()"><code class="function">g_file_load_contents_finish()</code></a> with the <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> returned by 
the <em class="parameter"><code>callback</code></em>.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-load-contents-finish"></a><h3>g_file_load_contents_finish ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_load_contents_finish         (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *res</code></em>,
                                                         <em class="parameter"><code><span class="type">char</span> **contents</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gsize"><span class="type">gsize</span></a> *length</code></em>,
                                                         <em class="parameter"><code><span class="type">char</span> **etag_out</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes an asynchronous load of the <em class="parameter"><code>file</code></em>'s contents. 
The contents are placed in <em class="parameter"><code>contents</code></em>, and <em class="parameter"><code>length</code></em> is set to the 
size of the <em class="parameter"><code>contents</code></em> string. The <em class="parameter"><code>content</code></em> should be freed with
<a href="../glib/glib-Memory-Allocation.html#g-free"><code class="function">g_free()</code></a> when no longer needed. If <em class="parameter"><code>etag_out</code></em> is present, it will be 
set to the new entity tag for the <em class="parameter"><code>file</code></em>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>res</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>contents</code></em> :</span></p></td>
<td>a location to place the contents of the file. <span class="annotation">[<acronym title="Parameter for returning results. Default is transfer full."><span class="acronym">out</span></acronym>][<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>][<acronym title="Generics and defining elements of containers and arrays."><span class="acronym">element-type</span></acronym> guint8][<acronym title="Parameter points to an array of items."><span class="acronym">array</span></acronym> length=length]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>length</code></em> :</span></p></td>
<td>a location to place the length of the contents of the file,
or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if the length is not needed. <span class="annotation">[<acronym title="Parameter for returning results. Default is transfer full."><span class="acronym">out</span></acronym>][<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>etag_out</code></em> :</span></p></td>
<td>a location to place the current entity tag for the file,
or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if the entity tag is not needed. <span class="annotation">[<acronym title="Parameter for returning results. Default is transfer full."><span class="acronym">out</span></acronym>][<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the load was successful. If <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> and <em class="parameter"><code>error</code></em> is
present, it will be set appropriately.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-load-partial-contents-async"></a><h3>g_file_load_partial_contents_async ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_load_partial_contents_async  (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileReadMoreCallback" title="GFileReadMoreCallback ()"><span class="type">GFileReadMoreCallback</span></a> read_more_callback</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Reads the partial contents of a file. A <a class="link" href="GFile.html#GFileReadMoreCallback" title="GFileReadMoreCallback ()"><span class="type">GFileReadMoreCallback</span></a> should be 
used to stop reading from the file when appropriate, else this function
will behave exactly as <a class="link" href="GFile.html#g-file-load-contents-async" title="g_file_load_contents_async ()"><code class="function">g_file_load_contents_async()</code></a>. This operation 
can be finished by <a class="link" href="GFile.html#g-file-load-partial-contents-finish" title="g_file_load_partial_contents_finish ()"><code class="function">g_file_load_partial_contents_finish()</code></a>.
</p>
<p>
Users of this function should be aware that <em class="parameter"><code>user_data</code></em> is passed to 
both the <em class="parameter"><code>read_more_callback</code></em> and the <em class="parameter"><code>callback</code></em>.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>read_more_callback</code></em> :</span></p></td>
<td>a <a class="link" href="GFile.html#GFileReadMoreCallback" title="GFileReadMoreCallback ()"><span class="type">GFileReadMoreCallback</span></a> to receive partial data and to specify whether further data should be read.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to the callback functions.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-load-partial-contents-finish"></a><h3>g_file_load_partial_contents_finish ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_load_partial_contents_finish (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *res</code></em>,
                                                         <em class="parameter"><code><span class="type">char</span> **contents</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gsize"><span class="type">gsize</span></a> *length</code></em>,
                                                         <em class="parameter"><code><span class="type">char</span> **etag_out</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes an asynchronous partial load operation that was started
with <a class="link" href="GFile.html#g-file-load-partial-contents-async" title="g_file_load_partial_contents_async ()"><code class="function">g_file_load_partial_contents_async()</code></a>. The data is always 
zero-terminated, but this is not included in the resultant <em class="parameter"><code>length</code></em>.
The returned <em class="parameter"><code>content</code></em> should be freed with <a href="../glib/glib-Memory-Allocation.html#g-free"><code class="function">g_free()</code></a> when no longer
needed.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>res</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>contents</code></em> :</span></p></td>
<td>a location to place the contents of the file. <span class="annotation">[<acronym title="Parameter for returning results. Default is transfer full."><span class="acronym">out</span></acronym>][<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>][<acronym title="Generics and defining elements of containers and arrays."><span class="acronym">element-type</span></acronym> guint8][<acronym title="Parameter points to an array of items."><span class="acronym">array</span></acronym> length=length]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>length</code></em> :</span></p></td>
<td>a location to place the length of the contents of the file,
or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if the length is not needed. <span class="annotation">[<acronym title="Parameter for returning results. Default is transfer full."><span class="acronym">out</span></acronym>][<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>etag_out</code></em> :</span></p></td>
<td>a location to place the current entity tag for the file,
or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if the entity tag is not needed. <span class="annotation">[<acronym title="Parameter for returning results. Default is transfer full."><span class="acronym">out</span></acronym>][<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the load was successful. If <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> and <em class="parameter"><code>error</code></em> is
present, it will be set appropriately.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-replace-contents"></a><h3>g_file_replace_contents ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_replace_contents             (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *contents</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gsize"><span class="type">gsize</span></a> length</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *etag</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> make_backup</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><span class="type">char</span> **new_etag</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Replaces the contents of <em class="parameter"><code>file</code></em> with <em class="parameter"><code>contents</code></em> of <em class="parameter"><code>length</code></em> bytes.
 
If <em class="parameter"><code>etag</code></em> is specified (not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>) any existing file must have that etag, or
the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-WRONG-ETAG:CAPS"><code class="literal">G_IO_ERROR_WRONG_ETAG</code></a> will be returned.
</p>
<p>
If <em class="parameter"><code>make_backup</code></em> is <a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a>, this function will attempt to make a backup of <em class="parameter"><code>file</code></em>.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned. 
</p>
<p>
The returned <em class="parameter"><code>new_etag</code></em> can be used to verify that the file hasn't changed the
next time it is saved over.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>contents</code></em> :</span></p></td>
<td>a string containing the new contents for <em class="parameter"><code>file</code></em>. <span class="annotation">[<acronym title="Generics and defining elements of containers and arrays."><span class="acronym">element-type</span></acronym> guint8][<acronym title="Parameter points to an array of items."><span class="acronym">array</span></acronym> length=length]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>length</code></em> :</span></p></td>
<td>the length of <em class="parameter"><code>contents</code></em> in bytes.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>etag</code></em> :</span></p></td>
<td>the old <a class="link" href="GFile.html#gfile-etag">entity tag</a>
for the document, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>make_backup</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if a backup should be created.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a set of <a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>new_etag</code></em> :</span></p></td>
<td>a location to a new <a class="link" href="GFile.html#gfile-etag">entity tag</a>
for the document. This should be freed with <a href="../glib/glib-Memory-Allocation.html#g-free"><code class="function">g_free()</code></a> when no longer
needed, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>][<acronym title="Parameter for returning results. Default is transfer full."><span class="acronym">out</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if successful. If an error
has occurred, this function will return <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> and set <em class="parameter"><code>error</code></em>
appropriately if present.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-replace-contents-async"></a><h3>g_file_replace_contents_async ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_replace_contents_async       (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *contents</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gsize"><span class="type">gsize</span></a> length</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *etag</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> make_backup</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Starts an asynchronous replacement of <em class="parameter"><code>file</code></em> with the given 
<em class="parameter"><code>contents</code></em> of <em class="parameter"><code>length</code></em> bytes. <em class="parameter"><code>etag</code></em> will replace the document's 
current entity tag.
</p>
<p>
When this operation has completed, <em class="parameter"><code>callback</code></em> will be called with
<em class="parameter"><code>user_user</code></em> data, and the operation can be finalized with 
<a class="link" href="GFile.html#g-file-replace-contents-finish" title="g_file_replace_contents_finish ()"><code class="function">g_file_replace_contents_finish()</code></a>.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned. 
</p>
<p>
If <em class="parameter"><code>make_backup</code></em> is <a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a>, this function will attempt to 
make a backup of <em class="parameter"><code>file</code></em>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>contents</code></em> :</span></p></td>
<td>string of contents to replace the file with. <span class="annotation">[<acronym title="Generics and defining elements of containers and arrays."><span class="acronym">element-type</span></acronym> guint8][<acronym title="Parameter points to an array of items."><span class="acronym">array</span></acronym> length=length]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>length</code></em> :</span></p></td>
<td>the length of <em class="parameter"><code>contents</code></em> in bytes.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>etag</code></em> :</span></p></td>
<td>a new <a class="link" href="GFile.html#gfile-etag">entity tag</a> for the <em class="parameter"><code>file</code></em>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>make_backup</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if a backup should be created.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a set of <a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-replace-contents-finish"></a><h3>g_file_replace_contents_finish ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_replace_contents_finish      (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *res</code></em>,
                                                         <em class="parameter"><code><span class="type">char</span> **new_etag</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes an asynchronous replace of the given <em class="parameter"><code>file</code></em>. See
<a class="link" href="GFile.html#g-file-replace-contents-async" title="g_file_replace_contents_async ()"><code class="function">g_file_replace_contents_async()</code></a>. Sets <em class="parameter"><code>new_etag</code></em> to the new entity 
tag for the document, if present.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>res</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>new_etag</code></em> :</span></p></td>
<td>a location of a new <a class="link" href="GFile.html#gfile-etag">entity tag</a>
for the document. This should be freed with <a href="../glib/glib-Memory-Allocation.html#g-free"><code class="function">g_free()</code></a> when it is no
longer needed, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="Parameter for returning results. Default is transfer full."><span class="acronym">out</span></acronym>][<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> on failure.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-copy-attributes"></a><h3>g_file_copy_attributes ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_copy_attributes              (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *source</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *destination</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileCopyFlags" title="enum GFileCopyFlags"><span class="type">GFileCopyFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Copies the file attributes from <em class="parameter"><code>source</code></em> to <em class="parameter"><code>destination</code></em>. 
</p>
<p>
Normally only a subset of the file attributes are copied,
those that are copies in a normal file copy operation
(which for instance does not include e.g. owner). However
if <a class="link" href="GFile.html#G-FILE-COPY-ALL-METADATA:CAPS"><span class="type">G_FILE_COPY_ALL_METADATA</span></a> is specified in <em class="parameter"><code>flags</code></em>, then
all the metadata that is possible to copy is copied. This
is useful when implementing move by copy + delete source.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>source</code></em> :</span></p></td>
<td>a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> with attributes.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>destination</code></em> :</span></p></td>
<td>a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> to copy attributes to.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a set of <a class="link" href="GFile.html#GFileCopyFlags" title="enum GFileCopyFlags"><span class="type">GFileCopyFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the attributes were copied successfully, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-create-readwrite"></a><h3>g_file_create_readwrite ()</h3>
<pre class="programlisting"><a class="link" href="GFileIOStream.html" title="GFileIOStream"><span class="returnvalue">GFileIOStream</span></a> *     g_file_create_readwrite             (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Creates a new file and returns a stream for reading and writing to it.
The file must not already exist.
</p>
<p>
By default files created are generally readable by everyone,
but if you pass <a class="link" href="GFile.html#G-FILE-CREATE-PRIVATE:CAPS"><span class="type">G_FILE_CREATE_PRIVATE</span></a> in <em class="parameter"><code>flags</code></em> the file
will be made readable only to the current user, to the level that
is supported on the target filesystem.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<p>
If a file or directory with this name already exists the <a class="link" href="gio-GIOError.html#G-IO-ERROR-EXISTS:CAPS"><code class="literal">G_IO_ERROR_EXISTS</code></a>
error will be returned. Some file systems don't allow all file names,
and may return an <a class="link" href="gio-GIOError.html#G-IO-ERROR-INVALID-FILENAME:CAPS"><code class="literal">G_IO_ERROR_INVALID_FILENAME</code></a> error, and if the name
is too long, <a class="link" href="gio-GIOError.html#G-IO-ERROR-FILENAME-TOO-LONG:CAPS"><code class="literal">G_IO_ERROR_FILENAME_TOO_LONG</code></a> will be returned. Other errors
are possible too, and depend on what kind of filesystem the file is on.
</p>
<p>
Note that in many non-local file cases read and write streams are not
supported, so make sure you really need to do read and write streaming,
rather than just opening for reading or writing.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a set of <a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>return location for a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GFileIOStream.html" title="GFileIOStream"><span class="type">GFileIOStream</span></a> for the newly created file, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-create-readwrite-async"></a><h3>g_file_create_readwrite_async ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_create_readwrite_async       (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> io_priority</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Asynchronously creates a new file and returns a stream for reading and
writing to it. The file must not already exist.
</p>
<p>
For more details, see <a class="link" href="GFile.html#g-file-create-readwrite" title="g_file_create_readwrite ()"><code class="function">g_file_create_readwrite()</code></a> which is
the synchronous version of this call.
</p>
<p>
When the operation is finished, <em class="parameter"><code>callback</code></em> will be called. You can then
call <a class="link" href="GFile.html#g-file-create-readwrite-finish" title="g_file_create_readwrite_finish ()"><code class="function">g_file_create_readwrite_finish()</code></a> to get the result of the operation.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a set of <a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>io_priority</code></em> :</span></p></td>
<td>the <a class="link" href="gio-GIOScheduler.html#io-priority">I/O priority</a>
of the request</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied. <span class="annotation">[<acronym title="The callback is valid until first called."><span class="acronym">scope async</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function. <span class="annotation">[<acronym title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><span class="acronym">closure</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-create-readwrite-finish"></a><h3>g_file_create_readwrite_finish ()</h3>
<pre class="programlisting"><a class="link" href="GFileIOStream.html" title="GFileIOStream"><span class="returnvalue">GFileIOStream</span></a> *     g_file_create_readwrite_finish      (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *res</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes an asynchronous file create operation started with
<a class="link" href="GFile.html#g-file-create-readwrite-async" title="g_file_create_readwrite_async ()"><code class="function">g_file_create_readwrite_async()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>res</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GFileIOStream.html" title="GFileIOStream"><span class="type">GFileIOStream</span></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-open-readwrite"></a><h3>g_file_open_readwrite ()</h3>
<pre class="programlisting"><a class="link" href="GFileIOStream.html" title="GFileIOStream"><span class="returnvalue">GFileIOStream</span></a> *     g_file_open_readwrite               (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Opens an existing file for reading and writing. The result is
a <a class="link" href="GFileIOStream.html" title="GFileIOStream"><span class="type">GFileIOStream</span></a> that can be used to read and write the contents of the file.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> will be returned.
</p>
<p>
If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
If the file is a directory, the G_IO_ERROR_IS_DIRECTORY error will be returned.
Other errors are possible too, and depend on what kind of filesystem the file is on.
Note that in many non-local file cases read and write streams are not supported,
so make sure you really need to do read and write streaming, rather than
just opening for reading or writing.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>
<a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> to open</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>a <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a class="link" href="GFileIOStream.html" title="GFileIOStream"><span class="type">GFileIOStream</span></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-open-readwrite-async"></a><h3>g_file_open_readwrite_async ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_open_readwrite_async         (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> io_priority</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Asynchronously opens <em class="parameter"><code>file</code></em> for reading and writing.
</p>
<p>
For more details, see <a class="link" href="GFile.html#g-file-open-readwrite" title="g_file_open_readwrite ()"><code class="function">g_file_open_readwrite()</code></a> which is
the synchronous version of this call.
</p>
<p>
When the operation is finished, <em class="parameter"><code>callback</code></em> will be called. You can then call
<a class="link" href="GFile.html#g-file-open-readwrite-finish" title="g_file_open_readwrite_finish ()"><code class="function">g_file_open_readwrite_finish()</code></a> to get the result of the operation.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>io_priority</code></em> :</span></p></td>
<td>the <a class="link" href="gio-GIOScheduler.html#io-priority">I/O priority</a>
of the request.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied. <span class="annotation">[<acronym title="The callback is valid until first called."><span class="acronym">scope async</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function. <span class="annotation">[<acronym title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><span class="acronym">closure</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-open-readwrite-finish"></a><h3>g_file_open_readwrite_finish ()</h3>
<pre class="programlisting"><a class="link" href="GFileIOStream.html" title="GFileIOStream"><span class="returnvalue">GFileIOStream</span></a> *     g_file_open_readwrite_finish        (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *res</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes an asynchronous file read operation started with
<a class="link" href="GFile.html#g-file-open-readwrite-async" title="g_file_open_readwrite_async ()"><code class="function">g_file_open_readwrite_async()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>res</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GFileIOStream.html" title="GFileIOStream"><span class="type">GFileIOStream</span></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-replace-readwrite"></a><h3>g_file_replace_readwrite ()</h3>
<pre class="programlisting"><a class="link" href="GFileIOStream.html" title="GFileIOStream"><span class="returnvalue">GFileIOStream</span></a> *     g_file_replace_readwrite            (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *etag</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> make_backup</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Returns an output stream for overwriting the file in readwrite mode,
possibly creating a backup copy of the file first. If the file doesn't
exist, it will be created.
</p>
<p>
For details about the behaviour, see <a class="link" href="GFile.html#g-file-replace" title="g_file_replace ()"><code class="function">g_file_replace()</code></a> which does the same
thing but returns an output stream only.
</p>
<p>
Note that in many non-local file cases read and write streams are not
supported, so make sure you really need to do read and write streaming,
rather than just opening for reading or writing.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>etag</code></em> :</span></p></td>
<td>an optional <a class="link" href="GFile.html#gfile-etag">entity tag</a> for the
current <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><span class="type">NULL</span></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>make_backup</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if a backup should be created</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a set of <a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>return location for a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GFileIOStream.html" title="GFileIOStream"><span class="type">GFileIOStream</span></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-replace-readwrite-async"></a><h3>g_file_replace_readwrite_async ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_file_replace_readwrite_async      (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code>const <span class="type">char</span> *etag</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> make_backup</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a> flags</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> io_priority</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> callback</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
Asynchronously overwrites the file in read-write mode, replacing the
contents, possibly creating a backup copy of the file first.
</p>
<p>
For more details, see <a class="link" href="GFile.html#g-file-replace-readwrite" title="g_file_replace_readwrite ()"><code class="function">g_file_replace_readwrite()</code></a> which is
the synchronous version of this call.
</p>
<p>
When the operation is finished, <em class="parameter"><code>callback</code></em> will be called. You can then
call <a class="link" href="GFile.html#g-file-replace-readwrite-finish" title="g_file_replace_readwrite_finish ()"><code class="function">g_file_replace_readwrite_finish()</code></a> to get the result of the operation.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>etag</code></em> :</span></p></td>
<td>an <a class="link" href="GFile.html#gfile-etag">entity tag</a> for the
current <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>, or NULL to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>make_backup</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if a backup should be created.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a set of <a class="link" href="GFile.html#GFileCreateFlags" title="enum GFileCreateFlags"><span class="type">GFileCreateFlags</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>io_priority</code></em> :</span></p></td>
<td>the <a class="link" href="gio-GIOScheduler.html#io-priority">I/O priority</a>
of the request.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>optional <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> object, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>callback</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html#GAsyncReadyCallback" title="GAsyncReadyCallback ()"><span class="type">GAsyncReadyCallback</span></a> to call when the request is satisfied. <span class="annotation">[<acronym title="The callback is valid until first called."><span class="acronym">scope async</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>the data to pass to callback function. <span class="annotation">[<acronym title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><span class="acronym">closure</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-replace-readwrite-finish"></a><h3>g_file_replace_readwrite_finish ()</h3>
<pre class="programlisting"><a class="link" href="GFileIOStream.html" title="GFileIOStream"><span class="returnvalue">GFileIOStream</span></a> *     g_file_replace_readwrite_finish     (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a> *res</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Finishes an asynchronous file replace operation started with
<a class="link" href="GFile.html#g-file-replace-readwrite-async" title="g_file_replace_readwrite_async ()"><code class="function">g_file_replace_readwrite_async()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>input <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>res</code></em> :</span></p></td>
<td>a <a class="link" href="GAsyncResult.html" title="GAsyncResult"><span class="type">GAsyncResult</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GFileIOStream.html" title="GFileIOStream"><span class="type">GFileIOStream</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-supports-thread-contexts"></a><h3>g_file_supports_thread_contexts ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_file_supports_thread_contexts     (<em class="parameter"><code><a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a> *file</code></em>);</pre>
<p>
Checks if <em class="parameter"><code>file</code></em> supports <GTKDOCLINK HREF="g-main-context-push-thread-default-context">thread-default
contexts</GTKDOCLINK>. If this returns <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a>, you cannot perform
asynchronous operations on <em class="parameter"><code>file</code></em> in a thread that has a
thread-default context.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>a <a class="link" href="GFile.html" title="GFile"><span class="type">GFile</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>Whether or not <em class="parameter"><code>file</code></em> supports thread-default contexts.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
</div>
<div class="refsect1">
<a name="GFile.see-also"></a><h2>See Also</h2>
<a class="link" href="GFileInfo.html" title="GFileInfo"><span class="type">GFileInfo</span></a>, <a class="link" href="GFileEnumerator.html" title="GFileEnumerator"><span class="type">GFileEnumerator</span></a>
</div>
</div>
<div class="footer">
<hr>
          Generated by GTK-Doc V1.18</div>
</body>
</html>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>File Utilities</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.76.1">
<link rel="home" href="index.html" title="GLib Reference Manual">
<link rel="up" href="glib-utilities.html" title="GLib Utilities">
<link rel="prev" href="glib-Spawning-Processes.html" title="Spawning Processes">
<link rel="next" href="glib-URI-Functions.html" title="URI Functions">
<meta name="generator" content="GTK-Doc V1.18 (XML mode)">
<link rel="stylesheet" href="style.css" type="text/css">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF">
<table class="navigation" id="top" width="100%" summary="Navigation header" cellpadding="2" cellspacing="2">
<tr valign="middle">
<td><a accesskey="p" href="glib-Spawning-Processes.html"><img src="left.png" width="24" height="24" border="0" alt="Prev"></a></td>
<td><a accesskey="u" href="glib-utilities.html"><img src="up.png" width="24" height="24" border="0" alt="Up"></a></td>
<td><a accesskey="h" href="index.html"><img src="home.png" width="24" height="24" border="0" alt="Home"></a></td>
<th width="100%" align="center">GLib Reference Manual</th>
<td><a accesskey="n" href="glib-URI-Functions.html"><img src="right.png" width="24" height="24" border="0" alt="Next"></a></td>
</tr>
<tr><td colspan="5" class="shortcuts">
<a href="#glib-File-Utilities.synopsis" class="shortcut">Top</a>
                   | 
                  <a href="#glib-File-Utilities.description" class="shortcut">Description</a>
</td></tr>
</table>
<div class="refentry">
<a name="glib-File-Utilities"></a><div class="titlepage"></div>
<div class="refnamediv"><table width="100%"><tr>
<td valign="top">
<h2><span class="refentrytitle"><a name="glib-File-Utilities.top_of_page"></a>File Utilities</span></h2>
<p>File Utilities — various file-related functions</p>
</td>
<td valign="top" align="right"></td>
</tr></table></div>
<div class="refsynopsisdiv">
<a name="glib-File-Utilities.synopsis"></a><h2>Synopsis</h2>
<pre class="synopsis">
#include &lt;glib.h&gt;
#include &lt;glib/gstdio.h&gt;

enum                <a class="link" href="glib-File-Utilities.html#GFileError" title="enum GFileError">GFileError</a>;
#define             <a class="link" href="glib-File-Utilities.html#G-FILE-ERROR:CAPS" title="G_FILE_ERROR">G_FILE_ERROR</a>
enum                <a class="link" href="glib-File-Utilities.html#GFileTest" title="enum GFileTest">GFileTest</a>;
<a class="link" href="glib-File-Utilities.html#GFileError" title="enum GFileError"><span class="returnvalue">GFileError</span></a>          <a class="link" href="glib-File-Utilities.html#g-file-error-from-errno" title="g_file_error_from_errno ()">g_file_error_from_errno</a>             (<em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gint" title="gint"><span class="type">gint</span></a> err_no</code></em>);
<a class="link" href="glib-Basic-Types.html#gboolean" title="gboolean"><span class="returnvalue">gboolean</span></a>            <a class="link" href="glib-File-Utilities.html#g-file-get-contents" title="g_file_get_contents ()">g_file_get_contents</a>                 (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> **contents</code></em>,
                                                         <em class="parameter"><code><span class="type">gsize</span> *length</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a> **error</code></em>);
<a class="link" href="glib-Basic-Types.html#gboolean" title="gboolean"><span class="returnvalue">gboolean</span></a>            <a class="link" href="glib-File-Utilities.html#g-file-set-contents" title="g_file_set_contents ()">g_file_set_contents</a>                 (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *contents</code></em>,
                                                         <em class="parameter"><code><span class="type">gssize</span> length</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a> **error</code></em>);
<a class="link" href="glib-Basic-Types.html#gboolean" title="gboolean"><span class="returnvalue">gboolean</span></a>            <a class="link" href="glib-File-Utilities.html#g-file-test" title="g_file_test ()">g_file_test</a>                         (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-File-Utilities.html#GFileTest" title="enum GFileTest"><span class="type">GFileTest</span></a> test</code></em>);
<a class="link" href="glib-Basic-Types.html#gint" title="gint"><span class="returnvalue">gint</span></a>                <a class="link" href="glib-File-Utilities.html#g-mkstemp" title="g_mkstemp ()">g_mkstemp</a>                           (<em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *tmpl</code></em>);
<a class="link" href="glib-Basic-Types.html#gint" title="gint"><span class="returnvalue">gint</span></a>                <a class="link" href="glib-File-Utilities.html#g-mkstemp-full" title="g_mkstemp_full ()">g_mkstemp_full</a>                      (<em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *tmpl</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gint" title="gint"><span class="type">gint</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gint" title="gint"><span class="type">gint</span></a> mode</code></em>);
<a class="link" href="glib-Basic-Types.html#gint" title="gint"><span class="returnvalue">gint</span></a>                <a class="link" href="glib-File-Utilities.html#g-file-open-tmp" title="g_file_open_tmp ()">g_file_open_tmp</a>                     (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *tmpl</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> **name_used</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a> **error</code></em>);
<a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="returnvalue">gchar</span></a> *             <a class="link" href="glib-File-Utilities.html#g-file-read-link" title="g_file_read_link ()">g_file_read_link</a>                    (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a> **error</code></em>);
<a class="link" href="glib-Basic-Types.html#gint" title="gint"><span class="returnvalue">gint</span></a>                <a class="link" href="glib-File-Utilities.html#g-mkdir-with-parents" title="g_mkdir_with_parents ()">g_mkdir_with_parents</a>                (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *pathname</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gint" title="gint"><span class="type">gint</span></a> mode</code></em>);
<a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="returnvalue">gchar</span></a> *             <a class="link" href="glib-File-Utilities.html#g-mkdtemp" title="g_mkdtemp ()">g_mkdtemp</a>                           (<em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *tmpl</code></em>);
<a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="returnvalue">gchar</span></a> *             <a class="link" href="glib-File-Utilities.html#g-mkdtemp-full" title="g_mkdtemp_full ()">g_mkdtemp_full</a>                      (<em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *tmpl</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gint" title="gint"><span class="type">gint</span></a> mode</code></em>);
<a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="returnvalue">gchar</span></a> *             <a class="link" href="glib-File-Utilities.html#g-dir-make-tmp" title="g_dir_make_tmp ()">g_dir_make_tmp</a>                      (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *tmpl</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a> **error</code></em>);

                    <a class="link" href="glib-File-Utilities.html#GDir" title="GDir">GDir</a>;
<a class="link" href="glib-File-Utilities.html#GDir" title="GDir"><span class="returnvalue">GDir</span></a> *              <a class="link" href="glib-File-Utilities.html#g-dir-open" title="g_dir_open ()">g_dir_open</a>                          (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *path</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Basic-Types.html#guint" title="guint"><span class="type">guint</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a> **error</code></em>);
const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="returnvalue">gchar</span></a> *       <a class="link" href="glib-File-Utilities.html#g-dir-read-name" title="g_dir_read_name ()">g_dir_read_name</a>                     (<em class="parameter"><code><a class="link" href="glib-File-Utilities.html#GDir" title="GDir"><span class="type">GDir</span></a> *dir</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="glib-File-Utilities.html#g-dir-rewind" title="g_dir_rewind ()">g_dir_rewind</a>                        (<em class="parameter"><code><a class="link" href="glib-File-Utilities.html#GDir" title="GDir"><span class="type">GDir</span></a> *dir</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="glib-File-Utilities.html#g-dir-close" title="g_dir_close ()">g_dir_close</a>                         (<em class="parameter"><code><a class="link" href="glib-File-Utilities.html#GDir" title="GDir"><span class="type">GDir</span></a> *dir</code></em>);

                    <a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile">GMappedFile</a>;
<a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="returnvalue">GMappedFile</span></a> *       <a class="link" href="glib-File-Utilities.html#g-mapped-file-new" title="g_mapped_file_new ()">g_mapped_file_new</a>                   (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gboolean" title="gboolean"><span class="type">gboolean</span></a> writable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a> **error</code></em>);
<a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="returnvalue">GMappedFile</span></a> *       <a class="link" href="glib-File-Utilities.html#g-mapped-file-new-from-fd" title="g_mapped_file_new_from_fd ()">g_mapped_file_new_from_fd</a>           (<em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gint" title="gint"><span class="type">gint</span></a> fd</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gboolean" title="gboolean"><span class="type">gboolean</span></a> writable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a> **error</code></em>);
<a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="returnvalue">GMappedFile</span></a> *       <a class="link" href="glib-File-Utilities.html#g-mapped-file-ref" title="g_mapped_file_ref ()">g_mapped_file_ref</a>                   (<em class="parameter"><code><a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a> *file</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="glib-File-Utilities.html#g-mapped-file-unref" title="g_mapped_file_unref ()">g_mapped_file_unref</a>                 (<em class="parameter"><code><a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a> *file</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="glib-File-Utilities.html#g-mapped-file-free" title="g_mapped_file_free ()">g_mapped_file_free</a>                  (<em class="parameter"><code><a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a> *file</code></em>);
<span class="returnvalue">gsize</span>               <a class="link" href="glib-File-Utilities.html#g-mapped-file-get-length" title="g_mapped_file_get_length ()">g_mapped_file_get_length</a>            (<em class="parameter"><code><a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a> *file</code></em>);
<a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="returnvalue">gchar</span></a> *             <a class="link" href="glib-File-Utilities.html#g-mapped-file-get-contents" title="g_mapped_file_get_contents ()">g_mapped_file_get_contents</a>          (<em class="parameter"><code><a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a> *file</code></em>);

<span class="returnvalue">int</span>                 <a class="link" href="glib-File-Utilities.html#g-open" title="g_open ()">g_open</a>                              (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> flags</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> mode</code></em>);
<span class="returnvalue">int</span>                 <a class="link" href="glib-File-Utilities.html#g-rename" title="g_rename ()">g_rename</a>                            (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *oldfilename</code></em>,
                                                         <em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *newfilename</code></em>);
<span class="returnvalue">int</span>                 <a class="link" href="glib-File-Utilities.html#g-mkdir" title="g_mkdir ()">g_mkdir</a>                             (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> mode</code></em>);
typedef             <a class="link" href="glib-File-Utilities.html#GStatBuf" title="GStatBuf">GStatBuf</a>;
<span class="returnvalue">int</span>                 <a class="link" href="glib-File-Utilities.html#g-stat" title="g_stat ()">g_stat</a>                              (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-File-Utilities.html#GStatBuf" title="GStatBuf"><span class="type">GStatBuf</span></a> *buf</code></em>);
<span class="returnvalue">int</span>                 <a class="link" href="glib-File-Utilities.html#g-lstat" title="g_lstat ()">g_lstat</a>                             (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-File-Utilities.html#GStatBuf" title="GStatBuf"><span class="type">GStatBuf</span></a> *buf</code></em>);
<span class="returnvalue">int</span>                 <a class="link" href="glib-File-Utilities.html#g-unlink" title="g_unlink ()">g_unlink</a>                            (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>);
<span class="returnvalue">int</span>                 <a class="link" href="glib-File-Utilities.html#g-remove" title="g_remove ()">g_remove</a>                            (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>);
<span class="returnvalue">int</span>                 <a class="link" href="glib-File-Utilities.html#g-rmdir" title="g_rmdir ()">g_rmdir</a>                             (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>);
<span class="returnvalue">FILE</span> *              <a class="link" href="glib-File-Utilities.html#g-fopen" title="g_fopen ()">g_fopen</a>                             (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *mode</code></em>);
<span class="returnvalue">FILE</span> *              <a class="link" href="glib-File-Utilities.html#g-freopen" title="g_freopen ()">g_freopen</a>                           (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *mode</code></em>,
                                                         <em class="parameter"><code><span class="type">FILE</span> *stream</code></em>);
<span class="returnvalue">int</span>                 <a class="link" href="glib-File-Utilities.html#g-chmod" title="g_chmod ()">g_chmod</a>                             (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> mode</code></em>);
<span class="returnvalue">int</span>                 <a class="link" href="glib-File-Utilities.html#g-access" title="g_access ()">g_access</a>                            (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> mode</code></em>);
<span class="returnvalue">int</span>                 <a class="link" href="glib-File-Utilities.html#g-creat" title="g_creat ()">g_creat</a>                             (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> mode</code></em>);
<span class="returnvalue">int</span>                 <a class="link" href="glib-File-Utilities.html#g-chdir" title="g_chdir ()">g_chdir</a>                             (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *path</code></em>);
<span class="returnvalue">int</span>                 <a class="link" href="glib-File-Utilities.html#g-utime" title="g_utime ()">g_utime</a>                             (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><span class="type">struct utimbuf</span> *utb</code></em>);
</pre>
</div>
<div class="refsect1">
<a name="glib-File-Utilities.description"></a><h2>Description</h2>
<p>
There is a group of functions which wrap the common POSIX functions
dealing with filenames (<a class="link" href="glib-File-Utilities.html#g-open" title="g_open ()"><code class="function">g_open()</code></a>, <a class="link" href="glib-File-Utilities.html#g-rename" title="g_rename ()"><code class="function">g_rename()</code></a>, <a class="link" href="glib-File-Utilities.html#g-mkdir" title="g_mkdir ()"><code class="function">g_mkdir()</code></a>, <a class="link" href="glib-File-Utilities.html#g-stat" title="g_stat ()"><code class="function">g_stat()</code></a>,
<a class="link" href="glib-File-Utilities.html#g-unlink" title="g_unlink ()"><code class="function">g_unlink()</code></a>, <a class="link" href="glib-File-Utilities.html#g-remove" title="g_remove ()"><code class="function">g_remove()</code></a>, <a class="link" href="glib-File-Utilities.html#g-fopen" title="g_fopen ()"><code class="function">g_fopen()</code></a>, <a class="link" href="glib-File-Utilities.html#g-freopen" title="g_freopen ()"><code class="function">g_freopen()</code></a>). The point of these
wrappers is to make it possible to handle file names with any Unicode
characters in them on Windows without having to use ifdefs and the
wide character API in the application code.
</p>
<p>
The pathname argument should be in the GLib file name encoding.
On POSIX this is the actual on-disk encoding which might correspond
to the locale settings of the process (or the
<code class="envar">G_FILENAME_ENCODING</code> environment variable), or not.
</p>
<p>
On Windows the GLib file name encoding is UTF-8. Note that the
Microsoft C library does not use UTF-8, but has separate APIs for
current system code page and wide characters (UTF-16). The GLib
wrappers call the wide character API if present (on modern Windows
systems), otherwise convert to/from the system code page.
</p>
<p>
Another group of functions allows to open and read directories
in the GLib file name encoding. These are <a class="link" href="glib-File-Utilities.html#g-dir-open" title="g_dir_open ()"><code class="function">g_dir_open()</code></a>,
<a class="link" href="glib-File-Utilities.html#g-dir-read-name" title="g_dir_read_name ()"><code class="function">g_dir_read_name()</code></a>, <a class="link" href="glib-File-Utilities.html#g-dir-rewind" title="g_dir_rewind ()"><code class="function">g_dir_rewind()</code></a>, <a class="link" href="glib-File-Utilities.html#g-dir-close" title="g_dir_close ()"><code class="function">g_dir_close()</code></a>.
</p>
</div>
<div class="refsect1">
<a name="glib-File-Utilities.details"></a><h2>Details</h2>
<div class="refsect2">
<a name="GFileError"></a><h3>enum GFileError</h3>
<pre class="programlisting">typedef enum {
  G_FILE_ERROR_EXIST,
  G_FILE_ERROR_ISDIR,
  G_FILE_ERROR_ACCES,
  G_FILE_ERROR_NAMETOOLONG,
  G_FILE_ERROR_NOENT,
  G_FILE_ERROR_NOTDIR,
  G_FILE_ERROR_NXIO,
  G_FILE_ERROR_NODEV,
  G_FILE_ERROR_ROFS,
  G_FILE_ERROR_TXTBSY,
  G_FILE_ERROR_FAULT,
  G_FILE_ERROR_LOOP,
  G_FILE_ERROR_NOSPC,
  G_FILE_ERROR_NOMEM,
  G_FILE_ERROR_MFILE,
  G_FILE_ERROR_NFILE,
  G_FILE_ERROR_BADF,
  G_FILE_ERROR_INVAL,
  G_FILE_ERROR_PIPE,
  G_FILE_ERROR_AGAIN,
  G_FILE_ERROR_INTR,
  G_FILE_ERROR_IO,
  G_FILE_ERROR_PERM,
  G_FILE_ERROR_NOSYS,
  G_FILE_ERROR_FAILED
} GFileError;
</pre>
<p>
Values corresponding to <em class="parameter"><code>errno</code></em> codes returned from file operations
on UNIX. Unlike <em class="parameter"><code>errno</code></em> codes, GFileError values are available on
all systems, even Windows. The exact meaning of each code depends
on what sort of file operation you were performing; the UNIX
documentation gives more details. The following error code descriptions
come from the GNU C Library manual, and are under the copyright
of that manual.
</p>
<p>
It's not very portable to make detailed assumptions about exactly
which errors will be returned from a given operation. Some errors
don't occur on some systems, etc., sometimes there are subtle
differences in when a system will report a given error, etc.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><a name="G-FILE-ERROR-EXIST:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_EXIST</code></span></p></td>
<td>Operation not permitted; only the owner of
    the file (or other resource) or processes with special privileges
    can perform the operation.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-ISDIR:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_ISDIR</code></span></p></td>
<td>File is a directory; you cannot open a directory
    for writing, or create or remove hard links to it.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-ACCES:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_ACCES</code></span></p></td>
<td>Permission denied; the file permissions do not
    allow the attempted operation.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-NAMETOOLONG:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_NAMETOOLONG</code></span></p></td>
<td>Filename too long.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-NOENT:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_NOENT</code></span></p></td>
<td>No such file or directory. This is a "file
    doesn't exist" error for ordinary files that are referenced in
    contexts where they are expected to already exist.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-NOTDIR:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_NOTDIR</code></span></p></td>
<td>A file that isn't a directory was specified when
    a directory is required.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-NXIO:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_NXIO</code></span></p></td>
<td>No such device or address. The system tried to
    use the device represented by a file you specified, and it
    couldn't find the device. This can mean that the device file was
    installed incorrectly, or that the physical device is missing or
    not correctly attached to the computer.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-NODEV:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_NODEV</code></span></p></td>
<td>The underlying file system of the specified file
    does not support memory mapping.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-ROFS:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_ROFS</code></span></p></td>
<td>The directory containing the new link can't be
    modified because it's on a read-only file system.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-TXTBSY:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_TXTBSY</code></span></p></td>
<td>Text file busy.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-FAULT:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_FAULT</code></span></p></td>
<td>You passed in a pointer to bad memory.
    (GLib won't reliably return this, don't pass in pointers to bad
    memory.)
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-LOOP:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_LOOP</code></span></p></td>
<td>Too many levels of symbolic links were encountered
    in looking up a file name. This often indicates a cycle of symbolic
    links.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-NOSPC:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_NOSPC</code></span></p></td>
<td>No space left on device; write operation on a
    file failed because the disk is full.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-NOMEM:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_NOMEM</code></span></p></td>
<td>No memory available. The system cannot allocate
    more virtual memory because its capacity is full.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-MFILE:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_MFILE</code></span></p></td>
<td>The current process has too many files open and
    can't open any more. Duplicate descriptors do count toward this
    limit.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-NFILE:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_NFILE</code></span></p></td>
<td>There are too many distinct file openings in the
    entire system.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-BADF:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_BADF</code></span></p></td>
<td>Bad file descriptor; for example, I/O on a
    descriptor that has been closed or reading from a descriptor open
    only for writing (or vice versa).
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-INVAL:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_INVAL</code></span></p></td>
<td>Invalid argument. This is used to indicate
    various kinds of problems with passing the wrong argument to a
    library function.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-PIPE:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_PIPE</code></span></p></td>
<td>Broken pipe; there is no process reading from the
    other end of a pipe. Every library function that returns this
    error code also generates a `SIGPIPE' signal; this signal
    terminates the program if not handled or blocked. Thus, your
    program will never actually see this code unless it has handled
    or blocked `SIGPIPE'.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-AGAIN:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_AGAIN</code></span></p></td>
<td>Resource temporarily unavailable; the call might
    work if you try again later.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-INTR:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_INTR</code></span></p></td>
<td>Interrupted function call; an asynchronous signal
    occurred and prevented completion of the call. When this
    happens, you should try the call again.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-IO:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_IO</code></span></p></td>
<td>Input/output error; usually used for physical read
   or write errors. i.e. the disk or other physical device hardware
   is returning errors.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-PERM:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_PERM</code></span></p></td>
<td>Operation not permitted; only the owner of the
   file (or other resource) or processes with special privileges can
   perform the operation.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-NOSYS:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_NOSYS</code></span></p></td>
<td>Function not implemented; this indicates that
   the system is missing some functionality.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-ERROR-FAILED:CAPS"></a><span class="term"><code class="literal">G_FILE_ERROR_FAILED</code></span></p></td>
<td>Does not correspond to a UNIX error code; this
   is the standard "failed for unspecified reason" error code present
   in all <a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a> error code enumerations. Returned if no specific
   code applies.
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-FILE-ERROR:CAPS"></a><h3>G_FILE_ERROR</h3>
<pre class="programlisting">#define G_FILE_ERROR g_file_error_quark ()
</pre>
<p>
Error domain for file operations. Errors in this domain will
be from the <a class="link" href="glib-File-Utilities.html#GFileError" title="enum GFileError"><span class="type">GFileError</span></a> enumeration. See <a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a> for information
on error domains.
</p>
</div>
<hr>
<div class="refsect2">
<a name="GFileTest"></a><h3>enum GFileTest</h3>
<pre class="programlisting">typedef enum {
  G_FILE_TEST_IS_REGULAR    = 1 &lt;&lt; 0,
  G_FILE_TEST_IS_SYMLINK    = 1 &lt;&lt; 1,
  G_FILE_TEST_IS_DIR        = 1 &lt;&lt; 2,
  G_FILE_TEST_IS_EXECUTABLE = 1 &lt;&lt; 3,
  G_FILE_TEST_EXISTS        = 1 &lt;&lt; 4
} GFileTest;
</pre>
<p>
A test to perform on a file using <a class="link" href="glib-File-Utilities.html#g-file-test" title="g_file_test ()"><code class="function">g_file_test()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><a name="G-FILE-TEST-IS-REGULAR:CAPS"></a><span class="term"><code class="literal">G_FILE_TEST_IS_REGULAR</code></span></p></td>
<td>
<a class="link" href="glib-Standard-Macros.html#TRUE:CAPS" title="TRUE"><code class="literal">TRUE</code></a> if the file is a regular file
    (not a directory). Note that this test will also return <a class="link" href="glib-Standard-Macros.html#TRUE:CAPS" title="TRUE"><code class="literal">TRUE</code></a>
    if the tested file is a symlink to a regular file.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-TEST-IS-SYMLINK:CAPS"></a><span class="term"><code class="literal">G_FILE_TEST_IS_SYMLINK</code></span></p></td>
<td>
<a class="link" href="glib-Standard-Macros.html#TRUE:CAPS" title="TRUE"><code class="literal">TRUE</code></a> if the file is a symlink.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-TEST-IS-DIR:CAPS"></a><span class="term"><code class="literal">G_FILE_TEST_IS_DIR</code></span></p></td>
<td>
<a class="link" href="glib-Standard-Macros.html#TRUE:CAPS" title="TRUE"><code class="literal">TRUE</code></a> if the file is a directory.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-TEST-IS-EXECUTABLE:CAPS"></a><span class="term"><code class="literal">G_FILE_TEST_IS_EXECUTABLE</code></span></p></td>
<td>
<a class="link" href="glib-Standard-Macros.html#TRUE:CAPS" title="TRUE"><code class="literal">TRUE</code></a> if the file is executable.
</td>
</tr>
<tr>
<td><p><a name="G-FILE-TEST-EXISTS:CAPS"></a><span class="term"><code class="literal">G_FILE_TEST_EXISTS</code></span></p></td>
<td>
<a class="link" href="glib-Standard-Macros.html#TRUE:CAPS" title="TRUE"><code class="literal">TRUE</code></a> if the file exists. It may or may not
    be a regular file.
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-error-from-errno"></a><h3>g_file_error_from_errno ()</h3>
<pre class="programlisting"><a class="link" href="glib-File-Utilities.html#GFileError" title="enum GFileError"><span class="returnvalue">GFileError</span></a>          g_file_error_from_errno             (<em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gint" title="gint"><span class="type">gint</span></a> err_no</code></em>);</pre>
<p>
Gets a <a class="link" href="glib-File-Utilities.html#GFileError" title="enum GFileError"><span class="type">GFileError</span></a> constant based on the passed-in <em class="parameter"><code>err_no</code></em>.
For example, if you pass in <code class="literal">EEXIST</code> this function returns
<a class="link" href="glib-File-Utilities.html#G-FILE-ERROR-EXIST:CAPS"><span class="type">G_FILE_ERROR_EXIST</span></a>. Unlike <code class="literal">errno</code> values, you can portably
assume that all <a class="link" href="glib-File-Utilities.html#GFileError" title="enum GFileError"><span class="type">GFileError</span></a> values will exist.
</p>
<p>
Normally a <a class="link" href="glib-File-Utilities.html#GFileError" title="enum GFileError"><span class="type">GFileError</span></a> value goes into a <a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a> returned
from a function that manipulates files. So you would use
<a class="link" href="glib-File-Utilities.html#g-file-error-from-errno" title="g_file_error_from_errno ()"><code class="function">g_file_error_from_errno()</code></a> when constructing a <a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>err_no</code></em> :</span></p></td>
<td>an "errno" value</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a class="link" href="glib-File-Utilities.html#GFileError" title="enum GFileError"><span class="type">GFileError</span></a> corresponding to the given <em class="parameter"><code>errno</code></em>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-get-contents"></a><h3>g_file_get_contents ()</h3>
<pre class="programlisting"><a class="link" href="glib-Basic-Types.html#gboolean" title="gboolean"><span class="returnvalue">gboolean</span></a>            g_file_get_contents                 (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> **contents</code></em>,
                                                         <em class="parameter"><code><span class="type">gsize</span> *length</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Reads an entire file into allocated memory, with good error
checking.
</p>
<p>
If the call was successful, it returns <a class="link" href="glib-Standard-Macros.html#TRUE:CAPS" title="TRUE"><code class="literal">TRUE</code></a> and sets <em class="parameter"><code>contents</code></em> to the file
contents and <em class="parameter"><code>length</code></em> to the length of the file contents in bytes. The string
stored in <em class="parameter"><code>contents</code></em> will be nul-terminated, so for text files you can pass
<a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a> for the <em class="parameter"><code>length</code></em> argument. If the call was not successful, it returns
<a class="link" href="glib-Standard-Macros.html#FALSE:CAPS" title="FALSE"><code class="literal">FALSE</code></a> and sets <em class="parameter"><code>error</code></em>. The error domain is <a class="link" href="glib-File-Utilities.html#G-FILE-ERROR:CAPS" title="G_FILE_ERROR"><span class="type">G_FILE_ERROR</span></a>. Possible error
codes are those in the <a class="link" href="glib-File-Utilities.html#GFileError" title="enum GFileError"><span class="type">GFileError</span></a> enumeration. In the error case,
<em class="parameter"><code>contents</code></em> is set to <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a> and <em class="parameter"><code>length</code></em> is set to zero.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>filename</code></em> :</span></p></td>
<td>name of a file to read contents from, in the GLib file name encoding. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> filename]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>contents</code></em> :</span></p></td>
<td>location to store an allocated string, use <a class="link" href="glib-Memory-Allocation.html#g-free" title="g_free ()"><code class="function">g_free()</code></a> to free
the returned string. <span class="annotation">[<acronym title="Parameter for returning results. Default is transfer full."><span class="acronym">out</span></acronym>][<acronym title="Parameter points to an array of items."><span class="acronym">array</span></acronym> length=length][<acronym title="Generics and defining elements of containers and arrays."><span class="acronym">element-type</span></acronym> guint8]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>length</code></em> :</span></p></td>
<td>location to store length in bytes of the contents, or <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>return location for a <a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a>, or <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a class="link" href="glib-Standard-Macros.html#TRUE:CAPS" title="TRUE"><code class="literal">TRUE</code></a> on success, <a class="link" href="glib-Standard-Macros.html#FALSE:CAPS" title="FALSE"><code class="literal">FALSE</code></a> if an error occurred</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-set-contents"></a><h3>g_file_set_contents ()</h3>
<pre class="programlisting"><a class="link" href="glib-Basic-Types.html#gboolean" title="gboolean"><span class="returnvalue">gboolean</span></a>            g_file_set_contents                 (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *contents</code></em>,
                                                         <em class="parameter"><code><span class="type">gssize</span> length</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Writes all of <em class="parameter"><code>contents</code></em> to a file named <em class="parameter"><code>filename</code></em>, with good error checking.
If a file called <em class="parameter"><code>filename</code></em> already exists it will be overwritten.
</p>
<p>
This write is atomic in the sense that it is first written to a temporary
file which is then renamed to the final name. Notes:
</p>
<div class="itemizedlist"><ul class="itemizedlist" type="disc">
<li class="listitem">
   On Unix, if <em class="parameter"><code>filename</code></em> already exists hard links to <em class="parameter"><code>filename</code></em> will break.
   Also since the file is recreated, existing permissions, access control
   lists, metadata etc. may be lost. If <em class="parameter"><code>filename</code></em> is a symbolic link,
   the link itself will be replaced, not the linked file.
</li>
<li class="listitem">
  On Windows renaming a file will not remove an existing file with the
  new name, so on Windows there is a race condition between the existing
  file being removed and the temporary file being renamed.
</li>
<li class="listitem">
  On Windows there is no way to remove a file that is open to some
  process, or mapped into memory. Thus, this function will fail if
  <em class="parameter"><code>filename</code></em> already exists and is open.
</li>
</ul></div>
<p>
</p>
<p>
If the call was successful, it returns <a class="link" href="glib-Standard-Macros.html#TRUE:CAPS" title="TRUE"><code class="literal">TRUE</code></a>. If the call was not successful,
it returns <a class="link" href="glib-Standard-Macros.html#FALSE:CAPS" title="FALSE"><code class="literal">FALSE</code></a> and sets <em class="parameter"><code>error</code></em>. The error domain is <a class="link" href="glib-File-Utilities.html#G-FILE-ERROR:CAPS" title="G_FILE_ERROR"><span class="type">G_FILE_ERROR</span></a>.
Possible error codes are those in the <a class="link" href="glib-File-Utilities.html#GFileError" title="enum GFileError"><span class="type">GFileError</span></a> enumeration.
</p>
<p>
Note that the name for the temporary file is constructed by appending up
to 7 characters to <em class="parameter"><code>filename</code></em>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>filename</code></em> :</span></p></td>
<td>name of a file to write <em class="parameter"><code>contents</code></em> to, in the GLib file name
encoding. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> filename]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>contents</code></em> :</span></p></td>
<td>string to write to the file. <span class="annotation">[<acronym title="Parameter points to an array of items."><span class="acronym">array</span></acronym> length=length][<acronym title="Generics and defining elements of containers and arrays."><span class="acronym">element-type</span></acronym> guint8]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>length</code></em> :</span></p></td>
<td>length of <em class="parameter"><code>contents</code></em>, or -1 if <em class="parameter"><code>contents</code></em> is a nul-terminated string</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>return location for a <a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a>, or <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a class="link" href="glib-Standard-Macros.html#TRUE:CAPS" title="TRUE"><code class="literal">TRUE</code></a> on success, <a class="link" href="glib-Standard-Macros.html#FALSE:CAPS" title="FALSE"><code class="literal">FALSE</code></a> if an error occurred</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.8</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-test"></a><h3>g_file_test ()</h3>
<pre class="programlisting"><a class="link" href="glib-Basic-Types.html#gboolean" title="gboolean"><span class="returnvalue">gboolean</span></a>            g_file_test                         (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-File-Utilities.html#GFileTest" title="enum GFileTest"><span class="type">GFileTest</span></a> test</code></em>);</pre>
<p>
Returns <a class="link" href="glib-Standard-Macros.html#TRUE:CAPS" title="TRUE"><code class="literal">TRUE</code></a> if any of the tests in the bitfield <em class="parameter"><code>test</code></em> are
<a class="link" href="glib-Standard-Macros.html#TRUE:CAPS" title="TRUE"><code class="literal">TRUE</code></a>. For example, <code class="literal">(G_FILE_TEST_EXISTS | 
G_FILE_TEST_IS_DIR)</code> will return <a class="link" href="glib-Standard-Macros.html#TRUE:CAPS" title="TRUE"><code class="literal">TRUE</code></a> if the file exists; 
the check whether it's a directory doesn't matter since the existence 
test is <a class="link" href="glib-Standard-Macros.html#TRUE:CAPS" title="TRUE"><code class="literal">TRUE</code></a>. With the current set of available tests, there's no point
passing in more than one test at a time.
</p>
<p>
Apart from <a class="link" href="glib-File-Utilities.html#G-FILE-TEST-IS-SYMLINK:CAPS"><code class="literal">G_FILE_TEST_IS_SYMLINK</code></a> all tests follow symbolic links,
so for a symbolic link to a regular file <a class="link" href="glib-File-Utilities.html#g-file-test" title="g_file_test ()"><code class="function">g_file_test()</code></a> will return
<a class="link" href="glib-Standard-Macros.html#TRUE:CAPS" title="TRUE"><code class="literal">TRUE</code></a> for both <a class="link" href="glib-File-Utilities.html#G-FILE-TEST-IS-SYMLINK:CAPS"><code class="literal">G_FILE_TEST_IS_SYMLINK</code></a> and <a class="link" href="glib-File-Utilities.html#G-FILE-TEST-IS-REGULAR:CAPS"><code class="literal">G_FILE_TEST_IS_REGULAR</code></a>.
</p>
<p>
Note, that for a dangling symbolic link <a class="link" href="glib-File-Utilities.html#g-file-test" title="g_file_test ()"><code class="function">g_file_test()</code></a> will return
<a class="link" href="glib-Standard-Macros.html#TRUE:CAPS" title="TRUE"><code class="literal">TRUE</code></a> for <a class="link" href="glib-File-Utilities.html#G-FILE-TEST-IS-SYMLINK:CAPS"><code class="literal">G_FILE_TEST_IS_SYMLINK</code></a> and <a class="link" href="glib-Standard-Macros.html#FALSE:CAPS" title="FALSE"><code class="literal">FALSE</code></a> for all other flags.
</p>
<p>
You should never use <a class="link" href="glib-File-Utilities.html#g-file-test" title="g_file_test ()"><code class="function">g_file_test()</code></a> to test whether it is safe
to perform an operation, because there is always the possibility
of the condition changing before you actually perform the operation.
For example, you might think you could use <a class="link" href="glib-File-Utilities.html#G-FILE-TEST-IS-SYMLINK:CAPS"><code class="literal">G_FILE_TEST_IS_SYMLINK</code></a>
to know whether it is safe to write to a file without being
tricked into writing into a different location. It doesn't work!
</p>
<div class="informalexample"><pre class="programlisting">
/* DON'T DO THIS */
 if (!g_file_test (filename, G_FILE_TEST_IS_SYMLINK)) 
   {
     fd = g_open (filename, O_WRONLY);
     /* write to fd */
   }
</pre></div>
<p>
</p>
<p>
Another thing to note is that <a class="link" href="glib-File-Utilities.html#G-FILE-TEST-EXISTS:CAPS"><code class="literal">G_FILE_TEST_EXISTS</code></a> and
<a class="link" href="glib-File-Utilities.html#G-FILE-TEST-IS-EXECUTABLE:CAPS"><code class="literal">G_FILE_TEST_IS_EXECUTABLE</code></a> are implemented using the <code class="function">access()</code>
system call. This usually doesn't matter, but if your program
is setuid or setgid it means that these tests will give you
the answer for the real user ID and group ID, rather than the
effective user ID and group ID.
</p>
<p>
On Windows, there are no symlinks, so testing for
<a class="link" href="glib-File-Utilities.html#G-FILE-TEST-IS-SYMLINK:CAPS"><code class="literal">G_FILE_TEST_IS_SYMLINK</code></a> will always return <a class="link" href="glib-Standard-Macros.html#FALSE:CAPS" title="FALSE"><code class="literal">FALSE</code></a>. Testing for
<a class="link" href="glib-File-Utilities.html#G-FILE-TEST-IS-EXECUTABLE:CAPS"><code class="literal">G_FILE_TEST_IS_EXECUTABLE</code></a> will just check that the file exists and
its name indicates that it is executable, checking for well-known
extensions and those listed in the <code class="envar">PATHEXT</code> environment variable.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>filename</code></em> :</span></p></td>
<td>a filename to test in the GLib file name encoding</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>test</code></em> :</span></p></td>
<td>bitfield of <a class="link" href="glib-File-Utilities.html#GFileTest" title="enum GFileTest"><span class="type">GFileTest</span></a> flags</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>whether a test was <a class="link" href="glib-Standard-Macros.html#TRUE:CAPS" title="TRUE"><code class="literal">TRUE</code></a>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-mkstemp"></a><h3>g_mkstemp ()</h3>
<pre class="programlisting"><a class="link" href="glib-Basic-Types.html#gint" title="gint"><span class="returnvalue">gint</span></a>                g_mkstemp                           (<em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *tmpl</code></em>);</pre>
<p>
Opens a temporary file. See the <code class="function">mkstemp()</code> documentation
on most UNIX-like systems.
</p>
<p>
The parameter is a string that should follow the rules for
<code class="function">mkstemp()</code> templates, i.e. contain the string "XXXXXX".
<a class="link" href="glib-File-Utilities.html#g-mkstemp" title="g_mkstemp ()"><code class="function">g_mkstemp()</code></a> is slightly more flexible than <code class="function">mkstemp()</code> in that the
sequence does not have to occur at the very end of the template.
The X string will be modified to form the name of a file that
didn't exist. The string should be in the GLib file name encoding.
Most importantly, on Windows it should be in UTF-8.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>tmpl</code></em> :</span></p></td>
<td>template filename. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> filename]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>A file handle (as from <code class="function">open()</code>) to the file
opened for reading and writing. The file is opened in binary
mode on platforms where there is a difference. The file handle
should be closed with <code class="function">close()</code>. In case of errors, -1 is
returned and <code class="literal">errno</code> will be set.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-mkstemp-full"></a><h3>g_mkstemp_full ()</h3>
<pre class="programlisting"><a class="link" href="glib-Basic-Types.html#gint" title="gint"><span class="returnvalue">gint</span></a>                g_mkstemp_full                      (<em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *tmpl</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gint" title="gint"><span class="type">gint</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gint" title="gint"><span class="type">gint</span></a> mode</code></em>);</pre>
<p>
Opens a temporary file. See the <code class="function">mkstemp()</code> documentation
on most UNIX-like systems.
</p>
<p>
The parameter is a string that should follow the rules for
<code class="function">mkstemp()</code> templates, i.e. contain the string "XXXXXX".
<a class="link" href="glib-File-Utilities.html#g-mkstemp-full" title="g_mkstemp_full ()"><code class="function">g_mkstemp_full()</code></a> is slightly more flexible than <code class="function">mkstemp()</code>
in that the sequence does not have to occur at the very end of the
template and you can pass a <em class="parameter"><code>mode</code></em> and additional <em class="parameter"><code>flags</code></em>. The X
string will be modified to form the name of a file that didn't exist.
The string should be in the GLib file name encoding. Most importantly,
on Windows it should be in UTF-8.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>tmpl</code></em> :</span></p></td>
<td>template filename. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> filename]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>flags to pass to an <code class="function">open()</code> call in addition to O_EXCL
and O_CREAT, which are passed automatically</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>mode</code></em> :</span></p></td>
<td>permissions to create the temporary file with</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>A file handle (as from <code class="function">open()</code>) to the file
opened for reading and writing. The file handle should be
closed with <code class="function">close()</code>. In case of errors, -1 is returned
and <code class="literal">errno</code> will be set.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-file-open-tmp"></a><h3>g_file_open_tmp ()</h3>
<pre class="programlisting"><a class="link" href="glib-Basic-Types.html#gint" title="gint"><span class="returnvalue">gint</span></a>                g_file_open_tmp                     (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *tmpl</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> **name_used</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Opens a file for writing in the preferred directory for temporary
files (as returned by <a class="link" href="glib-Miscellaneous-Utility-Functions.html#g-get-tmp-dir" title="g_get_tmp_dir ()"><code class="function">g_get_tmp_dir()</code></a>).
</p>
<p>
<em class="parameter"><code>tmpl</code></em> should be a string in the GLib file name encoding containing
a sequence of six 'X' characters, as the parameter to <a class="link" href="glib-File-Utilities.html#g-mkstemp" title="g_mkstemp ()"><code class="function">g_mkstemp()</code></a>.
However, unlike these functions, the template should only be a
basename, no directory components are allowed. If template is
<a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a>, a default template is used.
</p>
<p>
Note that in contrast to <a class="link" href="glib-File-Utilities.html#g-mkstemp" title="g_mkstemp ()"><code class="function">g_mkstemp()</code></a> (and <code class="function">mkstemp()</code>) <em class="parameter"><code>tmpl</code></em> is not
modified, and might thus be a read-only literal string.
</p>
<p>
Upon success, and if <em class="parameter"><code>name_used</code></em> is non-<a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a>, the actual name used
is returned in <em class="parameter"><code>name_used</code></em>. This string should be freed with <a class="link" href="glib-Memory-Allocation.html#g-free" title="g_free ()"><code class="function">g_free()</code></a>
when not needed any longer. The returned name is in the GLib file
name encoding.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>tmpl</code></em> :</span></p></td>
<td>Template for file name, as in
<a class="link" href="glib-File-Utilities.html#g-mkstemp" title="g_mkstemp ()"><code class="function">g_mkstemp()</code></a>, basename only, or <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a> for a default template. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> filename][<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>name_used</code></em> :</span></p></td>
<td>location to store actual name used,
or <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="Parameter for returning results. Default is transfer full."><span class="acronym">out</span></acronym>][<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> filename]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>return location for a <a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>A file handle (as from <code class="function">open()</code>) to the file opened for
reading and writing. The file is opened in binary mode on platforms
where there is a difference. The file handle should be closed with
<code class="function">close()</code>. In case of errors, -1 is returned and <em class="parameter"><code>error</code></em> will be set.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-file-read-link"></a><h3>g_file_read_link ()</h3>
<pre class="programlisting"><a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="returnvalue">gchar</span></a> *             g_file_read_link                    (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Reads the contents of the symbolic link <em class="parameter"><code>filename</code></em> like the POSIX
<code class="function">readlink()</code> function.  The returned string is in the encoding used
for filenames. Use <a class="link" href="glib-Character-Set-Conversion.html#g-filename-to-utf8" title="g_filename_to_utf8 ()"><code class="function">g_filename_to_utf8()</code></a> to convert it to UTF-8.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>filename</code></em> :</span></p></td>
<td>the symbolic link</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>return location for a <a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>A newly-allocated string with the contents of the symbolic link,
or <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a> if an error occurred.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.4</p>
</div>
<hr>
<div class="refsect2">
<a name="g-mkdir-with-parents"></a><h3>g_mkdir_with_parents ()</h3>
<pre class="programlisting"><a class="link" href="glib-Basic-Types.html#gint" title="gint"><span class="returnvalue">gint</span></a>                g_mkdir_with_parents                (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *pathname</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gint" title="gint"><span class="type">gint</span></a> mode</code></em>);</pre>
<p>
Create a directory if it doesn't already exist. Create intermediate
parent directories as needed, too.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>pathname</code></em> :</span></p></td>
<td>a pathname in the GLib file name encoding</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>mode</code></em> :</span></p></td>
<td>permissions to use for newly created directories</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>0 if the directory already exists, or was successfully
created. Returns -1 if an error occurred, with errno set.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.8</p>
</div>
<hr>
<div class="refsect2">
<a name="g-mkdtemp"></a><h3>g_mkdtemp ()</h3>
<pre class="programlisting"><a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="returnvalue">gchar</span></a> *             g_mkdtemp                           (<em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *tmpl</code></em>);</pre>
<p>
Creates a temporary directory. See the <code class="function">mkdtemp()</code> documentation
on most UNIX-like systems.
</p>
<p>
The parameter is a string that should follow the rules for
<code class="function">mkdtemp()</code> templates, i.e. contain the string "XXXXXX".
<a class="link" href="glib-File-Utilities.html#g-mkdtemp" title="g_mkdtemp ()"><code class="function">g_mkdtemp()</code></a> is slightly more flexible than <code class="function">mkdtemp()</code> in that the
sequence does not have to occur at the very end of the template
and you can pass a <em class="parameter"><code>mode</code></em> and additional <em class="parameter"><code>flags</code></em>. The X string will
be modified to form the name of a directory that didn't exist.
The string should be in the GLib file name encoding. Most importantly,
on Windows it should be in UTF-8.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>tmpl</code></em> :</span></p></td>
<td>template directory name. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> filename]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>A pointer to <em class="parameter"><code>tmpl</code></em>, which has been modified
to hold the directory name.  In case of errors, <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a> is
returned and <code class="literal">errno</code> will be set.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.30</p>
</div>
<hr>
<div class="refsect2">
<a name="g-mkdtemp-full"></a><h3>g_mkdtemp_full ()</h3>
<pre class="programlisting"><a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="returnvalue">gchar</span></a> *             g_mkdtemp_full                      (<em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *tmpl</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gint" title="gint"><span class="type">gint</span></a> mode</code></em>);</pre>
<p>
Creates a temporary directory. See the <code class="function">mkdtemp()</code> documentation
on most UNIX-like systems.
</p>
<p>
The parameter is a string that should follow the rules for
<code class="function">mkdtemp()</code> templates, i.e. contain the string "XXXXXX".
<a class="link" href="glib-File-Utilities.html#g-mkdtemp" title="g_mkdtemp ()"><code class="function">g_mkdtemp()</code></a> is slightly more flexible than <code class="function">mkdtemp()</code> in that the
sequence does not have to occur at the very end of the template
and you can pass a <em class="parameter"><code>mode</code></em>. The X string will be modified to form
the name of a directory that didn't exist. The string should be
in the GLib file name encoding. Most importantly, on Windows it
should be in UTF-8.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>tmpl</code></em> :</span></p></td>
<td>template directory name. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> filename]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>mode</code></em> :</span></p></td>
<td>permissions to create the temporary directory with</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>A pointer to <em class="parameter"><code>tmpl</code></em>, which has been modified
to hold the directory name. In case of errors, <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a> is
returned, and <code class="literal">errno</code> will be set.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.30</p>
</div>
<hr>
<div class="refsect2">
<a name="g-dir-make-tmp"></a><h3>g_dir_make_tmp ()</h3>
<pre class="programlisting"><a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="returnvalue">gchar</span></a> *             g_dir_make_tmp                      (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *tmpl</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Creates a subdirectory in the preferred directory for temporary
files (as returned by <a class="link" href="glib-Miscellaneous-Utility-Functions.html#g-get-tmp-dir" title="g_get_tmp_dir ()"><code class="function">g_get_tmp_dir()</code></a>).
</p>
<p>
<em class="parameter"><code>tmpl</code></em> should be a string in the GLib file name encoding containing
a sequence of six 'X' characters, as the parameter to <a class="link" href="glib-File-Utilities.html#g-mkstemp" title="g_mkstemp ()"><code class="function">g_mkstemp()</code></a>.
However, unlike these functions, the template should only be a
basename, no directory components are allowed. If template is
<a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a>, a default template is used.
</p>
<p>
Note that in contrast to <a class="link" href="glib-File-Utilities.html#g-mkdtemp" title="g_mkdtemp ()"><code class="function">g_mkdtemp()</code></a> (and <code class="function">mkdtemp()</code>) <em class="parameter"><code>tmpl</code></em> is not
modified, and might thus be a read-only literal string.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>tmpl</code></em> :</span></p></td>
<td>Template for directory name,
as in <a class="link" href="glib-File-Utilities.html#g-mkdtemp" title="g_mkdtemp ()"><code class="function">g_mkdtemp()</code></a>, basename only, or <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a> for a default template. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> filename][<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>return location for a <a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>The actual name used. This string
should be freed with <a class="link" href="glib-Memory-Allocation.html#g-free" title="g_free ()"><code class="function">g_free()</code></a> when not needed any longer and is
is in the GLib file name encoding. In case of errors, <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a> is
returned and <em class="parameter"><code>error</code></em> will be set. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> filename]</span>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.30</p>
</div>
<hr>
<div class="refsect2">
<a name="GDir"></a><h3>GDir</h3>
<pre class="programlisting">typedef struct _GDir GDir;</pre>
<p>
An opaque structure representing an opened directory.
</p>
</div>
<hr>
<div class="refsect2">
<a name="g-dir-open"></a><h3>g_dir_open ()</h3>
<pre class="programlisting"><a class="link" href="glib-File-Utilities.html#GDir" title="GDir"><span class="returnvalue">GDir</span></a> *              g_dir_open                          (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *path</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Basic-Types.html#guint" title="guint"><span class="type">guint</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Opens a directory for reading. The names of the files in the
directory can then be retrieved using <a class="link" href="glib-File-Utilities.html#g-dir-read-name" title="g_dir_read_name ()"><code class="function">g_dir_read_name()</code></a>.  Note
that the ordering is not defined.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>path</code></em> :</span></p></td>
<td>the path to the directory you are interested in. On Unix
in the on-disk encoding. On Windows in UTF-8</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>Currently must be set to 0. Reserved for future use.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>return location for a <a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a>, or <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a>.
If non-<a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a>, an error will be set if and only if
<a class="link" href="glib-File-Utilities.html#g-dir-open" title="g_dir_open ()"><code class="function">g_dir_open()</code></a> fails.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a newly allocated <a class="link" href="glib-File-Utilities.html#GDir" title="GDir"><span class="type">GDir</span></a> on success, <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a> on failure.
If non-<a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a>, you must free the result with <a class="link" href="glib-File-Utilities.html#g-dir-close" title="g_dir_close ()"><code class="function">g_dir_close()</code></a>
when you are finished with it.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-dir-read-name"></a><h3>g_dir_read_name ()</h3>
<pre class="programlisting">const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="returnvalue">gchar</span></a> *       g_dir_read_name                     (<em class="parameter"><code><a class="link" href="glib-File-Utilities.html#GDir" title="GDir"><span class="type">GDir</span></a> *dir</code></em>);</pre>
<p>
Retrieves the name of another entry in the directory, or <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a>.
The order of entries returned from this function is not defined,
and may vary by file system or other operating-system dependent
factors. 
</p>
<p>
On Unix, the '.' and '..' entries are omitted, and the returned
name is in the on-disk encoding.
</p>
<p>
On Windows, as is true of all GLib functions which operate on
filenames, the returned name is in UTF-8.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>dir</code></em> :</span></p></td>
<td>a <a class="link" href="glib-File-Utilities.html#GDir" title="GDir"><span class="type">GDir</span></a>* created by <a class="link" href="glib-File-Utilities.html#g-dir-open" title="g_dir_open ()"><code class="function">g_dir_open()</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>The entry's name or <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a> if there are no
more entries. The return value is owned by GLib and
must not be modified or freed.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-dir-rewind"></a><h3>g_dir_rewind ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_dir_rewind                        (<em class="parameter"><code><a class="link" href="glib-File-Utilities.html#GDir" title="GDir"><span class="type">GDir</span></a> *dir</code></em>);</pre>
<p>
Resets the given directory. The next call to <a class="link" href="glib-File-Utilities.html#g-dir-read-name" title="g_dir_read_name ()"><code class="function">g_dir_read_name()</code></a>
will return the first entry again.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody><tr>
<td><p><span class="term"><em class="parameter"><code>dir</code></em> :</span></p></td>
<td>a <a class="link" href="glib-File-Utilities.html#GDir" title="GDir"><span class="type">GDir</span></a>* created by <a class="link" href="glib-File-Utilities.html#g-dir-open" title="g_dir_open ()"><code class="function">g_dir_open()</code></a>
</td>
</tr></tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-dir-close"></a><h3>g_dir_close ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_dir_close                         (<em class="parameter"><code><a class="link" href="glib-File-Utilities.html#GDir" title="GDir"><span class="type">GDir</span></a> *dir</code></em>);</pre>
<p>
Closes the directory and deallocates all related resources.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody><tr>
<td><p><span class="term"><em class="parameter"><code>dir</code></em> :</span></p></td>
<td>a <a class="link" href="glib-File-Utilities.html#GDir" title="GDir"><span class="type">GDir</span></a>* created by <a class="link" href="glib-File-Utilities.html#g-dir-open" title="g_dir_open ()"><code class="function">g_dir_open()</code></a>
</td>
</tr></tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="GMappedFile"></a><h3>GMappedFile</h3>
<pre class="programlisting">typedef struct _GMappedFile GMappedFile;</pre>
<p>
The <a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a> represents a file mapping created with
<a class="link" href="glib-File-Utilities.html#g-mapped-file-new" title="g_mapped_file_new ()"><code class="function">g_mapped_file_new()</code></a>. It has only private members and should
not be accessed directly.
</p>
</div>
<hr>
<div class="refsect2">
<a name="g-mapped-file-new"></a><h3>g_mapped_file_new ()</h3>
<pre class="programlisting"><a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="returnvalue">GMappedFile</span></a> *       g_mapped_file_new                   (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gboolean" title="gboolean"><span class="type">gboolean</span></a> writable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Maps a file into memory. On UNIX, this is using the <code class="function">mmap()</code> function.
</p>
<p>
If <em class="parameter"><code>writable</code></em> is <a class="link" href="glib-Standard-Macros.html#TRUE:CAPS" title="TRUE"><code class="literal">TRUE</code></a>, the mapped buffer may be modified, otherwise
it is an error to modify the mapped buffer. Modifications to the buffer
are not visible to other processes mapping the same file, and are not
written back to the file.
</p>
<p>
Note that modifications of the underlying file might affect the contents
of the <a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a>. Therefore, mapping should only be used if the file
will not be modified, or if all modifications of the file are done
atomically (e.g. using <a class="link" href="glib-File-Utilities.html#g-file-set-contents" title="g_file_set_contents ()"><code class="function">g_file_set_contents()</code></a>).
</p>
<p>
If <em class="parameter"><code>filename</code></em> is the name of an empty, regular file, the function
will successfully return an empty <a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a>. In other cases of
size 0 (e.g. device files such as /dev/null), <em class="parameter"><code>error</code></em> will be set
to the <a class="link" href="glib-File-Utilities.html#GFileError" title="enum GFileError"><span class="type">GFileError</span></a> value <a class="link" href="glib-File-Utilities.html#G-FILE-ERROR-INVAL:CAPS"><span class="type">G_FILE_ERROR_INVAL</span></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>filename</code></em> :</span></p></td>
<td>The path of the file to load, in the GLib filename encoding</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>writable</code></em> :</span></p></td>
<td>whether the mapping should be writable</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>return location for a <a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a>, or <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a newly allocated <a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a> which must be unref'd
with <a class="link" href="glib-File-Utilities.html#g-mapped-file-unref" title="g_mapped_file_unref ()"><code class="function">g_mapped_file_unref()</code></a>, or <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a> if the mapping failed.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.8</p>
</div>
<hr>
<div class="refsect2">
<a name="g-mapped-file-new-from-fd"></a><h3>g_mapped_file_new_from_fd ()</h3>
<pre class="programlisting"><a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="returnvalue">GMappedFile</span></a> *       g_mapped_file_new_from_fd           (<em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gint" title="gint"><span class="type">gint</span></a> fd</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Basic-Types.html#gboolean" title="gboolean"><span class="type">gboolean</span></a> writable</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Maps a file into memory. On UNIX, this is using the <code class="function">mmap()</code> function.
</p>
<p>
If <em class="parameter"><code>writable</code></em> is <a class="link" href="glib-Standard-Macros.html#TRUE:CAPS" title="TRUE"><code class="literal">TRUE</code></a>, the mapped buffer may be modified, otherwise
it is an error to modify the mapped buffer. Modifications to the buffer
are not visible to other processes mapping the same file, and are not
written back to the file.
</p>
<p>
Note that modifications of the underlying file might affect the contents
of the <a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a>. Therefore, mapping should only be used if the file
will not be modified, or if all modifications of the file are done
atomically (e.g. using <a class="link" href="glib-File-Utilities.html#g-file-set-contents" title="g_file_set_contents ()"><code class="function">g_file_set_contents()</code></a>).
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>fd</code></em> :</span></p></td>
<td>The file descriptor of the file to load</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>writable</code></em> :</span></p></td>
<td>whether the mapping should be writable</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>return location for a <a class="link" href="glib-Error-Reporting.html#GError" title="struct GError"><span class="type">GError</span></a>, or <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a newly allocated <a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a> which must be unref'd
with <a class="link" href="glib-File-Utilities.html#g-mapped-file-unref" title="g_mapped_file_unref ()"><code class="function">g_mapped_file_unref()</code></a>, or <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a> if the mapping failed.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.32</p>
</div>
<hr>
<div class="refsect2">
<a name="g-mapped-file-ref"></a><h3>g_mapped_file_ref ()</h3>
<pre class="programlisting"><a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="returnvalue">GMappedFile</span></a> *       g_mapped_file_ref                   (<em class="parameter"><code><a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a> *file</code></em>);</pre>
<p>
Increments the reference count of <em class="parameter"><code>file</code></em> by one.  It is safe to call
this function from any thread.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>a <a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>the passed in <a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a>.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-mapped-file-unref"></a><h3>g_mapped_file_unref ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_mapped_file_unref                 (<em class="parameter"><code><a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a> *file</code></em>);</pre>
<p>
Decrements the reference count of <em class="parameter"><code>file</code></em> by one.  If the reference count
drops to 0, unmaps the buffer of <em class="parameter"><code>file</code></em> and frees it.
</p>
<p>
It is safe to call this function from any thread.
</p>
<p>
Since 2.22
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody><tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>a <a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a>
</td>
</tr></tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-mapped-file-free"></a><h3>g_mapped_file_free ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_mapped_file_free                  (<em class="parameter"><code><a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a> *file</code></em>);</pre>
<div class="warning" style="margin-left: 0.5in; margin-right: 0.5in;">
<h3 class="title">Warning</h3>
<p><code class="literal">g_mapped_file_free</code> has been deprecated since version 2.22 and should not be used in newly-written code. Use <a class="link" href="glib-File-Utilities.html#g-mapped-file-unref" title="g_mapped_file_unref ()"><code class="function">g_mapped_file_unref()</code></a> instead.</p>
</div>
<p>
This call existed before <a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a> had refcounting and is currently
exactly the same as <a class="link" href="glib-File-Utilities.html#g-mapped-file-unref" title="g_mapped_file_unref ()"><code class="function">g_mapped_file_unref()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody><tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>a <a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a>
</td>
</tr></tbody>
</table></div>
<p class="since">Since 2.8</p>
</div>
<hr>
<div class="refsect2">
<a name="g-mapped-file-get-length"></a><h3>g_mapped_file_get_length ()</h3>
<pre class="programlisting"><span class="returnvalue">gsize</span>               g_mapped_file_get_length            (<em class="parameter"><code><a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a> *file</code></em>);</pre>
<p>
Returns the length of the contents of a <a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>a <a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>the length of the contents of <em class="parameter"><code>file</code></em>.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.8</p>
</div>
<hr>
<div class="refsect2">
<a name="g-mapped-file-get-contents"></a><h3>g_mapped_file_get_contents ()</h3>
<pre class="programlisting"><a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="returnvalue">gchar</span></a> *             g_mapped_file_get_contents          (<em class="parameter"><code><a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a> *file</code></em>);</pre>
<p>
Returns the contents of a <a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a>. 
</p>
<p>
Note that the contents may not be zero-terminated,
even if the <a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a> is backed by a text file.
</p>
<p>
If the file is empty then <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a> is returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>file</code></em> :</span></p></td>
<td>a <a class="link" href="glib-File-Utilities.html#GMappedFile" title="GMappedFile"><span class="type">GMappedFile</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>the contents of <em class="parameter"><code>file</code></em>, or <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a>.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.8</p>
</div>
<hr>
<div class="refsect2">
<a name="g-open"></a><h3>g_open ()</h3>
<pre class="programlisting"><span class="returnvalue">int</span>                 g_open                              (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> flags</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> mode</code></em>);</pre>
<p>
A wrapper for the POSIX <code class="function">open()</code> function. The <code class="function">open()</code> function is
used to convert a pathname into a file descriptor.
</p>
<p>
On POSIX systems file descriptors are implemented by the operating
system. On Windows, it's the C library that implements <code class="function">open()</code> and
file descriptors. The actual Win32 API for opening files is quite
different, see MSDN documentation for <code class="function">CreateFile()</code>. The Win32 API
uses file handles, which are more randomish integers, not small
integers like file descriptors.
</p>
<p>
Because file descriptors are specific to the C library on Windows,
the file descriptor returned by this function makes sense only to
functions in the same C library. Thus if the GLib-using code uses a
different C library than GLib does, the file descriptor returned by
this function cannot be passed to C library functions like <code class="function">write()</code>
or <code class="function">read()</code>.
</p>
<p>
See your C library manual for more details about <code class="function">open()</code>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>filename</code></em> :</span></p></td>
<td>a pathname in the GLib file name encoding (UTF-8 on Windows)</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>as in <code class="function">open()</code>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>mode</code></em> :</span></p></td>
<td>as in <code class="function">open()</code>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a new file descriptor, or -1 if an error occurred. The
return value can be used exactly like the return value from <code class="function">open()</code>.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.6</p>
</div>
<hr>
<div class="refsect2">
<a name="g-rename"></a><h3>g_rename ()</h3>
<pre class="programlisting"><span class="returnvalue">int</span>                 g_rename                            (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *oldfilename</code></em>,
                                                         <em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *newfilename</code></em>);</pre>
<p>
A wrapper for the POSIX <code class="function">rename()</code> function. The <code class="function">rename()</code> function 
renames a file, moving it between directories if required.
</p>
<p>
See your C library manual for more details about how <code class="function">rename()</code> works
on your system. It is not possible in general on Windows to rename
a file that is open to some process.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>oldfilename</code></em> :</span></p></td>
<td>a pathname in the GLib file name encoding (UTF-8 on Windows)</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>newfilename</code></em> :</span></p></td>
<td>a pathname in the GLib file name encoding</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>0 if the renaming succeeded, -1 if an error occurred</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.6</p>
</div>
<hr>
<div class="refsect2">
<a name="g-mkdir"></a><h3>g_mkdir ()</h3>
<pre class="programlisting"><span class="returnvalue">int</span>                 g_mkdir                             (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> mode</code></em>);</pre>
<p>
A wrapper for the POSIX <code class="function">mkdir()</code> function. The <code class="function">mkdir()</code> function 
attempts to create a directory with the given name and permissions.
The mode argument is ignored on Windows.
</p>
<p>
See your C library manual for more details about <code class="function">mkdir()</code>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>filename</code></em> :</span></p></td>
<td>a pathname in the GLib file name encoding (UTF-8 on Windows)</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>mode</code></em> :</span></p></td>
<td>permissions to use for the newly created directory</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>0 if the directory was successfully created, -1 if an error
occurred</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.6</p>
</div>
<hr>
<div class="refsect2">
<a name="GStatBuf"></a><h3>GStatBuf</h3>
<pre class="programlisting">typedef struct _stat32 GStatBuf;
</pre>
<p>
A type corresponding to the appropriate struct type for the stat
system call, depending on the platform and/or compiler being used.
</p>
<p>
See <a class="link" href="glib-File-Utilities.html#g-stat" title="g_stat ()"><code class="function">g_stat()</code></a> for more information.
</p>
</div>
<hr>
<div class="refsect2">
<a name="g-stat"></a><h3>g_stat ()</h3>
<pre class="programlisting"><span class="returnvalue">int</span>                 g_stat                              (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-File-Utilities.html#GStatBuf" title="GStatBuf"><span class="type">GStatBuf</span></a> *buf</code></em>);</pre>
<p>
A wrapper for the POSIX <code class="function">stat()</code> function. The <code class="function">stat()</code> function
returns information about a file. On Windows the <code class="function">stat()</code> function in
the C library checks only the FAT-style READONLY attribute and does
not look at the ACL at all. Thus on Windows the protection bits in
the st_mode field are a fabrication of little use.
</p>
<p>
On Windows the Microsoft C libraries have several variants of the
<span class="structname">stat</span> struct and <code class="function">stat()</code> function with names
like "_stat", "_stat32", "_stat32i64" and "_stat64i32". The one
used here is for 32-bit code the one with 32-bit size and time
fields, specifically called "_stat32".
</p>
<p>
In Microsoft's compiler, by default "struct stat" means one with
64-bit time fields while in MinGW "struct stat" is the legacy one
with 32-bit fields. To hopefully clear up this messs, the gstdio.h
header defines a type GStatBuf which is the appropriate struct type
depending on the platform and/or compiler being used. On POSIX it
is just "struct stat", but note that even on POSIX platforms,
"stat" might be a macro.
</p>
<p>
See your C library manual for more details about <code class="function">stat()</code>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>filename</code></em> :</span></p></td>
<td>a pathname in the GLib file name encoding (UTF-8 on Windows)</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>buf</code></em> :</span></p></td>
<td>a pointer to a <span class="structname">stat</span> struct, which
will be filled with the file information</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>0 if the information was successfully retrieved, -1 if an error
occurred</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.6</p>
</div>
<hr>
<div class="refsect2">
<a name="g-lstat"></a><h3>g_lstat ()</h3>
<pre class="programlisting"><span class="returnvalue">int</span>                 g_lstat                             (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><a class="link" href="glib-File-Utilities.html#GStatBuf" title="GStatBuf"><span class="type">GStatBuf</span></a> *buf</code></em>);</pre>
<p>
A wrapper for the POSIX <code class="function">lstat()</code> function. The <code class="function">lstat()</code> function is
like <code class="function">stat()</code> except that in the case of symbolic links, it returns
information about the symbolic link itself and not the file that it
refers to. If the system does not support symbolic links <a class="link" href="glib-File-Utilities.html#g-lstat" title="g_lstat ()"><code class="function">g_lstat()</code></a>
is identical to <a class="link" href="glib-File-Utilities.html#g-stat" title="g_stat ()"><code class="function">g_stat()</code></a>.
</p>
<p>
See your C library manual for more details about <code class="function">lstat()</code>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>filename</code></em> :</span></p></td>
<td>a pathname in the GLib file name encoding (UTF-8 on Windows)</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>buf</code></em> :</span></p></td>
<td>a pointer to a <span class="structname">stat</span> struct, which
will be filled with the file information</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>0 if the information was successfully retrieved, -1 if an error
occurred</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.6</p>
</div>
<hr>
<div class="refsect2">
<a name="g-unlink"></a><h3>g_unlink ()</h3>
<pre class="programlisting"><span class="returnvalue">int</span>                 g_unlink                            (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>);</pre>
<p>
A wrapper for the POSIX <code class="function">unlink()</code> function. The <code class="function">unlink()</code> function 
deletes a name from the filesystem. If this was the last link to the 
file and no processes have it opened, the diskspace occupied by the
file is freed.
</p>
<p>
See your C library manual for more details about <code class="function">unlink()</code>. Note
that on Windows, it is in general not possible to delete files that
are open to some process, or mapped into memory.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>filename</code></em> :</span></p></td>
<td>a pathname in the GLib file name encoding (UTF-8 on Windows)</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>0 if the name was successfully deleted, -1 if an error
occurred</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.6</p>
</div>
<hr>
<div class="refsect2">
<a name="g-remove"></a><h3>g_remove ()</h3>
<pre class="programlisting"><span class="returnvalue">int</span>                 g_remove                            (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>);</pre>
<p>
A wrapper for the POSIX <code class="function">remove()</code> function. The <code class="function">remove()</code> function
deletes a name from the filesystem.
</p>
<p>
See your C library manual for more details about how <code class="function">remove()</code> works
on your system. On Unix, <code class="function">remove()</code> removes also directories, as it
calls <code class="function">unlink()</code> for files and <code class="function">rmdir()</code> for directories. On Windows,
although <code class="function">remove()</code> in the C library only works for files, this
function tries first <code class="function">remove()</code> and then if that fails <code class="function">rmdir()</code>, and
thus works for both files and directories. Note however, that on
Windows, it is in general not possible to remove a file that is
open to some process, or mapped into memory.
</p>
<p>
If this function fails on Windows you can't infer too much from the
errno value. <code class="function">rmdir()</code> is tried regardless of what caused <code class="function">remove()</code> to
fail. Any errno value set by <code class="function">remove()</code> will be overwritten by that
set by <code class="function">rmdir()</code>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>filename</code></em> :</span></p></td>
<td>a pathname in the GLib file name encoding (UTF-8 on Windows)</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>0 if the file was successfully removed, -1 if an error
occurred</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.6</p>
</div>
<hr>
<div class="refsect2">
<a name="g-rmdir"></a><h3>g_rmdir ()</h3>
<pre class="programlisting"><span class="returnvalue">int</span>                 g_rmdir                             (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>);</pre>
<p>
A wrapper for the POSIX <code class="function">rmdir()</code> function. The <code class="function">rmdir()</code> function
deletes a directory from the filesystem.
</p>
<p>
See your C library manual for more details about how <code class="function">rmdir()</code> works
on your system.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>filename</code></em> :</span></p></td>
<td>a pathname in the GLib file name encoding (UTF-8 on Windows)</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>0 if the directory was successfully removed, -1 if an error
occurred</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.6</p>
</div>
<hr>
<div class="refsect2">
<a name="g-fopen"></a><h3>g_fopen ()</h3>
<pre class="programlisting"><span class="returnvalue">FILE</span> *              g_fopen                             (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *mode</code></em>);</pre>
<p>
A wrapper for the stdio <code class="function">fopen()</code> function. The <code class="function">fopen()</code> function
opens a file and associates a new stream with it.
</p>
<p>
Because file descriptors are specific to the C library on Windows,
and a file descriptor is partof the <span class="type">FILE</span> struct, the
<span class="type">FILE</span> pointer returned by this function makes sense
only to functions in the same C library. Thus if the GLib-using
code uses a different C library than GLib does, the
<span class="type">FILE</span> pointer returned by this function cannot be
passed to C library functions like <code class="function">fprintf()</code> or <code class="function">fread()</code>.
</p>
<p>
See your C library manual for more details about <code class="function">fopen()</code>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>filename</code></em> :</span></p></td>
<td>a pathname in the GLib file name encoding (UTF-8 on Windows)</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>mode</code></em> :</span></p></td>
<td>a string describing the mode in which the file should be
opened</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>A <span class="type">FILE</span> pointer if the file was successfully
opened, or <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a> if an error occurred</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.6</p>
</div>
<hr>
<div class="refsect2">
<a name="g-freopen"></a><h3>g_freopen ()</h3>
<pre class="programlisting"><span class="returnvalue">FILE</span> *              g_freopen                           (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *mode</code></em>,
                                                         <em class="parameter"><code><span class="type">FILE</span> *stream</code></em>);</pre>
<p>
A wrapper for the POSIX <code class="function">freopen()</code> function. The <code class="function">freopen()</code> function
opens a file and associates it with an existing stream.
</p>
<p>
See your C library manual for more details about <code class="function">freopen()</code>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>filename</code></em> :</span></p></td>
<td>a pathname in the GLib file name encoding (UTF-8 on Windows)</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>mode</code></em> :</span></p></td>
<td>a string describing the mode in which the file should be
opened</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>stream</code></em> :</span></p></td>
<td>an existing stream which will be reused, or <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>A <code class="literal">FILE</code> pointer if the file was successfully
opened, or <a class="link" href="glib-Standard-Macros.html#NULL:CAPS" title="NULL"><code class="literal">NULL</code></a> if an error occurred.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.6</p>
</div>
<hr>
<div class="refsect2">
<a name="g-chmod"></a><h3>g_chmod ()</h3>
<pre class="programlisting"><span class="returnvalue">int</span>                 g_chmod                             (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> mode</code></em>);</pre>
<p>
A wrapper for the POSIX <code class="function">chmod()</code> function. The <code class="function">chmod()</code> function is
used to set the permissions of a file system object.
</p>
<p>
On Windows the file protection mechanism is not at all POSIX-like,
and the underlying <code class="function">chmod()</code> function in the C library just sets or
clears the FAT-style READONLY attribute. It does not touch any
ACL. Software that needs to manage file permissions on Windows
exactly should use the Win32 API.
</p>
<p>
See your C library manual for more details about <code class="function">chmod()</code>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>filename</code></em> :</span></p></td>
<td>a pathname in the GLib file name encoding (UTF-8 on Windows)</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>mode</code></em> :</span></p></td>
<td>as in <code class="function">chmod()</code>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>zero if the operation succeeded, -1 on error.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.8</p>
</div>
<hr>
<div class="refsect2">
<a name="g-access"></a><h3>g_access ()</h3>
<pre class="programlisting"><span class="returnvalue">int</span>                 g_access                            (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> mode</code></em>);</pre>
<p>
A wrapper for the POSIX <code class="function">access()</code> function. This function is used to
test a pathname for one or several of read, write or execute
permissions, or just existence.
</p>
<p>
On Windows, the file protection mechanism is not at all POSIX-like,
and the underlying function in the C library only checks the
FAT-style READONLY attribute, and does not look at the ACL of a
file at all. This function is this in practise almost useless on
Windows. Software that needs to handle file permissions on Windows
more exactly should use the Win32 API.
</p>
<p>
See your C library manual for more details about <code class="function">access()</code>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>filename</code></em> :</span></p></td>
<td>a pathname in the GLib file name encoding (UTF-8 on Windows)</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>mode</code></em> :</span></p></td>
<td>as in <code class="function">access()</code>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>zero if the pathname refers to an existing file system
object that has all the tested permissions, or -1 otherwise or on
error.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.8</p>
</div>
<hr>
<div class="refsect2">
<a name="g-creat"></a><h3>g_creat ()</h3>
<pre class="programlisting"><span class="returnvalue">int</span>                 g_creat                             (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><span class="type">int</span> mode</code></em>);</pre>
<p>
A wrapper for the POSIX <code class="function">creat()</code> function. The <code class="function">creat()</code> function is
used to convert a pathname into a file descriptor, creating a file
if necessary.
</p>
<p>
On POSIX systems file descriptors are implemented by the operating
system. On Windows, it's the C library that implements <code class="function">creat()</code> and
file descriptors. The actual Windows API for opening files is
different, see MSDN documentation for <code class="function">CreateFile()</code>. The Win32 API
uses file handles, which are more randomish integers, not small
integers like file descriptors.
</p>
<p>
Because file descriptors are specific to the C library on Windows,
the file descriptor returned by this function makes sense only to
functions in the same C library. Thus if the GLib-using code uses a
different C library than GLib does, the file descriptor returned by
this function cannot be passed to C library functions like <code class="function">write()</code>
or <code class="function">read()</code>.
</p>
<p>
See your C library manual for more details about <code class="function">creat()</code>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>filename</code></em> :</span></p></td>
<td>a pathname in the GLib file name encoding (UTF-8 on Windows)</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>mode</code></em> :</span></p></td>
<td>as in <code class="function">creat()</code>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a new file descriptor, or -1 if an error occurred. The
return value can be used exactly like the return value from <code class="function">creat()</code>.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.8</p>
</div>
<hr>
<div class="refsect2">
<a name="g-chdir"></a><h3>g_chdir ()</h3>
<pre class="programlisting"><span class="returnvalue">int</span>                 g_chdir                             (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *path</code></em>);</pre>
<p>
A wrapper for the POSIX <code class="function">chdir()</code> function. The function changes the
current directory of the process to <em class="parameter"><code>path</code></em>.
</p>
<p>
See your C library manual for more details about <code class="function">chdir()</code>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>path</code></em> :</span></p></td>
<td>a pathname in the GLib file name encoding (UTF-8 on Windows)</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>0 on success, -1 if an error occurred.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.8</p>
</div>
<hr>
<div class="refsect2">
<a name="g-utime"></a><h3>g_utime ()</h3>
<pre class="programlisting"><span class="returnvalue">int</span>                 g_utime                             (<em class="parameter"><code>const <a class="link" href="glib-Basic-Types.html#gchar" title="gchar"><span class="type">gchar</span></a> *filename</code></em>,
                                                         <em class="parameter"><code><span class="type">struct utimbuf</span> *utb</code></em>);</pre>
<p>
A wrapper for the POSIX <code class="function">utime()</code> function. The <code class="function">utime()</code> function
sets the access and modification timestamps of a file.
</p>
<p>
See your C library manual for more details about how <code class="function">utime()</code> works
on your system.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>filename</code></em> :</span></p></td>
<td>a pathname in the GLib file name encoding (UTF-8 on Windows)</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>utb</code></em> :</span></p></td>
<td>a pointer to a struct utimbuf.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>0 if the operation was successful, -1 if an error
occurred</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.18</p>
</div>
</div>
</div>
<div class="footer">
<hr>
          Generated by GTK-Doc V1.18</div>
</body>
</html>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>GSocket</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.76.1">
<link rel="home" href="index.html" title="GIO Reference Manual">
<link rel="up" href="networking.html" title="Low-level network support">
<link rel="prev" href="networking.html" title="Low-level network support">
<link rel="next" href="GInetAddress.html" title="GInetAddress">
<meta name="generator" content="GTK-Doc V1.18 (XML mode)">
<link rel="stylesheet" href="style.css" type="text/css">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF">
<table class="navigation" id="top" width="100%" summary="Navigation header" cellpadding="2" cellspacing="2">
<tr valign="middle">
<td><a accesskey="p" href="networking.html"><img src="left.png" width="24" height="24" border="0" alt="Prev"></a></td>
<td><a accesskey="u" href="networking.html"><img src="up.png" width="24" height="24" border="0" alt="Up"></a></td>
<td><a accesskey="h" href="index.html"><img src="home.png" width="24" height="24" border="0" alt="Home"></a></td>
<th width="100%" align="center">GIO Reference Manual</th>
<td><a accesskey="n" href="GInetAddress.html"><img src="right.png" width="24" height="24" border="0" alt="Next"></a></td>
</tr>
<tr><td colspan="5" class="shortcuts">
<a href="#GSocket.synopsis" class="shortcut">Top</a>
                   | 
                  <a href="#GSocket.description" class="shortcut">Description</a>
                   | 
                  <a href="#GSocket.object-hierarchy" class="shortcut">Object Hierarchy</a>
                   | 
                  <a href="#GSocket.implemented-interfaces" class="shortcut">Implemented Interfaces</a>
                   | 
                  <a href="#GSocket.properties" class="shortcut">Properties</a>
</td></tr>
</table>
<div class="refentry">
<a name="GSocket"></a><div class="titlepage"></div>
<div class="refnamediv"><table width="100%"><tr>
<td valign="top">
<h2><span class="refentrytitle"><a name="GSocket.top_of_page"></a>GSocket</span></h2>
<p>GSocket — Low-level socket object</p>
</td>
<td valign="top" align="right"></td>
</tr></table></div>
<div class="refsynopsisdiv">
<a name="GSocket.synopsis"></a><h2>Synopsis</h2>
<pre class="synopsis">
#include &lt;gio/gio.h&gt;

                    <a class="link" href="GSocket.html#GSocket-struct" title="GSocket">GSocket</a>;
<a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            (<a class="link" href="GSocket.html#GSocketSourceFunc" title="GSocketSourceFunc ()">*GSocketSourceFunc</a>)                (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-IO-Channels.html#GIOCondition"><span class="type">GIOCondition</span></a> condition</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);
enum                <a class="link" href="GSocket.html#GSocketType" title="enum GSocketType">GSocketType</a>;
enum                <a class="link" href="GSocket.html#GSocketProtocol" title="enum GSocketProtocol">GSocketProtocol</a>;
enum                <a class="link" href="GSocket.html#GSocketMsgFlags" title="enum GSocketMsgFlags">GSocketMsgFlags</a>;
struct              <a class="link" href="GSocket.html#GInputVector" title="struct GInputVector">GInputVector</a>;
struct              <a class="link" href="GSocket.html#GOutputVector" title="struct GOutputVector">GOutputVector</a>;
<a class="link" href="GSocket.html" title="GSocket"><span class="returnvalue">GSocket</span></a> *           <a class="link" href="GSocket.html#g-socket-new" title="g_socket_new ()">g_socket_new</a>                        (<em class="parameter"><code><a class="link" href="GSocketAddress.html#GSocketFamily" title="enum GSocketFamily"><span class="type">GSocketFamily</span></a> family</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocket.html#GSocketType" title="enum GSocketType"><span class="type">GSocketType</span></a> type</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocket.html#GSocketProtocol" title="enum GSocketProtocol"><span class="type">GSocketProtocol</span></a> protocol</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);
<a class="link" href="GSocket.html" title="GSocket"><span class="returnvalue">GSocket</span></a> *           <a class="link" href="GSocket.html#g-socket-new-from-fd" title="g_socket_new_from_fd ()">g_socket_new_from_fd</a>                (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a> fd</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);
<a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            <a class="link" href="GSocket.html#g-socket-bind" title="g_socket_bind ()">g_socket_bind</a>                       (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a> *address</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> allow_reuse</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);
<a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            <a class="link" href="GSocket.html#g-socket-listen" title="g_socket_listen ()">g_socket_listen</a>                     (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);
<a class="link" href="GSocket.html" title="GSocket"><span class="returnvalue">GSocket</span></a> *           <a class="link" href="GSocket.html#g-socket-accept" title="g_socket_accept ()">g_socket_accept</a>                     (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);
<a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            <a class="link" href="GSocket.html#g-socket-connect" title="g_socket_connect ()">g_socket_connect</a>                    (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a> *address</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);
<a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            <a class="link" href="GSocket.html#g-socket-check-connect-result" title="g_socket_check_connect_result ()">g_socket_check_connect_result</a>       (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);
<a href="../glib/glib-Basic-Types.html#gssize"><span class="returnvalue">gssize</span></a>              <a class="link" href="GSocket.html#g-socket-receive" title="g_socket_receive ()">g_socket_receive</a>                    (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *buffer</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gsize"><span class="type">gsize</span></a> size</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);
<a href="../glib/glib-Basic-Types.html#gssize"><span class="returnvalue">gssize</span></a>              <a class="link" href="GSocket.html#g-socket-receive-from" title="g_socket_receive_from ()">g_socket_receive_from</a>               (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a> **address</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *buffer</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gsize"><span class="type">gsize</span></a> size</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);
<a href="../glib/glib-Basic-Types.html#gssize"><span class="returnvalue">gssize</span></a>              <a class="link" href="GSocket.html#g-socket-receive-message" title="g_socket_receive_message ()">g_socket_receive_message</a>            (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a> **address</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocket.html#GInputVector" title="struct GInputVector"><span class="type">GInputVector</span></a> *vectors</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a> num_vectors</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocketControlMessage.html" title="GSocketControlMessage"><span class="type">GSocketControlMessage</span></a> ***messages</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a> *num_messages</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a> *flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);
<a href="../glib/glib-Basic-Types.html#gssize"><span class="returnvalue">gssize</span></a>              <a class="link" href="GSocket.html#g-socket-receive-with-blocking" title="g_socket_receive_with_blocking ()">g_socket_receive_with_blocking</a>      (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *buffer</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gsize"><span class="type">gsize</span></a> size</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> blocking</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);
<a href="../glib/glib-Basic-Types.html#gssize"><span class="returnvalue">gssize</span></a>              <a class="link" href="GSocket.html#g-socket-send" title="g_socket_send ()">g_socket_send</a>                       (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *buffer</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gsize"><span class="type">gsize</span></a> size</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);
<a href="../glib/glib-Basic-Types.html#gssize"><span class="returnvalue">gssize</span></a>              <a class="link" href="GSocket.html#g-socket-send-to" title="g_socket_send_to ()">g_socket_send_to</a>                    (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a> *address</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *buffer</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gsize"><span class="type">gsize</span></a> size</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);
<a href="../glib/glib-Basic-Types.html#gssize"><span class="returnvalue">gssize</span></a>              <a class="link" href="GSocket.html#g-socket-send-message" title="g_socket_send_message ()">g_socket_send_message</a>               (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a> *address</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocket.html#GOutputVector" title="struct GOutputVector"><span class="type">GOutputVector</span></a> *vectors</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a> num_vectors</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocketControlMessage.html" title="GSocketControlMessage"><span class="type">GSocketControlMessage</span></a> **messages</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a> num_messages</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);
<a href="../glib/glib-Basic-Types.html#gssize"><span class="returnvalue">gssize</span></a>              <a class="link" href="GSocket.html#g-socket-send-with-blocking" title="g_socket_send_with_blocking ()">g_socket_send_with_blocking</a>         (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *buffer</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gsize"><span class="type">gsize</span></a> size</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> blocking</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);
<a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            <a class="link" href="GSocket.html#g-socket-close" title="g_socket_close ()">g_socket_close</a>                      (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);
<a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            <a class="link" href="GSocket.html#g-socket-is-closed" title="g_socket_is_closed ()">g_socket_is_closed</a>                  (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);
<a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            <a class="link" href="GSocket.html#g-socket-shutdown" title="g_socket_shutdown ()">g_socket_shutdown</a>                   (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> shutdown_read</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> shutdown_write</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);
<a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            <a class="link" href="GSocket.html#g-socket-is-connected" title="g_socket_is_connected ()">g_socket_is_connected</a>               (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);
<a href="../glib/glib-The-Main-Event-Loop.html#GSource"><span class="returnvalue">GSource</span></a> *           <a class="link" href="GSocket.html#g-socket-create-source" title="g_socket_create_source ()">g_socket_create_source</a>              (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-IO-Channels.html#GIOCondition"><span class="type">GIOCondition</span></a> condition</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>);
<a href="../glib/glib-IO-Channels.html#GIOCondition"><span class="returnvalue">GIOCondition</span></a>        <a class="link" href="GSocket.html#g-socket-condition-check" title="g_socket_condition_check ()">g_socket_condition_check</a>            (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-IO-Channels.html#GIOCondition"><span class="type">GIOCondition</span></a> condition</code></em>);
<a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            <a class="link" href="GSocket.html#g-socket-condition-wait" title="g_socket_condition_wait ()">g_socket_condition_wait</a>             (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-IO-Channels.html#GIOCondition"><span class="type">GIOCondition</span></a> condition</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);
<a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            <a class="link" href="GSocket.html#g-socket-condition-timed-wait" title="g_socket_condition_timed_wait ()">g_socket_condition_timed_wait</a>       (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-IO-Channels.html#GIOCondition"><span class="type">GIOCondition</span></a> condition</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint64"><span class="type">gint64</span></a> timeout</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);
<a href="../glib/glib-Basic-Types.html#gssize"><span class="returnvalue">gssize</span></a>              <a class="link" href="GSocket.html#g-socket-get-available-bytes" title="g_socket_get_available_bytes ()">g_socket_get_available_bytes</a>        (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="GSocket.html#g-socket-set-listen-backlog" title="g_socket_set_listen_backlog ()">g_socket_set_listen_backlog</a>         (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a> backlog</code></em>);
<a href="../glib/glib-Basic-Types.html#gint"><span class="returnvalue">gint</span></a>                <a class="link" href="GSocket.html#g-socket-get-listen-backlog" title="g_socket_get_listen_backlog ()">g_socket_get_listen_backlog</a>         (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);
<a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            <a class="link" href="GSocket.html#g-socket-get-blocking" title="g_socket_get_blocking ()">g_socket_get_blocking</a>               (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="GSocket.html#g-socket-set-blocking" title="g_socket_set_blocking ()">g_socket_set_blocking</a>               (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> blocking</code></em>);
<a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            <a class="link" href="GSocket.html#g-socket-get-keepalive" title="g_socket_get_keepalive ()">g_socket_get_keepalive</a>              (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="GSocket.html#g-socket-set-keepalive" title="g_socket_set_keepalive ()">g_socket_set_keepalive</a>              (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> keepalive</code></em>);
<a href="../glib/glib-Basic-Types.html#guint"><span class="returnvalue">guint</span></a>               <a class="link" href="GSocket.html#g-socket-get-timeout" title="g_socket_get_timeout ()">g_socket_get_timeout</a>                (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="GSocket.html#g-socket-set-timeout" title="g_socket_set_timeout ()">g_socket_set_timeout</a>                (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> timeout</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="GSocket.html#g-socket-set-ttl" title="g_socket_set_ttl ()">g_socket_set_ttl</a>                    (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> ttl</code></em>);
<a href="../glib/glib-Basic-Types.html#guint"><span class="returnvalue">guint</span></a>               <a class="link" href="GSocket.html#g-socket-get-ttl" title="g_socket_get_ttl ()">g_socket_get_ttl</a>                    (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);
<a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            <a class="link" href="GSocket.html#g-socket-get-broadcast" title="g_socket_get_broadcast ()">g_socket_get_broadcast</a>              (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="GSocket.html#g-socket-set-broadcast" title="g_socket_set_broadcast ()">g_socket_set_broadcast</a>              (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> broadcast</code></em>);
<a class="link" href="GSocketAddress.html#GSocketFamily" title="enum GSocketFamily"><span class="returnvalue">GSocketFamily</span></a>       <a class="link" href="GSocket.html#g-socket-get-family" title="g_socket_get_family ()">g_socket_get_family</a>                 (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);
<span class="returnvalue">int</span>                 <a class="link" href="GSocket.html#g-socket-get-fd" title="g_socket_get_fd ()">g_socket_get_fd</a>                     (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);
<a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="returnvalue">GSocketAddress</span></a> *    <a class="link" href="GSocket.html#g-socket-get-local-address" title="g_socket_get_local_address ()">g_socket_get_local_address</a>          (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);
<a class="link" href="GSocket.html#GSocketProtocol" title="enum GSocketProtocol"><span class="returnvalue">GSocketProtocol</span></a>     <a class="link" href="GSocket.html#g-socket-get-protocol" title="g_socket_get_protocol ()">g_socket_get_protocol</a>               (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);
<a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="returnvalue">GSocketAddress</span></a> *    <a class="link" href="GSocket.html#g-socket-get-remote-address" title="g_socket_get_remote_address ()">g_socket_get_remote_address</a>         (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);
<a class="link" href="GSocket.html#GSocketType" title="enum GSocketType"><span class="returnvalue">GSocketType</span></a>         <a class="link" href="GSocket.html#g-socket-get-socket-type" title="g_socket_get_socket_type ()">g_socket_get_socket_type</a>            (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);
<a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            <a class="link" href="GSocket.html#g-socket-speaks-ipv4" title="g_socket_speaks_ipv4 ()">g_socket_speaks_ipv4</a>                (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);
<a class="link" href="GCredentials.html" title="GCredentials"><span class="returnvalue">GCredentials</span></a> *      <a class="link" href="GSocket.html#g-socket-get-credentials" title="g_socket_get_credentials ()">g_socket_get_credentials</a>            (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);

<a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            <a class="link" href="GSocket.html#g-socket-join-multicast-group" title="g_socket_join_multicast_group ()">g_socket_join_multicast_group</a>       (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GInetAddress.html" title="GInetAddress"><span class="type">GInetAddress</span></a> *group</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> source_specific</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *iface</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);
<a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            <a class="link" href="GSocket.html#g-socket-leave-multicast-group" title="g_socket_leave_multicast_group ()">g_socket_leave_multicast_group</a>      (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GInetAddress.html" title="GInetAddress"><span class="type">GInetAddress</span></a> *group</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> source_specific</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *iface</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);
<a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            <a class="link" href="GSocket.html#g-socket-get-multicast-loopback" title="g_socket_get_multicast_loopback ()">g_socket_get_multicast_loopback</a>     (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="GSocket.html#g-socket-set-multicast-loopback" title="g_socket_set_multicast_loopback ()">g_socket_set_multicast_loopback</a>     (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> loopback</code></em>);
<a href="../glib/glib-Basic-Types.html#guint"><span class="returnvalue">guint</span></a>               <a class="link" href="GSocket.html#g-socket-get-multicast-ttl" title="g_socket_get_multicast_ttl ()">g_socket_get_multicast_ttl</a>          (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="GSocket.html#g-socket-set-multicast-ttl" title="g_socket_set_multicast_ttl ()">g_socket_set_multicast_ttl</a>          (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> ttl</code></em>);
</pre>
</div>
<div class="refsect1">
<a name="GSocket.object-hierarchy"></a><h2>Object Hierarchy</h2>
<pre class="synopsis">
  <a href="../gobject/gobject-The-Base-Object-Type.html#GObject">GObject</a>
   +----GSocket
</pre>
</div>
<div class="refsect1">
<a name="GSocket.implemented-interfaces"></a><h2>Implemented Interfaces</h2>
<p>
GSocket implements
 <a class="link" href="GInitable.html" title="GInitable">GInitable</a>.</p>
</div>
<div class="refsect1">
<a name="GSocket.properties"></a><h2>Properties</h2>
<pre class="synopsis">
  "<a class="link" href="GSocket.html#GSocket--blocking" title='The "blocking" property'>blocking</a>"                 <a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a>              : Read / Write
  "<a class="link" href="GSocket.html#GSocket--broadcast" title='The "broadcast" property'>broadcast</a>"                <a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a>              : Read / Write
  "<a class="link" href="GSocket.html#GSocket--family" title='The "family" property'>family</a>"                   <a class="link" href="GSocketAddress.html#GSocketFamily" title="enum GSocketFamily"><span class="type">GSocketFamily</span></a>         : Read / Write / Construct Only
  "<a class="link" href="GSocket.html#GSocket--fd" title='The "fd" property'>fd</a>"                       <a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a>                  : Read / Write / Construct Only
  "<a class="link" href="GSocket.html#GSocket--keepalive" title='The "keepalive" property'>keepalive</a>"                <a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a>              : Read / Write
  "<a class="link" href="GSocket.html#GSocket--listen-backlog" title='The "listen-backlog" property'>listen-backlog</a>"           <a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a>                  : Read / Write
  "<a class="link" href="GSocket.html#GSocket--local-address" title='The "local-address" property'>local-address</a>"            <a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a>*       : Read
  "<a class="link" href="GSocket.html#GSocket--multicast-loopback" title='The "multicast-loopback" property'>multicast-loopback</a>"       <a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a>              : Read / Write
  "<a class="link" href="GSocket.html#GSocket--multicast-ttl" title='The "multicast-ttl" property'>multicast-ttl</a>"            <a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a>                 : Read / Write
  "<a class="link" href="GSocket.html#GSocket--protocol" title='The "protocol" property'>protocol</a>"                 <a class="link" href="GSocket.html#GSocketProtocol" title="enum GSocketProtocol"><span class="type">GSocketProtocol</span></a>       : Read / Write / Construct Only
  "<a class="link" href="GSocket.html#GSocket--remote-address" title='The "remote-address" property'>remote-address</a>"           <a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a>*       : Read
  "<a class="link" href="GSocket.html#GSocket--timeout" title='The "timeout" property'>timeout</a>"                  <a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a>                 : Read / Write
  "<a class="link" href="GSocket.html#GSocket--ttl" title='The "ttl" property'>ttl</a>"                      <a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a>                 : Read / Write
  "<a class="link" href="GSocket.html#GSocket--type" title='The "type" property'>type</a>"                     <a class="link" href="GSocket.html#GSocketType" title="enum GSocketType"><span class="type">GSocketType</span></a>           : Read / Write / Construct Only
</pre>
</div>
<div class="refsect1">
<a name="GSocket.description"></a><h2>Description</h2>
<p>
A <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> is a low-level networking primitive. It is a more or less
direct mapping of the BSD socket API in a portable GObject based API.
It supports both the UNIX socket implementations and winsock2 on Windows.
</p>
<p>
<a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> is the platform independent base upon which the higher level
network primitives are based. Applications are not typically meant to
use it directly, but rather through classes like <a class="link" href="GSocketClient.html" title="GSocketClient"><span class="type">GSocketClient</span></a>,
<a class="link" href="GSocketService.html" title="GSocketService"><span class="type">GSocketService</span></a> and <a class="link" href="GSocketConnection.html" title="GSocketConnection"><span class="type">GSocketConnection</span></a>. However there may be cases where
direct use of <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> is useful.
</p>
<p>
<a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> implements the <a class="link" href="GInitable.html" title="GInitable"><span class="type">GInitable</span></a> interface, so if it is manually constructed
by e.g. <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-new"><code class="function">g_object_new()</code></a> you must call <a class="link" href="GInitable.html#g-initable-init" title="g_initable_init ()"><code class="function">g_initable_init()</code></a> and check the
results before using the object. This is done automatically in
<a class="link" href="GSocket.html#g-socket-new" title="g_socket_new ()"><code class="function">g_socket_new()</code></a> and <a class="link" href="GSocket.html#g-socket-new-from-fd" title="g_socket_new_from_fd ()"><code class="function">g_socket_new_from_fd()</code></a>, so these functions can return
<a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>.
</p>
<p>
Sockets operate in two general modes, blocking or non-blocking. When
in blocking mode all operations block until the requested operation
is finished or there is an error. In non-blocking mode all calls that
would block return immediately with a <a class="link" href="gio-GIOError.html#G-IO-ERROR-WOULD-BLOCK:CAPS"><code class="literal">G_IO_ERROR_WOULD_BLOCK</code></a> error.
To know when a call would successfully run you can call <a class="link" href="GSocket.html#g-socket-condition-check" title="g_socket_condition_check ()"><code class="function">g_socket_condition_check()</code></a>,
or <a class="link" href="GSocket.html#g-socket-condition-wait" title="g_socket_condition_wait ()"><code class="function">g_socket_condition_wait()</code></a>. You can also use <a class="link" href="GSocket.html#g-socket-create-source" title="g_socket_create_source ()"><code class="function">g_socket_create_source()</code></a> and
attach it to a <a href="../glib/glib-The-Main-Event-Loop.html#GMainContext"><span class="type">GMainContext</span></a> to get callbacks when I/O is possible.
Note that all sockets are always set to non blocking mode in the system, and
blocking mode is emulated in GSocket.
</p>
<p>
When working in non-blocking mode applications should always be able to
handle getting a <a class="link" href="gio-GIOError.html#G-IO-ERROR-WOULD-BLOCK:CAPS"><code class="literal">G_IO_ERROR_WOULD_BLOCK</code></a> error even when some other
function said that I/O was possible. This can easily happen in case
of a race condition in the application, but it can also happen for other
reasons. For instance, on Windows a socket is always seen as writable
until a write returns <a class="link" href="gio-GIOError.html#G-IO-ERROR-WOULD-BLOCK:CAPS"><code class="literal">G_IO_ERROR_WOULD_BLOCK</code></a>.
</p>
<p>
<a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>s can be either connection oriented or datagram based.
For connection oriented types you must first establish a connection by
either connecting to an address or accepting a connection from another
address. For connectionless socket types the target/source address is
specified or received in each I/O operation.
</p>
<p>
All socket file descriptors are set to be close-on-exec.
</p>
<p>
Note that creating a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> causes the signal <code class="literal">SIGPIPE</code> to be
ignored for the remainder of the program. If you are writing a
command-line utility that uses <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>, you may need to take into
account the fact that your program will not automatically be killed
if it tries to write to <code class="literal">stdout</code> after it has been closed.
</p>
</div>
<div class="refsect1">
<a name="GSocket.details"></a><h2>Details</h2>
<div class="refsect2">
<a name="GSocket-struct"></a><h3>GSocket</h3>
<pre class="programlisting">typedef struct _GSocket GSocket;</pre>
<p>
A lowlevel network socket object.
</p>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="GSocketSourceFunc"></a><h3>GSocketSourceFunc ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            (*GSocketSourceFunc)                (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-IO-Channels.html#GIOCondition"><span class="type">GIOCondition</span></a> condition</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> user_data</code></em>);</pre>
<p>
This is the function type of the callback used for the <a href="../glib/glib-The-Main-Event-Loop.html#GSource"><span class="type">GSource</span></a>
returned by <a class="link" href="GSocket.html#g-socket-create-source" title="g_socket_create_source ()"><code class="function">g_socket_create_source()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>the <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>condition</code></em> :</span></p></td>
<td>the current condition at the source fired.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>user_data</code></em> :</span></p></td>
<td>data passed in by the user.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>it should return <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> if the source should be removed.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="GSocketType"></a><h3>enum GSocketType</h3>
<pre class="programlisting">typedef enum {
  G_SOCKET_TYPE_INVALID,
  G_SOCKET_TYPE_STREAM,
  G_SOCKET_TYPE_DATAGRAM,
  G_SOCKET_TYPE_SEQPACKET
} GSocketType;
</pre>
<p>
Flags used when creating a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>. Some protocols may not implement
all the socket types.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><a name="G-SOCKET-TYPE-INVALID:CAPS"></a><span class="term"><code class="literal">G_SOCKET_TYPE_INVALID</code></span></p></td>
<td>Type unknown or wrong
</td>
</tr>
<tr>
<td><p><a name="G-SOCKET-TYPE-STREAM:CAPS"></a><span class="term"><code class="literal">G_SOCKET_TYPE_STREAM</code></span></p></td>
<td>Reliable connection-based byte streams (e.g. TCP).
</td>
</tr>
<tr>
<td><p><a name="G-SOCKET-TYPE-DATAGRAM:CAPS"></a><span class="term"><code class="literal">G_SOCKET_TYPE_DATAGRAM</code></span></p></td>
<td>Connectionless, unreliable datagram passing.
    (e.g. UDP)
</td>
</tr>
<tr>
<td><p><a name="G-SOCKET-TYPE-SEQPACKET:CAPS"></a><span class="term"><code class="literal">G_SOCKET_TYPE_SEQPACKET</code></span></p></td>
<td>Reliable connection-based passing of datagrams
    of fixed maximum length (e.g. SCTP).
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="GSocketProtocol"></a><h3>enum GSocketProtocol</h3>
<pre class="programlisting">typedef enum {
  G_SOCKET_PROTOCOL_UNKNOWN = -1,
  G_SOCKET_PROTOCOL_DEFAULT = 0,
  G_SOCKET_PROTOCOL_TCP     = 6,
  G_SOCKET_PROTOCOL_UDP     = 17,
  G_SOCKET_PROTOCOL_SCTP    = 132
} GSocketProtocol;
</pre>
<p>
A protocol identifier is specified when creating a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>, which is a
family/type specific identifier, where 0 means the default protocol for
the particular family/type.
</p>
<p>
This enum contains a set of commonly available and used protocols. You
can also pass any other identifiers handled by the platform in order to
use protocols not listed here.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><a name="G-SOCKET-PROTOCOL-UNKNOWN:CAPS"></a><span class="term"><code class="literal">G_SOCKET_PROTOCOL_UNKNOWN</code></span></p></td>
<td>The protocol type is unknown
</td>
</tr>
<tr>
<td><p><a name="G-SOCKET-PROTOCOL-DEFAULT:CAPS"></a><span class="term"><code class="literal">G_SOCKET_PROTOCOL_DEFAULT</code></span></p></td>
<td>The default protocol for the family/type
</td>
</tr>
<tr>
<td><p><a name="G-SOCKET-PROTOCOL-TCP:CAPS"></a><span class="term"><code class="literal">G_SOCKET_PROTOCOL_TCP</code></span></p></td>
<td>TCP over IP
</td>
</tr>
<tr>
<td><p><a name="G-SOCKET-PROTOCOL-UDP:CAPS"></a><span class="term"><code class="literal">G_SOCKET_PROTOCOL_UDP</code></span></p></td>
<td>UDP over IP
</td>
</tr>
<tr>
<td><p><a name="G-SOCKET-PROTOCOL-SCTP:CAPS"></a><span class="term"><code class="literal">G_SOCKET_PROTOCOL_SCTP</code></span></p></td>
<td>SCTP over IP
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="GSocketMsgFlags"></a><h3>enum GSocketMsgFlags</h3>
<pre class="programlisting">typedef enum {
  G_SOCKET_MSG_NONE,
  G_SOCKET_MSG_OOB = GLIB_SYSDEF_MSG_OOB,
  G_SOCKET_MSG_PEEK = GLIB_SYSDEF_MSG_PEEK,
  G_SOCKET_MSG_DONTROUTE = GLIB_SYSDEF_MSG_DONTROUTE
} GSocketMsgFlags;
</pre>
<p>
Flags used in <a class="link" href="GSocket.html#g-socket-receive-message" title="g_socket_receive_message ()"><code class="function">g_socket_receive_message()</code></a> and <a class="link" href="GSocket.html#g-socket-send-message" title="g_socket_send_message ()"><code class="function">g_socket_send_message()</code></a>.
The flags listed in the enum are some commonly available flags, but the
values used for them are the same as on the platform, and any other flags
are passed in/out as is. So to use a platform specific flag, just include
the right system header and pass in the flag.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><a name="G-SOCKET-MSG-NONE:CAPS"></a><span class="term"><code class="literal">G_SOCKET_MSG_NONE</code></span></p></td>
<td>No flags.
</td>
</tr>
<tr>
<td><p><a name="G-SOCKET-MSG-OOB:CAPS"></a><span class="term"><code class="literal">G_SOCKET_MSG_OOB</code></span></p></td>
<td>Request to send/receive out of band data.
</td>
</tr>
<tr>
<td><p><a name="G-SOCKET-MSG-PEEK:CAPS"></a><span class="term"><code class="literal">G_SOCKET_MSG_PEEK</code></span></p></td>
<td>Read data from the socket without removing it from
    the queue.
</td>
</tr>
<tr>
<td><p><a name="G-SOCKET-MSG-DONTROUTE:CAPS"></a><span class="term"><code class="literal">G_SOCKET_MSG_DONTROUTE</code></span></p></td>
<td>Don't use a gateway to send out the packet,
    only send to hosts on directly connected networks.
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="GInputVector"></a><h3>struct GInputVector</h3>
<pre class="programlisting">struct GInputVector {
  gpointer buffer;
  gsize size;
};
</pre>
<p>
Structure used for scatter/gather data input.
You generally pass in an array of <a class="link" href="GSocket.html#GInputVector" title="struct GInputVector"><span class="type">GInputVector</span></a>s
and the operation will store the read data starting in the
first buffer, switching to the next as needed.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> <em class="structfield"><code><a name="GInputVector.buffer"></a>buffer</code></em>;</span></p></td>
<td>Pointer to a buffer where data will be written.</td>
</tr>
<tr>
<td><p><span class="term"><a href="../glib/glib-Basic-Types.html#gsize"><span class="type">gsize</span></a> <em class="structfield"><code><a name="GInputVector.size"></a>size</code></em>;</span></p></td>
<td>the available size in <em class="parameter"><code>buffer</code></em>.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="GOutputVector"></a><h3>struct GOutputVector</h3>
<pre class="programlisting">struct GOutputVector {
  gconstpointer buffer;
  gsize size;
};
</pre>
<p>
Structure used for scatter/gather data output.
You generally pass in an array of <a class="link" href="GSocket.html#GOutputVector" title="struct GOutputVector"><span class="type">GOutputVector</span></a>s
and the operation will use all the buffers as if they were
one buffer.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><a href="../glib/glib-Basic-Types.html#gconstpointer"><span class="type">gconstpointer</span></a> <em class="structfield"><code><a name="GOutputVector.buffer"></a>buffer</code></em>;</span></p></td>
<td>Pointer to a buffer of data to read.</td>
</tr>
<tr>
<td><p><span class="term"><a href="../glib/glib-Basic-Types.html#gsize"><span class="type">gsize</span></a> <em class="structfield"><code><a name="GOutputVector.size"></a>size</code></em>;</span></p></td>
<td>the size of <em class="parameter"><code>buffer</code></em>.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-new"></a><h3>g_socket_new ()</h3>
<pre class="programlisting"><a class="link" href="GSocket.html" title="GSocket"><span class="returnvalue">GSocket</span></a> *           g_socket_new                        (<em class="parameter"><code><a class="link" href="GSocketAddress.html#GSocketFamily" title="enum GSocketFamily"><span class="type">GSocketFamily</span></a> family</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocket.html#GSocketType" title="enum GSocketType"><span class="type">GSocketType</span></a> type</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocket.html#GSocketProtocol" title="enum GSocketProtocol"><span class="type">GSocketProtocol</span></a> protocol</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Creates a new <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> with the defined family, type and protocol.
If <em class="parameter"><code>protocol</code></em> is 0 (<a class="link" href="GSocket.html#G-SOCKET-PROTOCOL-DEFAULT:CAPS"><code class="literal">G_SOCKET_PROTOCOL_DEFAULT</code></a>) the default protocol type
for the family and type is used.
</p>
<p>
The <em class="parameter"><code>protocol</code></em> is a family and type specific int that specifies what
kind of protocol to use. <a class="link" href="GSocket.html#GSocketProtocol" title="enum GSocketProtocol"><span class="type">GSocketProtocol</span></a> lists several common ones.
Many families only support one protocol, and use 0 for this, others
support several and using 0 means to use the default protocol for
the family and type.
</p>
<p>
The protocol id is passed directly to the operating
system, so you can use protocols not listed in <a class="link" href="GSocket.html#GSocketProtocol" title="enum GSocketProtocol"><span class="type">GSocketProtocol</span></a> if you
know the protocol number used for it.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>family</code></em> :</span></p></td>
<td>the socket family to use, e.g. <a class="link" href="GSocketAddress.html#G-SOCKET-FAMILY-IPV4:CAPS"><code class="literal">G_SOCKET_FAMILY_IPV4</code></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>the socket type to use.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>protocol</code></em> :</span></p></td>
<td>the id of the protocol to use, or 0 for default.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> for error reporting, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-new-from-fd"></a><h3>g_socket_new_from_fd ()</h3>
<pre class="programlisting"><a class="link" href="GSocket.html" title="GSocket"><span class="returnvalue">GSocket</span></a> *           g_socket_new_from_fd                (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a> fd</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Creates a new <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> from a native file descriptor
or winsock SOCKET handle.
</p>
<p>
This reads all the settings from the file descriptor so that
all properties should work. Note that the file descriptor
will be set to non-blocking mode, independent on the blocking
mode of the <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>fd</code></em> :</span></p></td>
<td>a native socket file descriptor.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> for error reporting, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-bind"></a><h3>g_socket_bind ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_socket_bind                       (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a> *address</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> allow_reuse</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
When a socket is created it is attached to an address family, but it
doesn't have an address in this family. <a class="link" href="GSocket.html#g-socket-bind" title="g_socket_bind ()"><code class="function">g_socket_bind()</code></a> assigns the
address (sometimes called name) of the socket.
</p>
<p>
It is generally required to bind to a local address before you can
receive connections. (See <a class="link" href="GSocket.html#g-socket-listen" title="g_socket_listen ()"><code class="function">g_socket_listen()</code></a> and <a class="link" href="GSocket.html#g-socket-accept" title="g_socket_accept ()"><code class="function">g_socket_accept()</code></a> ).
In certain situations, you may also want to bind a socket that will be
used to initiate connections, though this is not normally required.
</p>
<p>
<em class="parameter"><code>allow_reuse</code></em> should be <a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> for server sockets (sockets that you will
eventually call <a class="link" href="GSocket.html#g-socket-accept" title="g_socket_accept ()"><code class="function">g_socket_accept()</code></a> on), and <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> for client sockets.
(Specifically, if it is <a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a>, then <a class="link" href="GSocket.html#g-socket-bind" title="g_socket_bind ()"><code class="function">g_socket_bind()</code></a> will set the
<code class="literal">SO_REUSEADDR</code> flag on the socket, allowing it to bind <em class="parameter"><code>address</code></em> even if
that address was previously used by another socket that has not yet been
fully cleaned-up by the kernel. Failing to set this flag on a server
socket may cause the bind call to return <a class="link" href="gio-GIOError.html#G-IO-ERROR-ADDRESS-IN-USE:CAPS"><code class="literal">G_IO_ERROR_ADDRESS_IN_USE</code></a> if
the server program is stopped and then immediately restarted.)
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>address</code></em> :</span></p></td>
<td>a <a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a> specifying the local address.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>allow_reuse</code></em> :</span></p></td>
<td>whether to allow reusing this address</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> for error reporting, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> on error.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-listen"></a><h3>g_socket_listen ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_socket_listen                     (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Marks the socket as a server socket, i.e. a socket that is used
to accept incoming requests using <a class="link" href="GSocket.html#g-socket-accept" title="g_socket_accept ()"><code class="function">g_socket_accept()</code></a>.
</p>
<p>
Before calling this the socket must be bound to a local address using
<a class="link" href="GSocket.html#g-socket-bind" title="g_socket_bind ()"><code class="function">g_socket_bind()</code></a>.
</p>
<p>
To set the maximum amount of outstanding clients, use
<a class="link" href="GSocket.html#g-socket-set-listen-backlog" title="g_socket_set_listen_backlog ()"><code class="function">g_socket_set_listen_backlog()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> for error reporting, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> on error.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-accept"></a><h3>g_socket_accept ()</h3>
<pre class="programlisting"><a class="link" href="GSocket.html" title="GSocket"><span class="returnvalue">GSocket</span></a> *           g_socket_accept                     (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Accept incoming connections on a connection-based socket. This removes
the first outstanding connection request from the listening socket and
creates a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> object for it.
</p>
<p>
The <em class="parameter"><code>socket</code></em> must be bound to a local address with <a class="link" href="GSocket.html#g-socket-bind" title="g_socket_bind ()"><code class="function">g_socket_bind()</code></a> and
must be listening for incoming connections (<a class="link" href="GSocket.html#g-socket-listen" title="g_socket_listen ()"><code class="function">g_socket_listen()</code></a>).
</p>
<p>
If there are no outstanding connections then the operation will block
or return <a class="link" href="gio-GIOError.html#G-IO-ERROR-WOULD-BLOCK:CAPS"><code class="literal">G_IO_ERROR_WOULD_BLOCK</code></a> if non-blocking I/O is enabled.
To be notified of an incoming connection, wait for the <a href="../glib/glib-IO-Channels.html#G-IO-IN:CAPS"><code class="literal">G_IO_IN</code></a> condition.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>a <a class="link" href="GCancellable.html" title="GCancellable"><code class="literal">GCancellable</code></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> for error reporting, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a new <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-connect"></a><h3>g_socket_connect ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_socket_connect                    (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a> *address</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Connect the socket to the specified remote address.
</p>
<p>
For connection oriented socket this generally means we attempt to make
a connection to the <em class="parameter"><code>address</code></em>. For a connection-less socket it sets
the default address for <a class="link" href="GSocket.html#g-socket-send" title="g_socket_send ()"><code class="function">g_socket_send()</code></a> and discards all incoming datagrams
from other sources.
</p>
<p>
Generally connection oriented sockets can only connect once, but
connection-less sockets can connect multiple times to change the
default address.
</p>
<p>
If the connect call needs to do network I/O it will block, unless
non-blocking I/O is enabled. Then <a class="link" href="gio-GIOError.html#G-IO-ERROR-PENDING:CAPS"><code class="literal">G_IO_ERROR_PENDING</code></a> is returned
and the user can be notified of the connection finishing by waiting
for the G_IO_OUT condition. The result of the connection must then be
checked with <a class="link" href="GSocket.html#g-socket-check-connect-result" title="g_socket_check_connect_result ()"><code class="function">g_socket_check_connect_result()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>address</code></em> :</span></p></td>
<td>a <a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a> specifying the remote address.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>a <a class="link" href="GCancellable.html" title="GCancellable"><code class="literal">GCancellable</code></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> for error reporting, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if connected, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> on error.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-check-connect-result"></a><h3>g_socket_check_connect_result ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_socket_check_connect_result       (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Checks and resets the pending connect error for the socket.
This is used to check for errors when <a class="link" href="GSocket.html#g-socket-connect" title="g_socket_connect ()"><code class="function">g_socket_connect()</code></a> is
used in non-blocking mode.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> for error reporting, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if no error, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise, setting <em class="parameter"><code>error</code></em> to the error</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-receive"></a><h3>g_socket_receive ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gssize"><span class="returnvalue">gssize</span></a>              g_socket_receive                    (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *buffer</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gsize"><span class="type">gsize</span></a> size</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Receive data (up to <em class="parameter"><code>size</code></em> bytes) from a socket. This is mainly used by
connection-oriented sockets; it is identical to <a class="link" href="GSocket.html#g-socket-receive-from" title="g_socket_receive_from ()"><code class="function">g_socket_receive_from()</code></a>
with <em class="parameter"><code>address</code></em> set to <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>.
</p>
<p>
For <a class="link" href="GSocket.html#G-SOCKET-TYPE-DATAGRAM:CAPS"><code class="literal">G_SOCKET_TYPE_DATAGRAM</code></a> and <a class="link" href="GSocket.html#G-SOCKET-TYPE-SEQPACKET:CAPS"><code class="literal">G_SOCKET_TYPE_SEQPACKET</code></a> sockets,
<a class="link" href="GSocket.html#g-socket-receive" title="g_socket_receive ()"><code class="function">g_socket_receive()</code></a> will always read either 0 or 1 complete messages from
the socket. If the received message is too large to fit in <em class="parameter"><code>buffer</code></em>, then
the data beyond <em class="parameter"><code>size</code></em> bytes will be discarded, without any explicit
indication that this has occurred.
</p>
<p>
For <a class="link" href="GSocket.html#G-SOCKET-TYPE-STREAM:CAPS"><code class="literal">G_SOCKET_TYPE_STREAM</code></a> sockets, <a class="link" href="GSocket.html#g-socket-receive" title="g_socket_receive ()"><code class="function">g_socket_receive()</code></a> can return any
number of bytes, up to <em class="parameter"><code>size</code></em>. If more than <em class="parameter"><code>size</code></em> bytes have been
received, the additional data will be returned in future calls to
<a class="link" href="GSocket.html#g-socket-receive" title="g_socket_receive ()"><code class="function">g_socket_receive()</code></a>.
</p>
<p>
If the socket is in blocking mode the call will block until there
is some data to receive, the connection is closed, or there is an
error. If there is no data available and the socket is in
non-blocking mode, a <a class="link" href="gio-GIOError.html#G-IO-ERROR-WOULD-BLOCK:CAPS"><code class="literal">G_IO_ERROR_WOULD_BLOCK</code></a> error will be
returned. To be notified when data is available, wait for the
<a href="../glib/glib-IO-Channels.html#G-IO-IN:CAPS"><code class="literal">G_IO_IN</code></a> condition.
</p>
<p>
On error -1 is returned and <em class="parameter"><code>error</code></em> is set accordingly.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>buffer</code></em> :</span></p></td>
<td>a buffer to read data into (which should be at least <em class="parameter"><code>size</code></em>
bytes long).</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>size</code></em> :</span></p></td>
<td>the number of bytes you want to read from the socket</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>a <a class="link" href="GCancellable.html" title="GCancellable"><code class="literal">GCancellable</code></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> for error reporting, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>Number of bytes read, or 0 if the connection was closed by
the peer, or -1 on error</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-receive-from"></a><h3>g_socket_receive_from ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gssize"><span class="returnvalue">gssize</span></a>              g_socket_receive_from               (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a> **address</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *buffer</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gsize"><span class="type">gsize</span></a> size</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Receive data (up to <em class="parameter"><code>size</code></em> bytes) from a socket.
</p>
<p>
If <em class="parameter"><code>address</code></em> is non-<a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> then <em class="parameter"><code>address</code></em> will be set equal to the
source address of the received packet.
<em class="parameter"><code>address</code></em> is owned by the caller.
</p>
<p>
See <a class="link" href="GSocket.html#g-socket-receive" title="g_socket_receive ()"><code class="function">g_socket_receive()</code></a> for additional information.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>address</code></em> :</span></p></td>
<td>a pointer to a <a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a>
pointer, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="Parameter for returning results. Default is transfer full."><span class="acronym">out</span></acronym>][<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>buffer</code></em> :</span></p></td>
<td>a buffer to
read data into (which should be at least <em class="parameter"><code>size</code></em> bytes long). <span class="annotation">[<acronym title="Parameter points to an array of items."><span class="acronym">array</span></acronym> length=size][<acronym title="Generics and defining elements of containers and arrays."><span class="acronym">element-type</span></acronym> guint8]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>size</code></em> :</span></p></td>
<td>the number of bytes you want to read from the socket</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>a <a class="link" href="GCancellable.html" title="GCancellable"><code class="literal">GCancellable</code></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> for error reporting, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>Number of bytes read, or 0 if the connection was closed by
the peer, or -1 on error</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-receive-message"></a><h3>g_socket_receive_message ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gssize"><span class="returnvalue">gssize</span></a>              g_socket_receive_message            (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a> **address</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocket.html#GInputVector" title="struct GInputVector"><span class="type">GInputVector</span></a> *vectors</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a> num_vectors</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocketControlMessage.html" title="GSocketControlMessage"><span class="type">GSocketControlMessage</span></a> ***messages</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a> *num_messages</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a> *flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Receive data from a socket.  This is the most complicated and
fully-featured version of this call. For easier use, see
<a class="link" href="GSocket.html#g-socket-receive" title="g_socket_receive ()"><code class="function">g_socket_receive()</code></a> and <a class="link" href="GSocket.html#g-socket-receive-from" title="g_socket_receive_from ()"><code class="function">g_socket_receive_from()</code></a>.
</p>
<p>
If <em class="parameter"><code>address</code></em> is non-<a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> then <em class="parameter"><code>address</code></em> will be set equal to the
source address of the received packet.
<em class="parameter"><code>address</code></em> is owned by the caller.
</p>
<p>
<em class="parameter"><code>vector</code></em> must point to an array of <a class="link" href="GSocket.html#GInputVector" title="struct GInputVector"><span class="type">GInputVector</span></a> structs and
<em class="parameter"><code>num_vectors</code></em> must be the length of this array.  These structs
describe the buffers that received data will be scattered into.
If <em class="parameter"><code>num_vectors</code></em> is -1, then <em class="parameter"><code>vectors</code></em> is assumed to be terminated
by a <a class="link" href="GSocket.html#GInputVector" title="struct GInputVector"><span class="type">GInputVector</span></a> with a <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> buffer pointer.
</p>
<p>
As a special case, if <em class="parameter"><code>num_vectors</code></em> is 0 (in which case, <em class="parameter"><code>vectors</code></em>
may of course be <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>), then a single byte is received and
discarded. This is to facilitate the common practice of sending a
single '\0' byte for the purposes of transferring ancillary data.
</p>
<p>
<em class="parameter"><code>messages</code></em>, if non-<a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, will be set to point to a newly-allocated
array of <a class="link" href="GSocketControlMessage.html" title="GSocketControlMessage"><span class="type">GSocketControlMessage</span></a> instances or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if no such
messages was received. These correspond to the control messages
received from the kernel, one <a class="link" href="GSocketControlMessage.html" title="GSocketControlMessage"><span class="type">GSocketControlMessage</span></a> per message
from the kernel. This array is <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>-terminated and must be freed
by the caller using <a href="../glib/glib-Memory-Allocation.html#g-free"><code class="function">g_free()</code></a> after calling <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a> on each
element. If <em class="parameter"><code>messages</code></em> is <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, any control messages received will
be discarded.
</p>
<p>
<em class="parameter"><code>num_messages</code></em>, if non-<a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, will be set to the number of control
messages received.
</p>
<p>
If both <em class="parameter"><code>messages</code></em> and <em class="parameter"><code>num_messages</code></em> are non-<a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, then
<em class="parameter"><code>num_messages</code></em> gives the number of <a class="link" href="GSocketControlMessage.html" title="GSocketControlMessage"><span class="type">GSocketControlMessage</span></a> instances
in <em class="parameter"><code>messages</code></em> (ie: not including the <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> terminator).
</p>
<p>
<em class="parameter"><code>flags</code></em> is an in/out parameter. The commonly available arguments
for this are available in the <a class="link" href="GSocket.html#GSocketMsgFlags" title="enum GSocketMsgFlags"><span class="type">GSocketMsgFlags</span></a> enum, but the
values there are the same as the system values, and the flags
are passed in as-is, so you can pass in system-specific flags too
(and <a class="link" href="GSocket.html#g-socket-receive-message" title="g_socket_receive_message ()"><code class="function">g_socket_receive_message()</code></a> may pass system-specific flags out).
</p>
<p>
As with <a class="link" href="GSocket.html#g-socket-receive" title="g_socket_receive ()"><code class="function">g_socket_receive()</code></a>, data may be discarded if <em class="parameter"><code>socket</code></em> is
<a class="link" href="GSocket.html#G-SOCKET-TYPE-DATAGRAM:CAPS"><code class="literal">G_SOCKET_TYPE_DATAGRAM</code></a> or <a class="link" href="GSocket.html#G-SOCKET-TYPE-SEQPACKET:CAPS"><code class="literal">G_SOCKET_TYPE_SEQPACKET</code></a> and you do not
provide enough buffer space to read a complete message. You can pass
<a class="link" href="GSocket.html#G-SOCKET-MSG-PEEK:CAPS"><code class="literal">G_SOCKET_MSG_PEEK</code></a> in <em class="parameter"><code>flags</code></em> to peek at the current message without
removing it from the receive queue, but there is no portable way to find
out the length of the message other than by reading it into a
sufficiently-large buffer.
</p>
<p>
If the socket is in blocking mode the call will block until there
is some data to receive, the connection is closed, or there is an
error. If there is no data available and the socket is in
non-blocking mode, a <a class="link" href="gio-GIOError.html#G-IO-ERROR-WOULD-BLOCK:CAPS"><code class="literal">G_IO_ERROR_WOULD_BLOCK</code></a> error will be
returned. To be notified when data is available, wait for the
<a href="../glib/glib-IO-Channels.html#G-IO-IN:CAPS"><code class="literal">G_IO_IN</code></a> condition.
</p>
<p>
On error -1 is returned and <em class="parameter"><code>error</code></em> is set accordingly.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>address</code></em> :</span></p></td>
<td>a pointer to a <a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a>
pointer, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="Parameter for returning results. Default is transfer full."><span class="acronym">out</span></acronym>][<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>vectors</code></em> :</span></p></td>
<td>an array of <a class="link" href="GSocket.html#GInputVector" title="struct GInputVector"><span class="type">GInputVector</span></a> structs. <span class="annotation">[<acronym title="Parameter points to an array of items."><span class="acronym">array</span></acronym> length=num_vectors]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>num_vectors</code></em> :</span></p></td>
<td>the number of elements in <em class="parameter"><code>vectors</code></em>, or -1</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>messages</code></em> :</span></p></td>
<td>a pointer which
may be filled with an array of <a href="GSocketControlMessage.html"><span class="type">GSocketControlMessages</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="Parameter points to an array of items."><span class="acronym">array</span></acronym> length=num_messages][<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>num_messages</code></em> :</span></p></td>
<td>a pointer which will be filled with the number of
elements in <em class="parameter"><code>messages</code></em>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>a pointer to an int containing <a class="link" href="GSocket.html#GSocketMsgFlags" title="enum GSocketMsgFlags"><span class="type">GSocketMsgFlags</span></a> flags</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>a <a class="link" href="GCancellable.html" title="GCancellable"><code class="literal">GCancellable</code></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> pointer, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>Number of bytes read, or 0 if the connection was closed by
the peer, or -1 on error</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-receive-with-blocking"></a><h3>g_socket_receive_with_blocking ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gssize"><span class="returnvalue">gssize</span></a>              g_socket_receive_with_blocking      (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *buffer</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gsize"><span class="type">gsize</span></a> size</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> blocking</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
This behaves exactly the same as <a class="link" href="GSocket.html#g-socket-receive" title="g_socket_receive ()"><code class="function">g_socket_receive()</code></a>, except that
the choice of blocking or non-blocking behavior is determined by
the <em class="parameter"><code>blocking</code></em> argument rather than by <em class="parameter"><code>socket</code></em>'s properties.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>buffer</code></em> :</span></p></td>
<td>a buffer to read data into (which should be at least <em class="parameter"><code>size</code></em>
bytes long).</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>size</code></em> :</span></p></td>
<td>the number of bytes you want to read from the socket</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>blocking</code></em> :</span></p></td>
<td>whether to do blocking or non-blocking I/O</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>a <a class="link" href="GCancellable.html" title="GCancellable"><code class="literal">GCancellable</code></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> for error reporting, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>Number of bytes read, or 0 if the connection was closed by
the peer, or -1 on error</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.26</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-send"></a><h3>g_socket_send ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gssize"><span class="returnvalue">gssize</span></a>              g_socket_send                       (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *buffer</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gsize"><span class="type">gsize</span></a> size</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Tries to send <em class="parameter"><code>size</code></em> bytes from <em class="parameter"><code>buffer</code></em> on the socket. This is
mainly used by connection-oriented sockets; it is identical to
<a class="link" href="GSocket.html#g-socket-send-to" title="g_socket_send_to ()"><code class="function">g_socket_send_to()</code></a> with <em class="parameter"><code>address</code></em> set to <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>.
</p>
<p>
If the socket is in blocking mode the call will block until there is
space for the data in the socket queue. If there is no space available
and the socket is in non-blocking mode a <a class="link" href="gio-GIOError.html#G-IO-ERROR-WOULD-BLOCK:CAPS"><code class="literal">G_IO_ERROR_WOULD_BLOCK</code></a> error
will be returned. To be notified when space is available, wait for the
<a href="../glib/glib-IO-Channels.html#G-IO-OUT:CAPS"><code class="literal">G_IO_OUT</code></a> condition. Note though that you may still receive
<a class="link" href="gio-GIOError.html#G-IO-ERROR-WOULD-BLOCK:CAPS"><code class="literal">G_IO_ERROR_WOULD_BLOCK</code></a> from <a class="link" href="GSocket.html#g-socket-send" title="g_socket_send ()"><code class="function">g_socket_send()</code></a> even if you were previously
notified of a <a href="../glib/glib-IO-Channels.html#G-IO-OUT:CAPS"><code class="literal">G_IO_OUT</code></a> condition. (On Windows in particular, this is
very common due to the way the underlying APIs work.)
</p>
<p>
On error -1 is returned and <em class="parameter"><code>error</code></em> is set accordingly.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>buffer</code></em> :</span></p></td>
<td>the buffer
containing the data to send. <span class="annotation">[<acronym title="Parameter points to an array of items."><span class="acronym">array</span></acronym> length=size][<acronym title="Generics and defining elements of containers and arrays."><span class="acronym">element-type</span></acronym> guint8]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>size</code></em> :</span></p></td>
<td>the number of bytes to send</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>a <a class="link" href="GCancellable.html" title="GCancellable"><code class="literal">GCancellable</code></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> for error reporting, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>Number of bytes written (which may be less than <em class="parameter"><code>size</code></em>), or -1
on error</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-send-to"></a><h3>g_socket_send_to ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gssize"><span class="returnvalue">gssize</span></a>              g_socket_send_to                    (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a> *address</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *buffer</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gsize"><span class="type">gsize</span></a> size</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Tries to send <em class="parameter"><code>size</code></em> bytes from <em class="parameter"><code>buffer</code></em> to <em class="parameter"><code>address</code></em>. If <em class="parameter"><code>address</code></em> is
<a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> then the message is sent to the default receiver (set by
<a class="link" href="GSocket.html#g-socket-connect" title="g_socket_connect ()"><code class="function">g_socket_connect()</code></a>).
</p>
<p>
See <a class="link" href="GSocket.html#g-socket-send" title="g_socket_send ()"><code class="function">g_socket_send()</code></a> for additional information.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>address</code></em> :</span></p></td>
<td>a <a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>buffer</code></em> :</span></p></td>
<td>the buffer
containing the data to send. <span class="annotation">[<acronym title="Parameter points to an array of items."><span class="acronym">array</span></acronym> length=size][<acronym title="Generics and defining elements of containers and arrays."><span class="acronym">element-type</span></acronym> guint8]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>size</code></em> :</span></p></td>
<td>the number of bytes to send</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>a <a class="link" href="GCancellable.html" title="GCancellable"><code class="literal">GCancellable</code></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> for error reporting, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>Number of bytes written (which may be less than <em class="parameter"><code>size</code></em>), or -1
on error</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-send-message"></a><h3>g_socket_send_message ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gssize"><span class="returnvalue">gssize</span></a>              g_socket_send_message               (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a> *address</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocket.html#GOutputVector" title="struct GOutputVector"><span class="type">GOutputVector</span></a> *vectors</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a> num_vectors</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GSocketControlMessage.html" title="GSocketControlMessage"><span class="type">GSocketControlMessage</span></a> **messages</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a> num_messages</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a> flags</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Send data to <em class="parameter"><code>address</code></em> on <em class="parameter"><code>socket</code></em>.  This is the most complicated and
fully-featured version of this call. For easier use, see
<a class="link" href="GSocket.html#g-socket-send" title="g_socket_send ()"><code class="function">g_socket_send()</code></a> and <a class="link" href="GSocket.html#g-socket-send-to" title="g_socket_send_to ()"><code class="function">g_socket_send_to()</code></a>.
</p>
<p>
If <em class="parameter"><code>address</code></em> is <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> then the message is sent to the default receiver
(set by <a class="link" href="GSocket.html#g-socket-connect" title="g_socket_connect ()"><code class="function">g_socket_connect()</code></a>).
</p>
<p>
<em class="parameter"><code>vectors</code></em> must point to an array of <a class="link" href="GSocket.html#GOutputVector" title="struct GOutputVector"><span class="type">GOutputVector</span></a> structs and
<em class="parameter"><code>num_vectors</code></em> must be the length of this array. (If <em class="parameter"><code>num_vectors</code></em> is -1,
then <em class="parameter"><code>vectors</code></em> is assumed to be terminated by a <a class="link" href="GSocket.html#GOutputVector" title="struct GOutputVector"><span class="type">GOutputVector</span></a> with a
<a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> buffer pointer.) The <a class="link" href="GSocket.html#GOutputVector" title="struct GOutputVector"><span class="type">GOutputVector</span></a> structs describe the buffers
that the sent data will be gathered from. Using multiple
<a class="link" href="GSocket.html#GOutputVector" title="struct GOutputVector"><span class="type">GOutputVector</span></a>s is more memory-efficient than manually copying
data from multiple sources into a single buffer, and more
network-efficient than making multiple calls to <a class="link" href="GSocket.html#g-socket-send" title="g_socket_send ()"><code class="function">g_socket_send()</code></a>.
</p>
<p>
<em class="parameter"><code>messages</code></em>, if non-<a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, is taken to point to an array of <em class="parameter"><code>num_messages</code></em>
<a class="link" href="GSocketControlMessage.html" title="GSocketControlMessage"><span class="type">GSocketControlMessage</span></a> instances. These correspond to the control
messages to be sent on the socket.
If <em class="parameter"><code>num_messages</code></em> is -1 then <em class="parameter"><code>messages</code></em> is treated as a <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>-terminated
array.
</p>
<p>
<em class="parameter"><code>flags</code></em> modify how the message is sent. The commonly available arguments
for this are available in the <a class="link" href="GSocket.html#GSocketMsgFlags" title="enum GSocketMsgFlags"><span class="type">GSocketMsgFlags</span></a> enum, but the
values there are the same as the system values, and the flags
are passed in as-is, so you can pass in system-specific flags too.
</p>
<p>
If the socket is in blocking mode the call will block until there is
space for the data in the socket queue. If there is no space available
and the socket is in non-blocking mode a <a class="link" href="gio-GIOError.html#G-IO-ERROR-WOULD-BLOCK:CAPS"><code class="literal">G_IO_ERROR_WOULD_BLOCK</code></a> error
will be returned. To be notified when space is available, wait for the
<a href="../glib/glib-IO-Channels.html#G-IO-OUT:CAPS"><code class="literal">G_IO_OUT</code></a> condition. Note though that you may still receive
<a class="link" href="gio-GIOError.html#G-IO-ERROR-WOULD-BLOCK:CAPS"><code class="literal">G_IO_ERROR_WOULD_BLOCK</code></a> from <a class="link" href="GSocket.html#g-socket-send" title="g_socket_send ()"><code class="function">g_socket_send()</code></a> even if you were previously
notified of a <a href="../glib/glib-IO-Channels.html#G-IO-OUT:CAPS"><code class="literal">G_IO_OUT</code></a> condition. (On Windows in particular, this is
very common due to the way the underlying APIs work.)
</p>
<p>
On error -1 is returned and <em class="parameter"><code>error</code></em> is set accordingly.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>address</code></em> :</span></p></td>
<td>a <a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>vectors</code></em> :</span></p></td>
<td>an array of <a class="link" href="GSocket.html#GOutputVector" title="struct GOutputVector"><span class="type">GOutputVector</span></a> structs. <span class="annotation">[<acronym title="Parameter points to an array of items."><span class="acronym">array</span></acronym> length=num_vectors]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>num_vectors</code></em> :</span></p></td>
<td>the number of elements in <em class="parameter"><code>vectors</code></em>, or -1</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>messages</code></em> :</span></p></td>
<td>a pointer to an
array of <a href="GSocketControlMessage.html"><span class="type">GSocketControlMessages</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="Parameter points to an array of items."><span class="acronym">array</span></acronym> length=num_messages][<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>num_messages</code></em> :</span></p></td>
<td>number of elements in <em class="parameter"><code>messages</code></em>, or -1.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>an int containing <a class="link" href="GSocket.html#GSocketMsgFlags" title="enum GSocketMsgFlags"><span class="type">GSocketMsgFlags</span></a> flags</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>a <a class="link" href="GCancellable.html" title="GCancellable"><code class="literal">GCancellable</code></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> for error reporting, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>Number of bytes written (which may be less than <em class="parameter"><code>size</code></em>), or -1
on error</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-send-with-blocking"></a><h3>g_socket_send_with_blocking ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gssize"><span class="returnvalue">gssize</span></a>              g_socket_send_with_blocking         (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *buffer</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gsize"><span class="type">gsize</span></a> size</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> blocking</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
This behaves exactly the same as <a class="link" href="GSocket.html#g-socket-send" title="g_socket_send ()"><code class="function">g_socket_send()</code></a>, except that
the choice of blocking or non-blocking behavior is determined by
the <em class="parameter"><code>blocking</code></em> argument rather than by <em class="parameter"><code>socket</code></em>'s properties.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>buffer</code></em> :</span></p></td>
<td>the buffer
containing the data to send. <span class="annotation">[<acronym title="Parameter points to an array of items."><span class="acronym">array</span></acronym> length=size][<acronym title="Generics and defining elements of containers and arrays."><span class="acronym">element-type</span></acronym> guint8]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>size</code></em> :</span></p></td>
<td>the number of bytes to send</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>blocking</code></em> :</span></p></td>
<td>whether to do blocking or non-blocking I/O</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>a <a class="link" href="GCancellable.html" title="GCancellable"><code class="literal">GCancellable</code></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> for error reporting, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>Number of bytes written (which may be less than <em class="parameter"><code>size</code></em>), or -1
on error</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.26</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-close"></a><h3>g_socket_close ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_socket_close                      (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Closes the socket, shutting down any active connection.
</p>
<p>
Closing a socket does not wait for all outstanding I/O operations
to finish, so the caller should not rely on them to be guaranteed
to complete even if the close returns with no error.
</p>
<p>
Once the socket is closed, all other operations will return
<a class="link" href="gio-GIOError.html#G-IO-ERROR-CLOSED:CAPS"><code class="literal">G_IO_ERROR_CLOSED</code></a>. Closing a socket multiple times will not
return an error.
</p>
<p>
Sockets will be automatically closed when the last reference
is dropped, but you might want to call this function to make sure
resources are released as early as possible.
</p>
<p>
Beware that due to the way that TCP works, it is possible for
recently-sent data to be lost if either you close a socket while the
<a href="../glib/glib-IO-Channels.html#G-IO-IN:CAPS"><code class="literal">G_IO_IN</code></a> condition is set, or else if the remote connection tries to
send something to you after you close the socket but before it has
finished reading all of the data you sent. There is no easy generic
way to avoid this problem; the easiest fix is to design the network
protocol such that the client will never send data "out of turn".
Another solution is for the server to half-close the connection by
calling <a class="link" href="GSocket.html#g-socket-shutdown" title="g_socket_shutdown ()"><code class="function">g_socket_shutdown()</code></a> with only the <em class="parameter"><code>shutdown_write</code></em> flag set,
and then wait for the client to notice this and close its side of the
connection, after which the server can safely call <a class="link" href="GSocket.html#g-socket-close" title="g_socket_close ()"><code class="function">g_socket_close()</code></a>.
(This is what <a class="link" href="GTcpConnection.html" title="GTcpConnection"><span class="type">GTcpConnection</span></a> does if you call
<a class="link" href="GTcpConnection.html#g-tcp-connection-set-graceful-disconnect" title="g_tcp_connection_set_graceful_disconnect ()"><code class="function">g_tcp_connection_set_graceful_disconnect()</code></a>. But of course, this
only works if the client will close its connection after the server
does.)
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> for error reporting, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> on error</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-is-closed"></a><h3>g_socket_is_closed ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_socket_is_closed                  (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);</pre>
<p>
Checks whether a socket is closed.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if socket is closed, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-shutdown"></a><h3>g_socket_shutdown ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_socket_shutdown                   (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> shutdown_read</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> shutdown_write</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Shut down part of a full-duplex connection.
</p>
<p>
If <em class="parameter"><code>shutdown_read</code></em> is <a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> then the receiving side of the connection
is shut down, and further reading is disallowed.
</p>
<p>
If <em class="parameter"><code>shutdown_write</code></em> is <a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> then the sending side of the connection
is shut down, and further writing is disallowed.
</p>
<p>
It is allowed for both <em class="parameter"><code>shutdown_read</code></em> and <em class="parameter"><code>shutdown_write</code></em> to be <a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a>.
</p>
<p>
One example where this is used is graceful disconnect for TCP connections
where you close the sending side, then wait for the other side to close
the connection, thus ensuring that the other side saw all sent data.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>shutdown_read</code></em> :</span></p></td>
<td>whether to shut down the read side</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>shutdown_write</code></em> :</span></p></td>
<td>whether to shut down the write side</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> for error reporting, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> on error</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-is-connected"></a><h3>g_socket_is_connected ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_socket_is_connected               (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);</pre>
<p>
Check whether the socket is connected. This is only useful for
connection-oriented sockets.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if socket is connected, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-create-source"></a><h3>g_socket_create_source ()</h3>
<pre class="programlisting"><a href="../glib/glib-The-Main-Event-Loop.html#GSource"><span class="returnvalue">GSource</span></a> *           g_socket_create_source              (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-IO-Channels.html#GIOCondition"><span class="type">GIOCondition</span></a> condition</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>);</pre>
<p>
Creates a <a href="../glib/glib-The-Main-Event-Loop.html#GSource"><code class="literal">GSource</code></a> that can be attached to a <a href="../glib/glib-The-Main-Event-Loop.html#GMainContext"><code class="literal">GMainContext</code></a> to monitor
for the availibility of the specified <em class="parameter"><code>condition</code></em> on the socket.
</p>
<p>
The callback on the source is of the <a class="link" href="GSocket.html#GSocketSourceFunc" title="GSocketSourceFunc ()"><span class="type">GSocketSourceFunc</span></a> type.
</p>
<p>
It is meaningless to specify <a href="../glib/glib-IO-Channels.html#G-IO-ERR:CAPS"><code class="literal">G_IO_ERR</code></a> or <a href="../glib/glib-IO-Channels.html#G-IO-HUP:CAPS"><code class="literal">G_IO_HUP</code></a> in <em class="parameter"><code>condition</code></em>;
these conditions will always be reported output if they are true.
</p>
<p>
<em class="parameter"><code>cancellable</code></em> if not <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> can be used to cancel the source, which will
cause the source to trigger, reporting the current condition (which
is likely 0 unless cancellation happened at the same time as a
condition change). You can check for this in the callback using
<a class="link" href="GCancellable.html#g-cancellable-is-cancelled" title="g_cancellable_is_cancelled ()"><code class="function">g_cancellable_is_cancelled()</code></a>.
</p>
<p>
If <em class="parameter"><code>socket</code></em> has a timeout set, and it is reached before <em class="parameter"><code>condition</code></em>
occurs, the source will then trigger anyway, reporting <a href="../glib/glib-IO-Channels.html#G-IO-IN:CAPS"><code class="literal">G_IO_IN</code></a> or
<a href="../glib/glib-IO-Channels.html#G-IO-OUT:CAPS"><code class="literal">G_IO_OUT</code></a> depending on <em class="parameter"><code>condition</code></em>. However, <em class="parameter"><code>socket</code></em> will have been
marked as having had a timeout, and so the next <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> I/O method
you call will then fail with a <a class="link" href="gio-GIOError.html#G-IO-ERROR-TIMED-OUT:CAPS"><code class="literal">G_IO_ERROR_TIMED_OUT</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>condition</code></em> :</span></p></td>
<td>a <a href="../glib/glib-IO-Channels.html#GIOCondition"><span class="type">GIOCondition</span></a> mask to monitor</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>a <a class="link" href="GCancellable.html" title="GCancellable"><code class="literal">GCancellable</code></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a newly allocated <a href="../glib/glib-The-Main-Event-Loop.html#GSource"><code class="literal">GSource</code></a>, free with <a href="../glib/glib-The-Main-Event-Loop.html#g-source-unref"><code class="function">g_source_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-condition-check"></a><h3>g_socket_condition_check ()</h3>
<pre class="programlisting"><a href="../glib/glib-IO-Channels.html#GIOCondition"><span class="returnvalue">GIOCondition</span></a>        g_socket_condition_check            (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-IO-Channels.html#GIOCondition"><span class="type">GIOCondition</span></a> condition</code></em>);</pre>
<p>
Checks on the readiness of <em class="parameter"><code>socket</code></em> to perform operations.
The operations specified in <em class="parameter"><code>condition</code></em> are checked for and masked
against the currently-satisfied conditions on <em class="parameter"><code>socket</code></em>. The result
is returned.
</p>
<p>
Note that on Windows, it is possible for an operation to return
<a class="link" href="gio-GIOError.html#G-IO-ERROR-WOULD-BLOCK:CAPS"><code class="literal">G_IO_ERROR_WOULD_BLOCK</code></a> even immediately after
<a class="link" href="GSocket.html#g-socket-condition-check" title="g_socket_condition_check ()"><code class="function">g_socket_condition_check()</code></a> has claimed that the socket is ready for
writing. Rather than calling <a class="link" href="GSocket.html#g-socket-condition-check" title="g_socket_condition_check ()"><code class="function">g_socket_condition_check()</code></a> and then
writing to the socket if it succeeds, it is generally better to
simply try writing to the socket right away, and try again later if
the initial attempt returns <a class="link" href="gio-GIOError.html#G-IO-ERROR-WOULD-BLOCK:CAPS"><code class="literal">G_IO_ERROR_WOULD_BLOCK</code></a>.
</p>
<p>
It is meaningless to specify <a href="../glib/glib-IO-Channels.html#G-IO-ERR:CAPS"><code class="literal">G_IO_ERR</code></a> or <a href="../glib/glib-IO-Channels.html#G-IO-HUP:CAPS"><code class="literal">G_IO_HUP</code></a> in condition;
these conditions will always be set in the output if they are true.
</p>
<p>
This call never blocks.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>condition</code></em> :</span></p></td>
<td>a <a href="../glib/glib-IO-Channels.html#GIOCondition"><span class="type">GIOCondition</span></a> mask to check</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>the <em class="parameter"><code>GIOCondition</code></em> mask of the current state</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-condition-wait"></a><h3>g_socket_condition_wait ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_socket_condition_wait             (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-IO-Channels.html#GIOCondition"><span class="type">GIOCondition</span></a> condition</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Waits for <em class="parameter"><code>condition</code></em> to become true on <em class="parameter"><code>socket</code></em>. When the condition
is met, <a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> is returned.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is cancelled before the condition is met, or if the
socket has a timeout set and it is reached before the condition is
met, then <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> is returned and <em class="parameter"><code>error</code></em>, if non-<a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, is set to
the appropriate value (<a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> or
<a class="link" href="gio-GIOError.html#G-IO-ERROR-TIMED-OUT:CAPS"><code class="literal">G_IO_ERROR_TIMED_OUT</code></a>).
</p>
<p>
See also <a class="link" href="GSocket.html#g-socket-condition-timed-wait" title="g_socket_condition_timed_wait ()"><code class="function">g_socket_condition_timed_wait()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>condition</code></em> :</span></p></td>
<td>a <a href="../glib/glib-IO-Channels.html#GIOCondition"><span class="type">GIOCondition</span></a> mask to wait for</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>a <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> pointer, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the condition was met, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-condition-timed-wait"></a><h3>g_socket_condition_timed_wait ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_socket_condition_timed_wait       (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-IO-Channels.html#GIOCondition"><span class="type">GIOCondition</span></a> condition</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint64"><span class="type">gint64</span></a> timeout</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a> *cancellable</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Waits for up to <em class="parameter"><code>timeout</code></em> microseconds for <em class="parameter"><code>condition</code></em> to become true
on <em class="parameter"><code>socket</code></em>. If the condition is met, <a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> is returned.
</p>
<p>
If <em class="parameter"><code>cancellable</code></em> is cancelled before the condition is met, or if
<em class="parameter"><code>timeout</code></em> (or the socket's <a class="link" href="GSocket.html#GSocket--timeout" title='The "timeout" property'><span class="type">"timeout"</span></a>) is reached before the
condition is met, then <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> is returned and <em class="parameter"><code>error</code></em>, if non-<a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>,
is set to the appropriate value (<a class="link" href="gio-GIOError.html#G-IO-ERROR-CANCELLED:CAPS"><code class="literal">G_IO_ERROR_CANCELLED</code></a> or
<a class="link" href="gio-GIOError.html#G-IO-ERROR-TIMED-OUT:CAPS"><code class="literal">G_IO_ERROR_TIMED_OUT</code></a>).
</p>
<p>
If you don't want a timeout, use <a class="link" href="GSocket.html#g-socket-condition-wait" title="g_socket_condition_wait ()"><code class="function">g_socket_condition_wait()</code></a>.
(Alternatively, you can pass -1 for <em class="parameter"><code>timeout</code></em>.)
</p>
<p>
Note that although <em class="parameter"><code>timeout</code></em> is in microseconds for consistency with
other GLib APIs, this function actually only has millisecond
resolution, and the behavior is undefined if <em class="parameter"><code>timeout</code></em> is not an
exact number of milliseconds.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>condition</code></em> :</span></p></td>
<td>a <a href="../glib/glib-IO-Channels.html#GIOCondition"><span class="type">GIOCondition</span></a> mask to wait for</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>timeout</code></em> :</span></p></td>
<td>the maximum time (in microseconds) to wait, or -1</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cancellable</code></em> :</span></p></td>
<td>a <a class="link" href="GCancellable.html" title="GCancellable"><span class="type">GCancellable</span></a>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> pointer, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if the condition was met, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.32</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-get-available-bytes"></a><h3>g_socket_get_available_bytes ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gssize"><span class="returnvalue">gssize</span></a>              g_socket_get_available_bytes        (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);</pre>
<p>
Get the amount of data pending in the OS input buffer.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>the number of bytes that can be read from the socket
without blocking or -1 on error.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.32</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-set-listen-backlog"></a><h3>g_socket_set_listen_backlog ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_socket_set_listen_backlog         (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a> backlog</code></em>);</pre>
<p>
Sets the maximum number of outstanding connections allowed
when listening on this socket. If more clients than this are
connecting to the socket and the application is not handling them
on time then the new connections will be refused.
</p>
<p>
Note that this must be called before <a class="link" href="GSocket.html#g-socket-listen" title="g_socket_listen ()"><code class="function">g_socket_listen()</code></a> and has no
effect if called after that.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>backlog</code></em> :</span></p></td>
<td>the maximum number of pending connections.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-get-listen-backlog"></a><h3>g_socket_get_listen_backlog ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gint"><span class="returnvalue">gint</span></a>                g_socket_get_listen_backlog         (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);</pre>
<p>
Gets the listen backlog setting of the socket. For details on this,
see <a class="link" href="GSocket.html#g-socket-set-listen-backlog" title="g_socket_set_listen_backlog ()"><code class="function">g_socket_set_listen_backlog()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>the maximum number of pending connections.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-get-blocking"></a><h3>g_socket_get_blocking ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_socket_get_blocking               (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);</pre>
<p>
Gets the blocking mode of the socket. For details on blocking I/O,
see <a class="link" href="GSocket.html#g-socket-set-blocking" title="g_socket_set_blocking ()"><code class="function">g_socket_set_blocking()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if blocking I/O is used, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-set-blocking"></a><h3>g_socket_set_blocking ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_socket_set_blocking               (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> blocking</code></em>);</pre>
<p>
Sets the blocking mode of the socket. In blocking mode
all operations block until they succeed or there is an error. In
non-blocking mode all functions return results immediately or
with a <a class="link" href="gio-GIOError.html#G-IO-ERROR-WOULD-BLOCK:CAPS"><code class="literal">G_IO_ERROR_WOULD_BLOCK</code></a> error.
</p>
<p>
All sockets are created in blocking mode. However, note that the
platform level socket is always non-blocking, and blocking mode
is a GSocket level feature.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>blocking</code></em> :</span></p></td>
<td>Whether to use blocking I/O or not.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-get-keepalive"></a><h3>g_socket_get_keepalive ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_socket_get_keepalive              (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);</pre>
<p>
Gets the keepalive mode of the socket. For details on this,
see <a class="link" href="GSocket.html#g-socket-set-keepalive" title="g_socket_set_keepalive ()"><code class="function">g_socket_set_keepalive()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if keepalive is active, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> otherwise.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-set-keepalive"></a><h3>g_socket_set_keepalive ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_socket_set_keepalive              (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> keepalive</code></em>);</pre>
<p>
Sets or unsets the <code class="literal">SO_KEEPALIVE</code> flag on the underlying socket. When
this flag is set on a socket, the system will attempt to verify that the
remote socket endpoint is still present if a sufficiently long period of
time passes with no data being exchanged. If the system is unable to
verify the presence of the remote endpoint, it will automatically close
the connection.
</p>
<p>
This option is only functional on certain kinds of sockets. (Notably,
<a class="link" href="GSocket.html#G-SOCKET-PROTOCOL-TCP:CAPS"><code class="literal">G_SOCKET_PROTOCOL_TCP</code></a> sockets.)
</p>
<p>
The exact time between pings is system- and protocol-dependent, but will
normally be at least two hours. Most commonly, you would set this flag
on a server socket if you want to allow clients to remain idle for long
periods of time, but also want to ensure that connections are eventually
garbage-collected if clients crash or become unreachable.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>keepalive</code></em> :</span></p></td>
<td>Value for the keepalive flag</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-get-timeout"></a><h3>g_socket_get_timeout ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#guint"><span class="returnvalue">guint</span></a>               g_socket_get_timeout                (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);</pre>
<p>
Gets the timeout setting of the socket. For details on this, see
<a class="link" href="GSocket.html#g-socket-set-timeout" title="g_socket_set_timeout ()"><code class="function">g_socket_set_timeout()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>the timeout in seconds</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.26</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-set-timeout"></a><h3>g_socket_set_timeout ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_socket_set_timeout                (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> timeout</code></em>);</pre>
<p>
Sets the time in seconds after which I/O operations on <em class="parameter"><code>socket</code></em> will
time out if they have not yet completed.
</p>
<p>
On a blocking socket, this means that any blocking <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>
operation will time out after <em class="parameter"><code>timeout</code></em> seconds of inactivity,
returning <a class="link" href="gio-GIOError.html#G-IO-ERROR-TIMED-OUT:CAPS"><code class="literal">G_IO_ERROR_TIMED_OUT</code></a>.
</p>
<p>
On a non-blocking socket, calls to <a class="link" href="GSocket.html#g-socket-condition-wait" title="g_socket_condition_wait ()"><code class="function">g_socket_condition_wait()</code></a> will
also fail with <a class="link" href="gio-GIOError.html#G-IO-ERROR-TIMED-OUT:CAPS"><code class="literal">G_IO_ERROR_TIMED_OUT</code></a> after the given time. Sources
created with <a class="link" href="GSocket.html#g-socket-create-source" title="g_socket_create_source ()"><code class="function">g_socket_create_source()</code></a> will trigger after
<em class="parameter"><code>timeout</code></em> seconds of inactivity, with the requested condition
set, at which point calling <a class="link" href="GSocket.html#g-socket-receive" title="g_socket_receive ()"><code class="function">g_socket_receive()</code></a>, <a class="link" href="GSocket.html#g-socket-send" title="g_socket_send ()"><code class="function">g_socket_send()</code></a>,
<a class="link" href="GSocket.html#g-socket-check-connect-result" title="g_socket_check_connect_result ()"><code class="function">g_socket_check_connect_result()</code></a>, etc, will fail with
<a class="link" href="gio-GIOError.html#G-IO-ERROR-TIMED-OUT:CAPS"><code class="literal">G_IO_ERROR_TIMED_OUT</code></a>.
</p>
<p>
If <em class="parameter"><code>timeout</code></em> is 0 (the default), operations will never time out
on their own.
</p>
<p>
Note that if an I/O operation is interrupted by a signal, this may
cause the timeout to be reset.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>timeout</code></em> :</span></p></td>
<td>the timeout for <em class="parameter"><code>socket</code></em>, in seconds, or 0 for none</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.26</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-set-ttl"></a><h3>g_socket_set_ttl ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_socket_set_ttl                    (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> ttl</code></em>);</pre>
<p>
Sets the time-to-live for outgoing unicast packets on <em class="parameter"><code>socket</code></em>.
By default the platform-specific default value is used.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>ttl</code></em> :</span></p></td>
<td>the time-to-live value for all unicast packets on <em class="parameter"><code>socket</code></em>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.32</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-get-ttl"></a><h3>g_socket_get_ttl ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#guint"><span class="returnvalue">guint</span></a>               g_socket_get_ttl                    (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);</pre>
<p>
Gets the unicast time-to-live setting on <em class="parameter"><code>socket</code></em>; see
<a class="link" href="GSocket.html#g-socket-set-ttl" title="g_socket_set_ttl ()"><code class="function">g_socket_set_ttl()</code></a> for more details.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>the time-to-live setting on <em class="parameter"><code>socket</code></em>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.32</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-get-broadcast"></a><h3>g_socket_get_broadcast ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_socket_get_broadcast              (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);</pre>
<p>
Gets the broadcast setting on <em class="parameter"><code>socket</code></em>; if <a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a>,
it is possible to send packets to broadcast
addresses or receive from broadcast addresses.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>the broadcast setting on <em class="parameter"><code>socket</code></em>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.32</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-set-broadcast"></a><h3>g_socket_set_broadcast ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_socket_set_broadcast              (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> broadcast</code></em>);</pre>
<p>
Sets whether <em class="parameter"><code>socket</code></em> should allow sending to and receiving from
broadcast addresses. This is <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> by default.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>broadcast</code></em> :</span></p></td>
<td>whether <em class="parameter"><code>socket</code></em> should allow sending to and receiving
from broadcast addresses</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.32</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-get-family"></a><h3>g_socket_get_family ()</h3>
<pre class="programlisting"><a class="link" href="GSocketAddress.html#GSocketFamily" title="enum GSocketFamily"><span class="returnvalue">GSocketFamily</span></a>       g_socket_get_family                 (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);</pre>
<p>
Gets the socket family of the socket.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GSocketAddress.html#GSocketFamily" title="enum GSocketFamily"><span class="type">GSocketFamily</span></a>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-get-fd"></a><h3>g_socket_get_fd ()</h3>
<pre class="programlisting"><span class="returnvalue">int</span>                 g_socket_get_fd                     (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);</pre>
<p>
Returns the underlying OS socket object. On unix this
is a socket file descriptor, and on windows this is
a Winsock2 SOCKET handle. This may be useful for
doing platform specific or otherwise unusual operations
on the socket.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>the file descriptor of the socket.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-get-local-address"></a><h3>g_socket_get_local_address ()</h3>
<pre class="programlisting"><a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="returnvalue">GSocketAddress</span></a> *    g_socket_get_local_address          (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Try to get the local address of a bound socket. This is only
useful if the socket has been bound to a local address,
either explicitly or implicitly when connecting.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> for error reporting, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-get-protocol"></a><h3>g_socket_get_protocol ()</h3>
<pre class="programlisting"><a class="link" href="GSocket.html#GSocketProtocol" title="enum GSocketProtocol"><span class="returnvalue">GSocketProtocol</span></a>     g_socket_get_protocol               (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);</pre>
<p>
Gets the socket protocol id the socket was created with.
In case the protocol is unknown, -1 is returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a protocol id, or -1 if unknown</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-get-remote-address"></a><h3>g_socket_get_remote_address ()</h3>
<pre class="programlisting"><a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="returnvalue">GSocketAddress</span></a> *    g_socket_get_remote_address         (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Try to get the remove address of a connected socket. This is only
useful for connection oriented sockets that have been connected.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> for error reporting, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a> or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> on error.
Free the returned object with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-get-socket-type"></a><h3>g_socket_get_socket_type ()</h3>
<pre class="programlisting"><a class="link" href="GSocket.html#GSocketType" title="enum GSocketType"><span class="returnvalue">GSocketType</span></a>         g_socket_get_socket_type            (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);</pre>
<p>
Gets the socket type of the socket.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a <a class="link" href="GSocket.html#GSocketType" title="enum GSocketType"><span class="type">GSocketType</span></a>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-speaks-ipv4"></a><h3>g_socket_speaks_ipv4 ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_socket_speaks_ipv4                (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);</pre>
<p>
Checks if a socket is capable of speaking IPv4.
</p>
<p>
IPv4 sockets are capable of speaking IPv4.  On some operating systems
and under some combinations of circumstances IPv6 sockets are also
capable of speaking IPv4.  See RFC 3493 section 3.7 for more
information.
</p>
<p>
No other types of sockets are currently considered as being capable
of speaking IPv4.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if this socket can be used with IPv4.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.22</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-get-credentials"></a><h3>g_socket_get_credentials ()</h3>
<pre class="programlisting"><a class="link" href="GCredentials.html" title="GCredentials"><span class="returnvalue">GCredentials</span></a> *      g_socket_get_credentials            (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Returns the credentials of the foreign process connected to this
socket, if any (e.g. it is only supported for <a class="link" href="GSocketAddress.html#G-SOCKET-FAMILY-UNIX:CAPS"><code class="literal">G_SOCKET_FAMILY_UNIX</code></a>
sockets).
</p>
<p>
If this operation isn't supported on the OS, the method fails with
the <a class="link" href="gio-GIOError.html#G-IO-ERROR-NOT-SUPPORTED:CAPS"><code class="literal">G_IO_ERROR_NOT_SUPPORTED</code></a> error. On Linux this is implemented
by reading the <code class="literal">SO_PEERCRED</code> option on the underlying socket.
</p>
<p>
Other ways to obtain credentials from a foreign peer includes the
<a class="link" href="GUnixCredentialsMessage.html" title="GUnixCredentialsMessage"><span class="type">GUnixCredentialsMessage</span></a> type and
<a class="link" href="GUnixConnection.html#g-unix-connection-send-credentials" title="g_unix_connection_send_credentials ()"><code class="function">g_unix_connection_send_credentials()</code></a> /
<a class="link" href="GUnixConnection.html#g-unix-connection-receive-credentials" title="g_unix_connection_receive_credentials ()"><code class="function">g_unix_connection_receive_credentials()</code></a> functions.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> for error reporting, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if <em class="parameter"><code>error</code></em> is set, otherwise a <a class="link" href="GCredentials.html" title="GCredentials"><span class="type">GCredentials</span></a> object
that must be freed with <a href="../gobject/gobject-The-Base-Object-Type.html#g-object-unref"><code class="function">g_object_unref()</code></a>. <span class="annotation">[<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.26</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-join-multicast-group"></a><h3>g_socket_join_multicast_group ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_socket_join_multicast_group       (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GInetAddress.html" title="GInetAddress"><span class="type">GInetAddress</span></a> *group</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> source_specific</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *iface</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Registers <em class="parameter"><code>socket</code></em> to receive multicast messages sent to <em class="parameter"><code>group</code></em>.
<em class="parameter"><code>socket</code></em> must be a <a class="link" href="GSocket.html#G-SOCKET-TYPE-DATAGRAM:CAPS"><code class="literal">G_SOCKET_TYPE_DATAGRAM</code></a> socket, and must have
been bound to an appropriate interface and port with
<a class="link" href="GSocket.html#g-socket-bind" title="g_socket_bind ()"><code class="function">g_socket_bind()</code></a>.
</p>
<p>
If <em class="parameter"><code>iface</code></em> is <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, the system will automatically pick an interface
to bind to based on <em class="parameter"><code>group</code></em>.
</p>
<p>
If <em class="parameter"><code>source_specific</code></em> is <a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a>, source-specific multicast as defined
in RFC 4604 is used. Note that on older platforms this may fail
with a <a class="link" href="gio-GIOError.html#G-IO-ERROR-NOT-SUPPORTED:CAPS"><code class="literal">G_IO_ERROR_NOT_SUPPORTED</code></a> error.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>group</code></em> :</span></p></td>
<td>a <a class="link" href="GInetAddress.html" title="GInetAddress"><span class="type">GInetAddress</span></a> specifying the group address to join.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>iface</code></em> :</span></p></td>
<td>Name of the interface to use, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>source_specific</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if source-specific multicast should be used</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> for error reporting, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> on error.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.32</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-leave-multicast-group"></a><h3>g_socket_leave_multicast_group ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_socket_leave_multicast_group      (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GInetAddress.html" title="GInetAddress"><span class="type">GInetAddress</span></a> *group</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> source_specific</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *iface</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> **error</code></em>);</pre>
<p>
Removes <em class="parameter"><code>socket</code></em> from the multicast group defined by <em class="parameter"><code>group</code></em>, <em class="parameter"><code>iface</code></em>,
and <em class="parameter"><code>source_specific</code></em> (which must all have the same values they had
when you joined the group).
</p>
<p>
<em class="parameter"><code>socket</code></em> remains bound to its address and port, and can still receive
unicast messages after calling this.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>group</code></em> :</span></p></td>
<td>a <a class="link" href="GInetAddress.html" title="GInetAddress"><span class="type">GInetAddress</span></a> specifying the group address to leave.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>iface</code></em> :</span></p></td>
<td>Interface used. <span class="annotation">[<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>source_specific</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if source-specific multicast was used</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>error</code></em> :</span></p></td>
<td>
<a href="../glib/glib-Error-Reporting.html#GError"><span class="type">GError</span></a> for error reporting, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> to ignore.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> on error.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.32</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-get-multicast-loopback"></a><h3>g_socket_get_multicast_loopback ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_socket_get_multicast_loopback     (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);</pre>
<p>
Gets the multicast loopback setting on <em class="parameter"><code>socket</code></em>; if <a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> (the
default), outgoing multicast packets will be looped back to
multicast listeners on the same host.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>the multicast loopback setting on <em class="parameter"><code>socket</code></em>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.32</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-set-multicast-loopback"></a><h3>g_socket_set_multicast_loopback ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_socket_set_multicast_loopback     (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> loopback</code></em>);</pre>
<p>
Sets whether outgoing multicast packets will be received by sockets
listening on that multicast address on the same host. This is <a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a>
by default.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>loopback</code></em> :</span></p></td>
<td>whether <em class="parameter"><code>socket</code></em> should receive messages sent to its
multicast groups from the local host</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.32</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-get-multicast-ttl"></a><h3>g_socket_get_multicast_ttl ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#guint"><span class="returnvalue">guint</span></a>               g_socket_get_multicast_ttl          (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>);</pre>
<p>
Gets the multicast time-to-live setting on <em class="parameter"><code>socket</code></em>; see
<a class="link" href="GSocket.html#g-socket-set-multicast-ttl" title="g_socket_set_multicast_ttl ()"><code class="function">g_socket_set_multicast_ttl()</code></a> for more details.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>the multicast time-to-live setting on <em class="parameter"><code>socket</code></em>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.32</p>
</div>
<hr>
<div class="refsect2">
<a name="g-socket-set-multicast-ttl"></a><h3>g_socket_set_multicast_ttl ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_socket_set_multicast_ttl          (<em class="parameter"><code><a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a> *socket</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> ttl</code></em>);</pre>
<p>
Sets the time-to-live for outgoing multicast datagrams on <em class="parameter"><code>socket</code></em>.
By default, this is 1, meaning that multicast packets will not leave
the local network.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>socket</code></em> :</span></p></td>
<td>a <a class="link" href="GSocket.html" title="GSocket"><span class="type">GSocket</span></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>ttl</code></em> :</span></p></td>
<td>the time-to-live value for all multicast datagrams on <em class="parameter"><code>socket</code></em>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.32</p>
</div>
</div>
<div class="refsect1">
<a name="GSocket.property-details"></a><h2>Property Details</h2>
<div class="refsect2">
<a name="GSocket--blocking"></a><h3>The <code class="literal">"blocking"</code> property</h3>
<pre class="programlisting">  "blocking"                 <a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a>              : Read / Write</pre>
<p>Whether or not I/O on this socket is blocking.</p>
<p>Default value: TRUE</p>
</div>
<hr>
<div class="refsect2">
<a name="GSocket--broadcast"></a><h3>The <code class="literal">"broadcast"</code> property</h3>
<pre class="programlisting">  "broadcast"                <a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a>              : Read / Write</pre>
<p>
Whether the socket should allow sending to and receiving from broadcast addresses.
</p>
<p>Default value: FALSE</p>
<p class="since">Since 2.32</p>
</div>
<hr>
<div class="refsect2">
<a name="GSocket--family"></a><h3>The <code class="literal">"family"</code> property</h3>
<pre class="programlisting">  "family"                   <a class="link" href="GSocketAddress.html#GSocketFamily" title="enum GSocketFamily"><span class="type">GSocketFamily</span></a>         : Read / Write / Construct Only</pre>
<p>The sockets address family.</p>
<p>Default value: G_SOCKET_FAMILY_INVALID</p>
</div>
<hr>
<div class="refsect2">
<a name="GSocket--fd"></a><h3>The <code class="literal">"fd"</code> property</h3>
<pre class="programlisting">  "fd"                       <a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a>                  : Read / Write / Construct Only</pre>
<p>The sockets file descriptor.</p>
<p>Default value: -1</p>
</div>
<hr>
<div class="refsect2">
<a name="GSocket--keepalive"></a><h3>The <code class="literal">"keepalive"</code> property</h3>
<pre class="programlisting">  "keepalive"                <a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a>              : Read / Write</pre>
<p>Keep connection alive by sending periodic pings.</p>
<p>Default value: FALSE</p>
</div>
<hr>
<div class="refsect2">
<a name="GSocket--listen-backlog"></a><h3>The <code class="literal">"listen-backlog"</code> property</h3>
<pre class="programlisting">  "listen-backlog"           <a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a>                  : Read / Write</pre>
<p>Outstanding connections in the listen queue.</p>
<p>Allowed values: [0,128]</p>
<p>Default value: 10</p>
</div>
<hr>
<div class="refsect2">
<a name="GSocket--local-address"></a><h3>The <code class="literal">"local-address"</code> property</h3>
<pre class="programlisting">  "local-address"            <a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a>*       : Read</pre>
<p>The local address the socket is bound to.</p>
</div>
<hr>
<div class="refsect2">
<a name="GSocket--multicast-loopback"></a><h3>The <code class="literal">"multicast-loopback"</code> property</h3>
<pre class="programlisting">  "multicast-loopback"       <a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a>              : Read / Write</pre>
<p>
Whether outgoing multicast packets loop back to the local host.
</p>
<p>Default value: TRUE</p>
<p class="since">Since 2.32</p>
</div>
<hr>
<div class="refsect2">
<a name="GSocket--multicast-ttl"></a><h3>The <code class="literal">"multicast-ttl"</code> property</h3>
<pre class="programlisting">  "multicast-ttl"            <a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a>                 : Read / Write</pre>
<p>
Time-to-live out outgoing multicast packets
</p>
<p>Default value: 1</p>
<p class="since">Since 2.32</p>
</div>
<hr>
<div class="refsect2">
<a name="GSocket--protocol"></a><h3>The <code class="literal">"protocol"</code> property</h3>
<pre class="programlisting">  "protocol"                 <a class="link" href="GSocket.html#GSocketProtocol" title="enum GSocketProtocol"><span class="type">GSocketProtocol</span></a>       : Read / Write / Construct Only</pre>
<p>The id of the protocol to use, or -1 for unknown.</p>
<p>Default value: G_SOCKET_PROTOCOL_UNKNOWN</p>
</div>
<hr>
<div class="refsect2">
<a name="GSocket--remote-address"></a><h3>The <code class="literal">"remote-address"</code> property</h3>
<pre class="programlisting">  "remote-address"           <a class="link" href="GSocketAddress.html" title="GSocketAddress"><span class="type">GSocketAddress</span></a>*       : Read</pre>
<p>The remote address the socket is connected to.</p>
</div>
<hr>
<div class="refsect2">
<a name="GSocket--timeout"></a><h3>The <code class="literal">"timeout"</code> property</h3>
<pre class="programlisting">  "timeout"                  <a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a>                 : Read / Write</pre>
<p>
The timeout in seconds on socket I/O
</p>
<p>Default value: 0</p>
<p class="since">Since 2.26</p>
</div>
<hr>
<div class="refsect2">
<a name="GSocket--ttl"></a><h3>The <code class="literal">"ttl"</code> property</h3>
<pre class="programlisting">  "ttl"                      <a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a>                 : Read / Write</pre>
<p>
Time-to-live for outgoing unicast packets
</p>
<p>Default value: 0</p>
<p class="since">Since 2.32</p>
</div>
<hr>
<div class="refsect2">
<a name="GSocket--type"></a><h3>The <code class="literal">"type"</code> property</h3>
<pre class="programlisting">  "type"                     <a class="link" href="GSocket.html#GSocketType" title="enum GSocketType"><span class="type">GSocketType</span></a>           : Read / Write / Construct Only</pre>
<p>The sockets type.</p>
<p>Default value: G_SOCKET_TYPE_STREAM</p>
</div>
</div>
<div class="refsect1">
<a name="GSocket.see-also"></a><h2>See Also</h2>
<a class="link" href="GInitable.html" title="GInitable"><span class="type">GInitable</span></a>
</div>
</div>
<div class="footer">
<hr>
          Generated by GTK-Doc V1.18</div>
</body>
</html>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Index</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.76.1">
<link rel="home" href="index.html" title="GObject Reference Manual">
<link rel="up" href="index.html" title="GObject Reference Manual">
<link rel="prev" href="tools-gtkdoc.html" title="Writing API docs">
<link rel="next" href="api-index-deprecated.html" title="Index of deprecated symbols">
<meta name="generator" content="GTK-Doc V1.18 (XML mode)">
<link rel="stylesheet" href="style.css" type="text/css">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF">
<table class="navigation" id="top" width="100%" summary="Navigation header" cellpadding="2" cellspacing="2">
<tr valign="middle">
<td><a accesskey="p" href="tools-gtkdoc.html"><img src="left.png" width="24" height="24" border="0" alt="Prev"></a></td>
<td> </td>
<td><a accesskey="h" href="index.html"><img src="home.png" width="24" height="24" border="0" alt="Home"></a></td>
<th width="100%" align="center">GObject Reference Manual</th>
<td><a accesskey="n" href="api-index-deprecated.html"><img src="right.png" width="24" height="24" border="0" alt="Next"></a></td>
</tr>
<tr><td colspan="5" class="shortcuts">
<a class="shortcut" href="#idxB">B</a>
                      | 
                   <a class="shortcut" href="#idxC">C</a>
                      | 
                   <a class="shortcut" href="#idxD">D</a>
                      | 
                   <a class="shortcut" href="#idxE">E</a>
                      | 
                   <a class="shortcut" href="#idxF">F</a>
                      | 
                   <a class="shortcut" href="#idxI">I</a>
                      | 
                   <a class="shortcut" href="#idxO">O</a>
                      | 
                   <a class="shortcut" href="#idxP">P</a>
                      | 
                   <a class="shortcut" href="#idxS">S</a>
                      | 
                   <a class="shortcut" href="#idxT">T</a>
                      | 
                   <a class="shortcut" href="#idxV">V</a>
                      | 
                   <a class="shortcut" href="#idxW">W</a>
</td></tr>
</table>
<div class="index">
<div class="titlepage"><div><div><h2 class="title">
<a name="api-index-full"></a>Index</h2></div></div></div>
<a name="idx"></a><a name="idxB"></a><h3 class="title">B</h3>
<dt>
<a class="link" href="gobject-Type-Information.html#GBaseFinalizeFunc" title="GBaseFinalizeFunc ()">GBaseFinalizeFunc</a>, user_function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#GBaseInitFunc" title="GBaseInitFunc ()">GBaseInitFunc</a>, user_function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GBinding.html#GBinding-struct" title="GBinding">GBinding</a>, struct in <a class="link" href="GBinding.html" title="GBinding">GBinding</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GBinding.html#GBinding--flags" title='The "flags" property'>GBinding:flags</a>, object property in <a class="link" href="GBinding.html" title="GBinding">GBinding</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GBinding.html#GBinding--source" title='The "source" property'>GBinding:source</a>, object property in <a class="link" href="GBinding.html" title="GBinding">GBinding</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GBinding.html#GBinding--source-property" title='The "source-property" property'>GBinding:source-property</a>, object property in <a class="link" href="GBinding.html" title="GBinding">GBinding</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GBinding.html#GBinding--target" title='The "target" property'>GBinding:target</a>, object property in <a class="link" href="GBinding.html" title="GBinding">GBinding</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GBinding.html#GBinding--target-property" title='The "target-property" property'>GBinding:target-property</a>, object property in <a class="link" href="GBinding.html" title="GBinding">GBinding</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GBinding.html#GBindingFlags" title="enum GBindingFlags">GBindingFlags</a>, enum in <a class="link" href="GBinding.html" title="GBinding">GBinding</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GBinding.html#GBindingTransformFunc" title="GBindingTransformFunc ()">GBindingTransformFunc</a>, user_function in <a class="link" href="GBinding.html" title="GBinding">GBinding</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GBinding.html#g-binding-get-flags" title="g_binding_get_flags ()">g_binding_get_flags</a>, function in <a class="link" href="GBinding.html" title="GBinding">GBinding</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GBinding.html#g-binding-get-source" title="g_binding_get_source ()">g_binding_get_source</a>, function in <a class="link" href="GBinding.html" title="GBinding">GBinding</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GBinding.html#g-binding-get-source-property" title="g_binding_get_source_property ()">g_binding_get_source_property</a>, function in <a class="link" href="GBinding.html" title="GBinding">GBinding</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GBinding.html#g-binding-get-target" title="g_binding_get_target ()">g_binding_get_target</a>, function in <a class="link" href="GBinding.html" title="GBinding">GBinding</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GBinding.html#g-binding-get-target-property" title="g_binding_get_target_property ()">g_binding_get_target_property</a>, function in <a class="link" href="GBinding.html" title="GBinding">GBinding</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#GBoxedCopyFunc" title="GBoxedCopyFunc ()">GBoxedCopyFunc</a>, user_function in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#GBoxedFreeFunc" title="GBoxedFreeFunc ()">GBoxedFreeFunc</a>, user_function in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#g-boxed-copy" title="g_boxed_copy ()">g_boxed_copy</a>, function in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#g-boxed-free" title="g_boxed_free ()">g_boxed_free</a>, function in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#g-boxed-type-register-static" title="g_boxed_type_register_static ()">g_boxed_type_register_static</a>, function in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<a name="idxC"></a><h3 class="title">C</h3>
<dt>
<a class="link" href="gobject-Closures.html#G-CALLBACK:CAPS" title="G_CALLBACK()">G_CALLBACK</a>, macro in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#GCallback" title="GCallback ()">GCallback</a>, user_function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#GCClosure" title="struct GCClosure">GCClosure</a>, struct in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-BOOLEAN--BOXED-BOXED" title="g_cclosure_marshal_BOOLEAN__BOXED_BOXED ()">g_cclosure_marshal_BOOLEAN__BOXED_BOXED</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-BOOLEAN--FLAGS" title="g_cclosure_marshal_BOOLEAN__FLAGS ()">g_cclosure_marshal_BOOLEAN__FLAGS</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-BOOL--BOXED-BOXED" title="g_cclosure_marshal_BOOL__BOXED_BOXED">g_cclosure_marshal_BOOL__BOXED_BOXED</a>, macro in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-BOOL--FLAGS" title="g_cclosure_marshal_BOOL__FLAGS">g_cclosure_marshal_BOOL__FLAGS</a>, macro in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-generic" title="g_cclosure_marshal_generic ()">g_cclosure_marshal_generic</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-STRING--OBJECT-POINTER" title="g_cclosure_marshal_STRING__OBJECT_POINTER ()">g_cclosure_marshal_STRING__OBJECT_POINTER</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-VOID--BOOLEAN" title="g_cclosure_marshal_VOID__BOOLEAN ()">g_cclosure_marshal_VOID__BOOLEAN</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-VOID--BOXED" title="g_cclosure_marshal_VOID__BOXED ()">g_cclosure_marshal_VOID__BOXED</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-VOID--CHAR" title="g_cclosure_marshal_VOID__CHAR ()">g_cclosure_marshal_VOID__CHAR</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-VOID--DOUBLE" title="g_cclosure_marshal_VOID__DOUBLE ()">g_cclosure_marshal_VOID__DOUBLE</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-VOID--ENUM" title="g_cclosure_marshal_VOID__ENUM ()">g_cclosure_marshal_VOID__ENUM</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-VOID--FLAGS" title="g_cclosure_marshal_VOID__FLAGS ()">g_cclosure_marshal_VOID__FLAGS</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-VOID--FLOAT" title="g_cclosure_marshal_VOID__FLOAT ()">g_cclosure_marshal_VOID__FLOAT</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-VOID--INT" title="g_cclosure_marshal_VOID__INT ()">g_cclosure_marshal_VOID__INT</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-VOID--LONG" title="g_cclosure_marshal_VOID__LONG ()">g_cclosure_marshal_VOID__LONG</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-VOID--OBJECT" title="g_cclosure_marshal_VOID__OBJECT ()">g_cclosure_marshal_VOID__OBJECT</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-VOID--PARAM" title="g_cclosure_marshal_VOID__PARAM ()">g_cclosure_marshal_VOID__PARAM</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-VOID--POINTER" title="g_cclosure_marshal_VOID__POINTER ()">g_cclosure_marshal_VOID__POINTER</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-VOID--STRING" title="g_cclosure_marshal_VOID__STRING ()">g_cclosure_marshal_VOID__STRING</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-VOID--UCHAR" title="g_cclosure_marshal_VOID__UCHAR ()">g_cclosure_marshal_VOID__UCHAR</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-VOID--UINT" title="g_cclosure_marshal_VOID__UINT ()">g_cclosure_marshal_VOID__UINT</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-VOID--UINT-POINTER" title="g_cclosure_marshal_VOID__UINT_POINTER ()">g_cclosure_marshal_VOID__UINT_POINTER</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-VOID--ULONG" title="g_cclosure_marshal_VOID__ULONG ()">g_cclosure_marshal_VOID__ULONG</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-VOID--VARIANT" title="g_cclosure_marshal_VOID__VARIANT ()">g_cclosure_marshal_VOID__VARIANT</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-marshal-VOID--VOID" title="g_cclosure_marshal_VOID__VOID ()">g_cclosure_marshal_VOID__VOID</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-new" title="g_cclosure_new ()">g_cclosure_new</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-new-object" title="g_cclosure_new_object ()">g_cclosure_new_object</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-new-object-swap" title="g_cclosure_new_object_swap ()">g_cclosure_new_object_swap</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-cclosure-new-swap" title="g_cclosure_new_swap ()">g_cclosure_new_swap</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#G-CCLOSURE-SWAP-DATA:CAPS" title="G_CCLOSURE_SWAP_DATA()">G_CCLOSURE_SWAP_DATA</a>, macro in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#gchararray" title="gchararray">gchararray</a>, typedef in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#GClassFinalizeFunc" title="GClassFinalizeFunc ()">GClassFinalizeFunc</a>, user_function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#GClassInitFunc" title="GClassInitFunc ()">GClassInitFunc</a>, user_function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-clear-object" title="g_clear_object ()">g_clear_object</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#GClosure" title="struct GClosure">GClosure</a>, struct in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#GClosureMarshal" title="GClosureMarshal ()">GClosureMarshal</a>, user_function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#GClosureNotify" title="GClosureNotify ()">GClosureNotify</a>, user_function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-closure-add-finalize-notifier" title="g_closure_add_finalize_notifier ()">g_closure_add_finalize_notifier</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-closure-add-invalidate-notifier" title="g_closure_add_invalidate_notifier ()">g_closure_add_invalidate_notifier</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-closure-add-marshal-guards" title="g_closure_add_marshal_guards ()">g_closure_add_marshal_guards</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-closure-invalidate" title="g_closure_invalidate ()">g_closure_invalidate</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-closure-invoke" title="g_closure_invoke ()">g_closure_invoke</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#G-CLOSURE-NEEDS-MARSHAL:CAPS" title="G_CLOSURE_NEEDS_MARSHAL()">G_CLOSURE_NEEDS_MARSHAL</a>, macro in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-closure-new-object" title="g_closure_new_object ()">g_closure_new_object</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-closure-new-simple" title="g_closure_new_simple ()">g_closure_new_simple</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#G-CLOSURE-N-NOTIFIERS:CAPS" title="G_CLOSURE_N_NOTIFIERS()">G_CLOSURE_N_NOTIFIERS</a>, macro in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-closure-ref" title="g_closure_ref ()">g_closure_ref</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-closure-remove-finalize-notifier" title="g_closure_remove_finalize_notifier ()">g_closure_remove_finalize_notifier</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-closure-remove-invalidate-notifier" title="g_closure_remove_invalidate_notifier ()">g_closure_remove_invalidate_notifier</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-closure-set-marshal" title="g_closure_set_marshal ()">g_closure_set_marshal</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-closure-set-meta-marshal" title="g_closure_set_meta_marshal ()">g_closure_set_meta_marshal</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-closure-sink" title="g_closure_sink ()">g_closure_sink</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-closure-unref" title="g_closure_unref ()">g_closure_unref</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#GConnectFlags" title="enum GConnectFlags">GConnectFlags</a>, enum in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<a name="idxD"></a><h3 class="title">D</h3>
<dt>
<a class="link" href="gobject-Type-Information.html#G-DEFINE-ABSTRACT-TYPE:CAPS" title="G_DEFINE_ABSTRACT_TYPE()">G_DEFINE_ABSTRACT_TYPE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-DEFINE-ABSTRACT-TYPE-WITH-CODE:CAPS" title="G_DEFINE_ABSTRACT_TYPE_WITH_CODE()">G_DEFINE_ABSTRACT_TYPE_WITH_CODE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-DEFINE-BOXED-TYPE:CAPS" title="G_DEFINE_BOXED_TYPE()">G_DEFINE_BOXED_TYPE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-DEFINE-BOXED-TYPE-WITH-CODE:CAPS" title="G_DEFINE_BOXED_TYPE_WITH_CODE()">G_DEFINE_BOXED_TYPE_WITH_CODE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GTypeModule.html#G-DEFINE-DYNAMIC-TYPE:CAPS" title="G_DEFINE_DYNAMIC_TYPE()">G_DEFINE_DYNAMIC_TYPE</a>, macro in <a class="link" href="GTypeModule.html" title="GTypeModule">GTypeModule</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GTypeModule.html#G-DEFINE-DYNAMIC-TYPE-EXTENDED:CAPS" title="G_DEFINE_DYNAMIC_TYPE_EXTENDED()">G_DEFINE_DYNAMIC_TYPE_EXTENDED</a>, macro in <a class="link" href="GTypeModule.html" title="GTypeModule">GTypeModule</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-DEFINE-INTERFACE:CAPS" title="G_DEFINE_INTERFACE()">G_DEFINE_INTERFACE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-DEFINE-INTERFACE-WITH-CODE:CAPS" title="G_DEFINE_INTERFACE_WITH_CODE()">G_DEFINE_INTERFACE_WITH_CODE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-DEFINE-POINTER-TYPE:CAPS" title="G_DEFINE_POINTER_TYPE()">G_DEFINE_POINTER_TYPE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-DEFINE-POINTER-TYPE-WITH-CODE:CAPS" title="G_DEFINE_POINTER_TYPE_WITH_CODE()">G_DEFINE_POINTER_TYPE_WITH_CODE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-DEFINE-TYPE:CAPS" title="G_DEFINE_TYPE()">G_DEFINE_TYPE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-DEFINE-TYPE-EXTENDED:CAPS" title="G_DEFINE_TYPE_EXTENDED()">G_DEFINE_TYPE_EXTENDED</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-DEFINE-TYPE-WITH-CODE:CAPS" title="G_DEFINE_TYPE_WITH_CODE()">G_DEFINE_TYPE_WITH_CODE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<a name="idxE"></a><h3 class="title">E</h3>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#GEnumClass" title="struct GEnumClass">GEnumClass</a>, struct in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#GEnumValue" title="struct GEnumValue">GEnumValue</a>, struct in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#G-ENUM-CLASS:CAPS" title="G_ENUM_CLASS()">G_ENUM_CLASS</a>, macro in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#G-ENUM-CLASS-TYPE:CAPS" title="G_ENUM_CLASS_TYPE()">G_ENUM_CLASS_TYPE</a>, macro in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#G-ENUM-CLASS-TYPE-NAME:CAPS" title="G_ENUM_CLASS_TYPE_NAME()">G_ENUM_CLASS_TYPE_NAME</a>, macro in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#g-enum-complete-type-info" title="g_enum_complete_type_info ()">g_enum_complete_type_info</a>, function in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#g-enum-get-value" title="g_enum_get_value ()">g_enum_get_value</a>, function in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#g-enum-get-value-by-name" title="g_enum_get_value_by_name ()">g_enum_get_value_by_name</a>, function in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#g-enum-get-value-by-nick" title="g_enum_get_value_by_nick ()">g_enum_get_value_by_nick</a>, function in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#g-enum-register-static" title="g_enum_register_static ()">g_enum_register_static</a>, function in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<a name="idxF"></a><h3 class="title">F</h3>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#GFlagsClass" title="struct GFlagsClass">GFlagsClass</a>, struct in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#GFlagsValue" title="struct GFlagsValue">GFlagsValue</a>, struct in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#G-FLAGS-CLASS:CAPS" title="G_FLAGS_CLASS()">G_FLAGS_CLASS</a>, macro in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#G-FLAGS-CLASS-TYPE:CAPS" title="G_FLAGS_CLASS_TYPE()">G_FLAGS_CLASS_TYPE</a>, macro in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#G-FLAGS-CLASS-TYPE-NAME:CAPS" title="G_FLAGS_CLASS_TYPE_NAME()">G_FLAGS_CLASS_TYPE_NAME</a>, macro in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#g-flags-complete-type-info" title="g_flags_complete_type_info ()">g_flags_complete_type_info</a>, function in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#g-flags-get-first-value" title="g_flags_get_first_value ()">g_flags_get_first_value</a>, function in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#g-flags-get-value-by-name" title="g_flags_get_value_by_name ()">g_flags_get_value_by_name</a>, function in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#g-flags-get-value-by-nick" title="g_flags_get_value_by_nick ()">g_flags_get_value_by_nick</a>, function in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#g-flags-register-static" title="g_flags_register_static ()">g_flags_register_static</a>, function in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<a name="idxI"></a><h3 class="title">I</h3>
<dt>
<a class="link" href="gobject-Type-Information.html#G-IMPLEMENT-INTERFACE:CAPS" title="G_IMPLEMENT_INTERFACE()">G_IMPLEMENT_INTERFACE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GTypeModule.html#G-IMPLEMENT-INTERFACE-DYNAMIC:CAPS" title="G_IMPLEMENT_INTERFACE_DYNAMIC()">G_IMPLEMENT_INTERFACE_DYNAMIC</a>, macro in <a class="link" href="GTypeModule.html" title="GTypeModule">GTypeModule</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#GInitiallyUnowned" title="GInitiallyUnowned">GInitiallyUnowned</a>, typedef in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#GInitiallyUnownedClass" title="GInitiallyUnownedClass">GInitiallyUnownedClass</a>, typedef in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#GInstanceInitFunc" title="GInstanceInitFunc ()">GInstanceInitFunc</a>, user_function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#GInterfaceFinalizeFunc" title="GInterfaceFinalizeFunc ()">GInterfaceFinalizeFunc</a>, user_function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#GInterfaceInfo" title="struct GInterfaceInfo">GInterfaceInfo</a>, struct in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#GInterfaceInitFunc" title="GInterfaceInitFunc ()">GInterfaceInitFunc</a>, user_function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#G-IS-ENUM-CLASS:CAPS" title="G_IS_ENUM_CLASS()">G_IS_ENUM_CLASS</a>, macro in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#G-IS-FLAGS-CLASS:CAPS" title="G_IS_FLAGS_CLASS()">G_IS_FLAGS_CLASS</a>, macro in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#G-IS-OBJECT:CAPS" title="G_IS_OBJECT()">G_IS_OBJECT</a>, macro in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#G-IS-OBJECT-CLASS:CAPS" title="G_IS_OBJECT_CLASS()">G_IS_OBJECT_CLASS</a>, macro in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#G-IS-PARAM-SPEC:CAPS" title="G_IS_PARAM_SPEC()">G_IS_PARAM_SPEC</a>, macro in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-BOOLEAN:CAPS" title="G_IS_PARAM_SPEC_BOOLEAN()">G_IS_PARAM_SPEC_BOOLEAN</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-BOXED:CAPS" title="G_IS_PARAM_SPEC_BOXED()">G_IS_PARAM_SPEC_BOXED</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-CHAR:CAPS" title="G_IS_PARAM_SPEC_CHAR()">G_IS_PARAM_SPEC_CHAR</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#G-IS-PARAM-SPEC-CLASS:CAPS" title="G_IS_PARAM_SPEC_CLASS()">G_IS_PARAM_SPEC_CLASS</a>, macro in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-DOUBLE:CAPS" title="G_IS_PARAM_SPEC_DOUBLE()">G_IS_PARAM_SPEC_DOUBLE</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-ENUM:CAPS" title="G_IS_PARAM_SPEC_ENUM()">G_IS_PARAM_SPEC_ENUM</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-FLAGS:CAPS" title="G_IS_PARAM_SPEC_FLAGS()">G_IS_PARAM_SPEC_FLAGS</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-FLOAT:CAPS" title="G_IS_PARAM_SPEC_FLOAT()">G_IS_PARAM_SPEC_FLOAT</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-GTYPE:CAPS" title="G_IS_PARAM_SPEC_GTYPE()">G_IS_PARAM_SPEC_GTYPE</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-INT:CAPS" title="G_IS_PARAM_SPEC_INT()">G_IS_PARAM_SPEC_INT</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-INT64:CAPS" title="G_IS_PARAM_SPEC_INT64()">G_IS_PARAM_SPEC_INT64</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-LONG:CAPS" title="G_IS_PARAM_SPEC_LONG()">G_IS_PARAM_SPEC_LONG</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-OBJECT:CAPS" title="G_IS_PARAM_SPEC_OBJECT()">G_IS_PARAM_SPEC_OBJECT</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-OVERRIDE:CAPS" title="G_IS_PARAM_SPEC_OVERRIDE()">G_IS_PARAM_SPEC_OVERRIDE</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-PARAM:CAPS" title="G_IS_PARAM_SPEC_PARAM()">G_IS_PARAM_SPEC_PARAM</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-POINTER:CAPS" title="G_IS_PARAM_SPEC_POINTER()">G_IS_PARAM_SPEC_POINTER</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-STRING:CAPS" title="G_IS_PARAM_SPEC_STRING()">G_IS_PARAM_SPEC_STRING</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-UCHAR:CAPS" title="G_IS_PARAM_SPEC_UCHAR()">G_IS_PARAM_SPEC_UCHAR</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-UINT:CAPS" title="G_IS_PARAM_SPEC_UINT()">G_IS_PARAM_SPEC_UINT</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-UINT64:CAPS" title="G_IS_PARAM_SPEC_UINT64()">G_IS_PARAM_SPEC_UINT64</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-ULONG:CAPS" title="G_IS_PARAM_SPEC_ULONG()">G_IS_PARAM_SPEC_ULONG</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-UNICHAR:CAPS" title="G_IS_PARAM_SPEC_UNICHAR()">G_IS_PARAM_SPEC_UNICHAR</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-VALUE-ARRAY:CAPS" title="G_IS_PARAM_SPEC_VALUE_ARRAY()">G_IS_PARAM_SPEC_VALUE_ARRAY</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-VARIANT:CAPS" title="G_IS_PARAM_SPEC_VARIANT()">G_IS_PARAM_SPEC_VARIANT</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Generic-values.html#G-IS-VALUE:CAPS" title="G_IS_VALUE()">G_IS_VALUE</a>, macro in <a class="link" href="gobject-Generic-values.html" title="Generic values">Generic values</a>
</dt>
<dd></dd>
<a name="idxO"></a><h3 class="title">O</h3>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#GObject-struct" title="struct GObject">GObject</a>, struct in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#G-OBJECT:CAPS" title="G_OBJECT()">G_OBJECT</a>, macro in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#GObject-notify" title='The "notify" signal'>GObject::notify</a>, object signal in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#GObjectClass" title="struct GObjectClass">GObjectClass</a>, struct in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#GObjectConstructParam" title="struct GObjectConstructParam">GObjectConstructParam</a>, struct in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#GObjectFinalizeFunc" title="GObjectFinalizeFunc ()">GObjectFinalizeFunc</a>, user_function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#GObjectGetPropertyFunc" title="GObjectGetPropertyFunc ()">GObjectGetPropertyFunc</a>, user_function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#GObjectSetPropertyFunc" title="GObjectSetPropertyFunc ()">GObjectSetPropertyFunc</a>, user_function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-add-toggle-ref" title="g_object_add_toggle_ref ()">g_object_add_toggle_ref</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-add-weak-pointer" title="g_object_add_weak_pointer ()">g_object_add_weak_pointer</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GBinding.html#g-object-bind-property" title="g_object_bind_property ()">g_object_bind_property</a>, function in <a class="link" href="GBinding.html" title="GBinding">GBinding</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GBinding.html#g-object-bind-property-full" title="g_object_bind_property_full ()">g_object_bind_property_full</a>, function in <a class="link" href="GBinding.html" title="GBinding">GBinding</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GBinding.html#g-object-bind-property-with-closures" title="g_object_bind_property_with_closures ()">g_object_bind_property_with_closures</a>, function in <a class="link" href="GBinding.html" title="GBinding">GBinding</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#G-OBJECT-CLASS:CAPS" title="G_OBJECT_CLASS()">G_OBJECT_CLASS</a>, macro in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-class-find-property" title="g_object_class_find_property ()">g_object_class_find_property</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-class-install-properties" title="g_object_class_install_properties ()">g_object_class_install_properties</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-class-install-property" title="g_object_class_install_property ()">g_object_class_install_property</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-class-list-properties" title="g_object_class_list_properties ()">g_object_class_list_properties</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#G-OBJECT-CLASS-NAME:CAPS" title="G_OBJECT_CLASS_NAME()">G_OBJECT_CLASS_NAME</a>, macro in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-class-override-property" title="g_object_class_override_property ()">g_object_class_override_property</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#G-OBJECT-CLASS-TYPE:CAPS" title="G_OBJECT_CLASS_TYPE()">G_OBJECT_CLASS_TYPE</a>, macro in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-connect" title="g_object_connect ()">g_object_connect</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-disconnect" title="g_object_disconnect ()">g_object_disconnect</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-force-floating" title="g_object_force_floating ()">g_object_force_floating</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-freeze-notify" title="g_object_freeze_notify ()">g_object_freeze_notify</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-get" title="g_object_get ()">g_object_get</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#G-OBJECT-GET-CLASS:CAPS" title="G_OBJECT_GET_CLASS()">G_OBJECT_GET_CLASS</a>, macro in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-get-data" title="g_object_get_data ()">g_object_get_data</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-get-property" title="g_object_get_property ()">g_object_get_property</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-get-qdata" title="g_object_get_qdata ()">g_object_get_qdata</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-get-valist" title="g_object_get_valist ()">g_object_get_valist</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-interface-find-property" title="g_object_interface_find_property ()">g_object_interface_find_property</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-interface-install-property" title="g_object_interface_install_property ()">g_object_interface_install_property</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-interface-list-properties" title="g_object_interface_list_properties ()">g_object_interface_list_properties</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-is-floating" title="g_object_is_floating ()">g_object_is_floating</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-new" title="g_object_new ()">g_object_new</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-newv" title="g_object_newv ()">g_object_newv</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-new-valist" title="g_object_new_valist ()">g_object_new_valist</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-notify" title="g_object_notify ()">g_object_notify</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-notify-by-pspec" title="g_object_notify_by_pspec ()">g_object_notify_by_pspec</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-ref" title="g_object_ref ()">g_object_ref</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-ref-sink" title="g_object_ref_sink ()">g_object_ref_sink</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-remove-toggle-ref" title="g_object_remove_toggle_ref ()">g_object_remove_toggle_ref</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-remove-weak-pointer" title="g_object_remove_weak_pointer ()">g_object_remove_weak_pointer</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-run-dispose" title="g_object_run_dispose ()">g_object_run_dispose</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-set" title="g_object_set ()">g_object_set</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-set-data" title="g_object_set_data ()">g_object_set_data</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-set-data-full" title="g_object_set_data_full ()">g_object_set_data_full</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-set-property" title="g_object_set_property ()">g_object_set_property</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-set-qdata" title="g_object_set_qdata ()">g_object_set_qdata</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-set-qdata-full" title="g_object_set_qdata_full ()">g_object_set_qdata_full</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-set-valist" title="g_object_set_valist ()">g_object_set_valist</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-steal-data" title="g_object_steal_data ()">g_object_steal_data</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-steal-qdata" title="g_object_steal_qdata ()">g_object_steal_qdata</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-thaw-notify" title="g_object_thaw_notify ()">g_object_thaw_notify</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#G-OBJECT-TYPE:CAPS" title="G_OBJECT_TYPE()">G_OBJECT_TYPE</a>, macro in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#G-OBJECT-TYPE-NAME:CAPS" title="G_OBJECT_TYPE_NAME()">G_OBJECT_TYPE_NAME</a>, macro in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-unref" title="g_object_unref ()">g_object_unref</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#G-OBJECT-WARN-INVALID-PROPERTY-ID:CAPS" title="G_OBJECT_WARN_INVALID_PROPERTY_ID()">G_OBJECT_WARN_INVALID_PROPERTY_ID</a>, macro in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-watch-closure" title="g_object_watch_closure ()">g_object_watch_closure</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-weak-ref" title="g_object_weak_ref ()">g_object_weak_ref</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-object-weak-unref" title="g_object_weak_unref ()">g_object_weak_unref</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<a name="idxP"></a><h3 class="title">P</h3>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#GParameter" title="struct GParameter">GParameter</a>, struct in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags">GParamFlags</a>, enum in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec">GParamSpec</a>, struct in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecBoolean" title="struct GParamSpecBoolean">GParamSpecBoolean</a>, struct in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecBoxed" title="struct GParamSpecBoxed">GParamSpecBoxed</a>, struct in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecChar" title="struct GParamSpecChar">GParamSpecChar</a>, struct in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#GParamSpecClass" title="struct GParamSpecClass">GParamSpecClass</a>, struct in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecDouble" title="struct GParamSpecDouble">GParamSpecDouble</a>, struct in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecEnum" title="struct GParamSpecEnum">GParamSpecEnum</a>, struct in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecFlags" title="struct GParamSpecFlags">GParamSpecFlags</a>, struct in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecFloat" title="struct GParamSpecFloat">GParamSpecFloat</a>, struct in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecGType" title="struct GParamSpecGType">GParamSpecGType</a>, struct in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecInt" title="struct GParamSpecInt">GParamSpecInt</a>, struct in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecInt64" title="struct GParamSpecInt64">GParamSpecInt64</a>, struct in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecLong" title="struct GParamSpecLong">GParamSpecLong</a>, struct in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecObject" title="struct GParamSpecObject">GParamSpecObject</a>, struct in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecOverride" title="struct GParamSpecOverride">GParamSpecOverride</a>, struct in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecParam" title="struct GParamSpecParam">GParamSpecParam</a>, struct in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecPointer" title="struct GParamSpecPointer">GParamSpecPointer</a>, struct in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#GParamSpecPool" title="GParamSpecPool">GParamSpecPool</a>, struct in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecString" title="struct GParamSpecString">GParamSpecString</a>, struct in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#GParamSpecTypeInfo" title="struct GParamSpecTypeInfo">GParamSpecTypeInfo</a>, struct in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecUChar" title="struct GParamSpecUChar">GParamSpecUChar</a>, struct in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecUInt" title="struct GParamSpecUInt">GParamSpecUInt</a>, struct in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecUInt64" title="struct GParamSpecUInt64">GParamSpecUInt64</a>, struct in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecULong" title="struct GParamSpecULong">GParamSpecULong</a>, struct in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecUnichar" title="struct GParamSpecUnichar">GParamSpecUnichar</a>, struct in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecValueArray" title="struct GParamSpecValueArray">GParamSpecValueArray</a>, struct in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecVariant" title="struct GParamSpecVariant">GParamSpecVariant</a>, struct in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#G-PARAM-MASK:CAPS" title="G_PARAM_MASK">G_PARAM_MASK</a>, macro in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#G-PARAM-READWRITE:CAPS" title="G_PARAM_READWRITE">G_PARAM_READWRITE</a>, macro in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#G-PARAM-SPEC:CAPS" title="G_PARAM_SPEC()">G_PARAM_SPEC</a>, macro in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-BOOLEAN:CAPS" title="G_PARAM_SPEC_BOOLEAN()">G_PARAM_SPEC_BOOLEAN</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-boolean" title="g_param_spec_boolean ()">g_param_spec_boolean</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-BOXED:CAPS" title="G_PARAM_SPEC_BOXED()">G_PARAM_SPEC_BOXED</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-boxed" title="g_param_spec_boxed ()">g_param_spec_boxed</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-char" title="g_param_spec_char ()">g_param_spec_char</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-CHAR:CAPS" title="G_PARAM_SPEC_CHAR()">G_PARAM_SPEC_CHAR</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#G-PARAM-SPEC-CLASS:CAPS" title="G_PARAM_SPEC_CLASS()">G_PARAM_SPEC_CLASS</a>, macro in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-DOUBLE:CAPS" title="G_PARAM_SPEC_DOUBLE()">G_PARAM_SPEC_DOUBLE</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-double" title="g_param_spec_double ()">g_param_spec_double</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-ENUM:CAPS" title="G_PARAM_SPEC_ENUM()">G_PARAM_SPEC_ENUM</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-enum" title="g_param_spec_enum ()">g_param_spec_enum</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-FLAGS:CAPS" title="G_PARAM_SPEC_FLAGS()">G_PARAM_SPEC_FLAGS</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-flags" title="g_param_spec_flags ()">g_param_spec_flags</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-FLOAT:CAPS" title="G_PARAM_SPEC_FLOAT()">G_PARAM_SPEC_FLOAT</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-float" title="g_param_spec_float ()">g_param_spec_float</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-spec-get-blurb" title="g_param_spec_get_blurb ()">g_param_spec_get_blurb</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#G-PARAM-SPEC-GET-CLASS:CAPS" title="G_PARAM_SPEC_GET_CLASS()">G_PARAM_SPEC_GET_CLASS</a>, macro in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-spec-get-name" title="g_param_spec_get_name ()">g_param_spec_get_name</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-spec-get-nick" title="g_param_spec_get_nick ()">g_param_spec_get_nick</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-spec-get-qdata" title="g_param_spec_get_qdata ()">g_param_spec_get_qdata</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-spec-get-redirect-target" title="g_param_spec_get_redirect_target ()">g_param_spec_get_redirect_target</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-gtype" title="g_param_spec_gtype ()">g_param_spec_gtype</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-GTYPE:CAPS" title="G_PARAM_SPEC_GTYPE()">G_PARAM_SPEC_GTYPE</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-int" title="g_param_spec_int ()">g_param_spec_int</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-INT:CAPS" title="G_PARAM_SPEC_INT()">G_PARAM_SPEC_INT</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-int64" title="g_param_spec_int64 ()">g_param_spec_int64</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-INT64:CAPS" title="G_PARAM_SPEC_INT64()">G_PARAM_SPEC_INT64</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-spec-internal" title="g_param_spec_internal ()">g_param_spec_internal</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-LONG:CAPS" title="G_PARAM_SPEC_LONG()">G_PARAM_SPEC_LONG</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-long" title="g_param_spec_long ()">g_param_spec_long</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-OBJECT:CAPS" title="G_PARAM_SPEC_OBJECT()">G_PARAM_SPEC_OBJECT</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-object" title="g_param_spec_object ()">g_param_spec_object</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-override" title="g_param_spec_override ()">g_param_spec_override</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-OVERRIDE:CAPS" title="G_PARAM_SPEC_OVERRIDE()">G_PARAM_SPEC_OVERRIDE</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-PARAM:CAPS" title="G_PARAM_SPEC_PARAM()">G_PARAM_SPEC_PARAM</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-param" title="g_param_spec_param ()">g_param_spec_param</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-pointer" title="g_param_spec_pointer ()">g_param_spec_pointer</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-POINTER:CAPS" title="G_PARAM_SPEC_POINTER()">G_PARAM_SPEC_POINTER</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-spec-pool-insert" title="g_param_spec_pool_insert ()">g_param_spec_pool_insert</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-spec-pool-list" title="g_param_spec_pool_list ()">g_param_spec_pool_list</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-spec-pool-list-owned" title="g_param_spec_pool_list_owned ()">g_param_spec_pool_list_owned</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-spec-pool-lookup" title="g_param_spec_pool_lookup ()">g_param_spec_pool_lookup</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-spec-pool-new" title="g_param_spec_pool_new ()">g_param_spec_pool_new</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-spec-pool-remove" title="g_param_spec_pool_remove ()">g_param_spec_pool_remove</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-spec-ref" title="g_param_spec_ref ()">g_param_spec_ref</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-spec-ref-sink" title="g_param_spec_ref_sink ()">g_param_spec_ref_sink</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-spec-set-qdata" title="g_param_spec_set_qdata ()">g_param_spec_set_qdata</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-spec-set-qdata-full" title="g_param_spec_set_qdata_full ()">g_param_spec_set_qdata_full</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-spec-sink" title="g_param_spec_sink ()">g_param_spec_sink</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-spec-steal-qdata" title="g_param_spec_steal_qdata ()">g_param_spec_steal_qdata</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-string" title="g_param_spec_string ()">g_param_spec_string</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-STRING:CAPS" title="G_PARAM_SPEC_STRING()">G_PARAM_SPEC_STRING</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#G-PARAM-SPEC-TYPE:CAPS" title="G_PARAM_SPEC_TYPE()">G_PARAM_SPEC_TYPE</a>, macro in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#G-PARAM-SPEC-TYPE-NAME:CAPS" title="G_PARAM_SPEC_TYPE_NAME()">G_PARAM_SPEC_TYPE_NAME</a>, macro in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-uchar" title="g_param_spec_uchar ()">g_param_spec_uchar</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-UCHAR:CAPS" title="G_PARAM_SPEC_UCHAR()">G_PARAM_SPEC_UCHAR</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-uint" title="g_param_spec_uint ()">g_param_spec_uint</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-UINT:CAPS" title="G_PARAM_SPEC_UINT()">G_PARAM_SPEC_UINT</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-uint64" title="g_param_spec_uint64 ()">g_param_spec_uint64</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-UINT64:CAPS" title="G_PARAM_SPEC_UINT64()">G_PARAM_SPEC_UINT64</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-ulong" title="g_param_spec_ulong ()">g_param_spec_ulong</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-ULONG:CAPS" title="G_PARAM_SPEC_ULONG()">G_PARAM_SPEC_ULONG</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-unichar" title="g_param_spec_unichar ()">g_param_spec_unichar</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-UNICHAR:CAPS" title="G_PARAM_SPEC_UNICHAR()">G_PARAM_SPEC_UNICHAR</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-spec-unref" title="g_param_spec_unref ()">g_param_spec_unref</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-value-array" title="g_param_spec_value_array ()">g_param_spec_value_array</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-VALUE-ARRAY:CAPS" title="G_PARAM_SPEC_VALUE_ARRAY()">G_PARAM_SPEC_VALUE_ARRAY</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#G-PARAM-SPEC-VALUE-TYPE:CAPS" title="G_PARAM_SPEC_VALUE_TYPE()">G_PARAM_SPEC_VALUE_TYPE</a>, macro in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-variant" title="g_param_spec_variant ()">g_param_spec_variant</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-VARIANT:CAPS" title="G_PARAM_SPEC_VARIANT()">G_PARAM_SPEC_VARIANT</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#G-PARAM-STATIC-STRINGS:CAPS" title="G_PARAM_STATIC_STRINGS">G_PARAM_STATIC_STRINGS</a>, macro in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-type-register-static" title="g_param_type_register_static ()">g_param_type_register_static</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#G-PARAM-USER-SHIFT:CAPS" title="G_PARAM_USER_SHIFT">G_PARAM_USER_SHIFT</a>, macro in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-values-cmp" title="g_param_values_cmp ()">g_param_values_cmp</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-value-convert" title="g_param_value_convert ()">g_param_value_convert</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-value-defaults" title="g_param_value_defaults ()">g_param_value_defaults</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-value-set-default" title="g_param_value_set_default ()">g_param_value_set_default</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#g-param-value-validate" title="g_param_value_validate ()">g_param_value_validate</a>, function in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#g-pointer-type-register-static" title="g_pointer_type_register_static ()">g_pointer_type_register_static</a>, function in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<a name="idxS"></a><h3 class="title">S</h3>
<dt>
<a class="link" href="gobject-Signals.html#GSignalAccumulator" title="GSignalAccumulator ()">GSignalAccumulator</a>, user_function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#GSignalCMarshaller" title="GSignalCMarshaller">GSignalCMarshaller</a>, typedef in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#GSignalEmissionHook" title="GSignalEmissionHook ()">GSignalEmissionHook</a>, user_function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#GSignalFlags" title="enum GSignalFlags">GSignalFlags</a>, enum in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#GSignalInvocationHint" title="struct GSignalInvocationHint">GSignalInvocationHint</a>, struct in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#GSignalMatchType" title="enum GSignalMatchType">GSignalMatchType</a>, enum in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#GSignalQuery" title="struct GSignalQuery">GSignalQuery</a>, struct in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-accumulator-first-wins" title="g_signal_accumulator_first_wins ()">g_signal_accumulator_first_wins</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-accumulator-true-handled" title="g_signal_accumulator_true_handled ()">g_signal_accumulator_true_handled</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-add-emission-hook" title="g_signal_add_emission_hook ()">g_signal_add_emission_hook</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-chain-from-overridden" title="g_signal_chain_from_overridden ()">g_signal_chain_from_overridden</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-chain-from-overridden-handler" title="g_signal_chain_from_overridden_handler ()">g_signal_chain_from_overridden_handler</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-connect" title="g_signal_connect()">g_signal_connect</a>, macro in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-connect-after" title="g_signal_connect_after()">g_signal_connect_after</a>, macro in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-connect-closure" title="g_signal_connect_closure ()">g_signal_connect_closure</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-connect-closure-by-id" title="g_signal_connect_closure_by_id ()">g_signal_connect_closure_by_id</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-connect-data" title="g_signal_connect_data ()">g_signal_connect_data</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-connect-object" title="g_signal_connect_object ()">g_signal_connect_object</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-connect-swapped" title="g_signal_connect_swapped()">g_signal_connect_swapped</a>, macro in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-emit" title="g_signal_emit ()">g_signal_emit</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-emitv" title="g_signal_emitv ()">g_signal_emitv</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-emit-by-name" title="g_signal_emit_by_name ()">g_signal_emit_by_name</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-emit-valist" title="g_signal_emit_valist ()">g_signal_emit_valist</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#G-SIGNAL-FLAGS-MASK:CAPS" title="G_SIGNAL_FLAGS_MASK">G_SIGNAL_FLAGS_MASK</a>, macro in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-get-invocation-hint" title="g_signal_get_invocation_hint ()">g_signal_get_invocation_hint</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-handlers-block-by-func" title="g_signal_handlers_block_by_func()">g_signal_handlers_block_by_func</a>, macro in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-handlers-block-matched" title="g_signal_handlers_block_matched ()">g_signal_handlers_block_matched</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-handlers-disconnect-by-data" title="g_signal_handlers_disconnect_by_data()">g_signal_handlers_disconnect_by_data</a>, macro in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-handlers-disconnect-by-func" title="g_signal_handlers_disconnect_by_func()">g_signal_handlers_disconnect_by_func</a>, macro in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-handlers-disconnect-matched" title="g_signal_handlers_disconnect_matched ()">g_signal_handlers_disconnect_matched</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-handlers-unblock-by-func" title="g_signal_handlers_unblock_by_func()">g_signal_handlers_unblock_by_func</a>, macro in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-handlers-unblock-matched" title="g_signal_handlers_unblock_matched ()">g_signal_handlers_unblock_matched</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-handler-block" title="g_signal_handler_block ()">g_signal_handler_block</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-handler-disconnect" title="g_signal_handler_disconnect ()">g_signal_handler_disconnect</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-handler-find" title="g_signal_handler_find ()">g_signal_handler_find</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-handler-is-connected" title="g_signal_handler_is_connected ()">g_signal_handler_is_connected</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-handler-unblock" title="g_signal_handler_unblock ()">g_signal_handler_unblock</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-has-handler-pending" title="g_signal_has_handler_pending ()">g_signal_has_handler_pending</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-list-ids" title="g_signal_list_ids ()">g_signal_list_ids</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-lookup" title="g_signal_lookup ()">g_signal_lookup</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#G-SIGNAL-MATCH-MASK:CAPS" title="G_SIGNAL_MATCH_MASK">G_SIGNAL_MATCH_MASK</a>, macro in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-name" title="g_signal_name ()">g_signal_name</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-new" title="g_signal_new ()">g_signal_new</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-newv" title="g_signal_newv ()">g_signal_newv</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-new-class-handler" title="g_signal_new_class_handler ()">g_signal_new_class_handler</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-new-valist" title="g_signal_new_valist ()">g_signal_new_valist</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-override-class-closure" title="g_signal_override_class_closure ()">g_signal_override_class_closure</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-override-class-handler" title="g_signal_override_class_handler ()">g_signal_override_class_handler</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-parse-name" title="g_signal_parse_name ()">g_signal_parse_name</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-query" title="g_signal_query ()">g_signal_query</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-remove-emission-hook" title="g_signal_remove_emission_hook ()">g_signal_remove_emission_hook</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-stop-emission" title="g_signal_stop_emission ()">g_signal_stop_emission</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-stop-emission-by-name" title="g_signal_stop_emission_by_name ()">g_signal_stop_emission_by_name</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#g-signal-type-cclosure-new" title="g_signal_type_cclosure_new ()">g_signal_type_cclosure_new</a>, function in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Signals.html#G-SIGNAL-TYPE-STATIC-SCOPE:CAPS" title="G_SIGNAL_TYPE_STATIC_SCOPE">G_SIGNAL_TYPE_STATIC_SCOPE</a>, macro in <a class="link" href="gobject-Signals.html" title="Signals">Signals</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-source-set-closure" title="g_source_set_closure ()">g_source_set_closure</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#g-source-set-dummy-callback" title="g_source_set_dummy_callback ()">g_source_set_dummy_callback</a>, function in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Generic-values.html#g-strdup-value-contents" title="g_strdup_value_contents ()">g_strdup_value_contents</a>, function in <a class="link" href="gobject-Generic-values.html" title="Generic values">Generic values</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#GStrv" title="GStrv">GStrv</a>, typedef in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<a name="idxT"></a><h3 class="title">T</h3>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#GToggleNotify" title="GToggleNotify ()">GToggleNotify</a>, user_function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#GType" title="GType">GType</a>, typedef in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#GTypeClass" title="struct GTypeClass">GTypeClass</a>, struct in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#GTypeClassCacheFunc" title="GTypeClassCacheFunc ()">GTypeClassCacheFunc</a>, user_function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Varargs-Value-Collection.html#GTypeCValue" title="union GTypeCValue">GTypeCValue</a>, union in <a class="link" href="gobject-Varargs-Value-Collection.html" title="Varargs Value Collection">Varargs Value Collection</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#GTypeDebugFlags" title="enum GTypeDebugFlags">GTypeDebugFlags</a>, enum in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#GTypeFlags" title="enum GTypeFlags">GTypeFlags</a>, enum in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#GTypeFundamentalFlags" title="enum GTypeFundamentalFlags">GTypeFundamentalFlags</a>, enum in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#GTypeFundamentalInfo" title="struct GTypeFundamentalInfo">GTypeFundamentalInfo</a>, struct in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo">GTypeInfo</a>, struct in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#GTypeInstance" title="struct GTypeInstance">GTypeInstance</a>, struct in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#GTypeInterface" title="struct GTypeInterface">GTypeInterface</a>, struct in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#GTypeInterfaceCheckFunc" title="GTypeInterfaceCheckFunc ()">GTypeInterfaceCheckFunc</a>, user_function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GTypeModule.html#GTypeModule-struct" title="struct GTypeModule">GTypeModule</a>, struct in <a class="link" href="GTypeModule.html" title="GTypeModule">GTypeModule</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GTypeModule.html#GTypeModuleClass" title="struct GTypeModuleClass">GTypeModuleClass</a>, struct in <a class="link" href="GTypeModule.html" title="GTypeModule">GTypeModule</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GTypePlugin.html#GTypePlugin-struct" title="GTypePlugin">GTypePlugin</a>, struct in <a class="link" href="GTypePlugin.html" title="GTypePlugin">GTypePlugin</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GTypePlugin.html#GTypePluginClass" title="struct GTypePluginClass">GTypePluginClass</a>, struct in <a class="link" href="GTypePlugin.html" title="GTypePlugin">GTypePlugin</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GTypePlugin.html#GTypePluginCompleteInterfaceInfo" title="GTypePluginCompleteInterfaceInfo ()">GTypePluginCompleteInterfaceInfo</a>, user_function in <a class="link" href="GTypePlugin.html" title="GTypePlugin">GTypePlugin</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GTypePlugin.html#GTypePluginCompleteTypeInfo" title="GTypePluginCompleteTypeInfo ()">GTypePluginCompleteTypeInfo</a>, user_function in <a class="link" href="GTypePlugin.html" title="GTypePlugin">GTypePlugin</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GTypePlugin.html#GTypePluginUnuse" title="GTypePluginUnuse ()">GTypePluginUnuse</a>, user_function in <a class="link" href="GTypePlugin.html" title="GTypePlugin">GTypePlugin</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GTypePlugin.html#GTypePluginUse" title="GTypePluginUse ()">GTypePluginUse</a>, user_function in <a class="link" href="GTypePlugin.html" title="GTypePlugin">GTypePlugin</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#GTypeQuery" title="struct GTypeQuery">GTypeQuery</a>, struct in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#GTypeValueTable" title="struct GTypeValueTable">GTypeValueTable</a>, struct in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-add-class-cache-func" title="g_type_add_class_cache_func ()">g_type_add_class_cache_func</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-add-class-private" title="g_type_add_class_private ()">g_type_add_class_private</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-add-interface-check" title="g_type_add_interface_check ()">g_type_add_interface_check</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-add-interface-dynamic" title="g_type_add_interface_dynamic ()">g_type_add_interface_dynamic</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-add-interface-static" title="g_type_add_interface_static ()">g_type_add_interface_static</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#G-TYPE-ARRAY:CAPS" title="G_TYPE_ARRAY">G_TYPE_ARRAY</a>, macro in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-BOOLEAN:CAPS" title="G_TYPE_BOOLEAN">G_TYPE_BOOLEAN</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-BOXED:CAPS" title="G_TYPE_BOXED">G_TYPE_BOXED</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#G-TYPE-BYTES:CAPS" title="G_TYPE_BYTES">G_TYPE_BYTES</a>, macro in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#G-TYPE-BYTE-ARRAY:CAPS" title="G_TYPE_BYTE_ARRAY">G_TYPE_BYTE_ARRAY</a>, macro in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-CHAR:CAPS" title="G_TYPE_CHAR">G_TYPE_CHAR</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-CHECK-CLASS-CAST:CAPS" title="G_TYPE_CHECK_CLASS_CAST()">G_TYPE_CHECK_CLASS_CAST</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-CHECK-CLASS-TYPE:CAPS" title="G_TYPE_CHECK_CLASS_TYPE()">G_TYPE_CHECK_CLASS_TYPE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-CHECK-INSTANCE:CAPS" title="G_TYPE_CHECK_INSTANCE()">G_TYPE_CHECK_INSTANCE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-CHECK-INSTANCE-CAST:CAPS" title="G_TYPE_CHECK_INSTANCE_CAST()">G_TYPE_CHECK_INSTANCE_CAST</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-CHECK-INSTANCE-TYPE:CAPS" title="G_TYPE_CHECK_INSTANCE_TYPE()">G_TYPE_CHECK_INSTANCE_TYPE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-CHECK-VALUE:CAPS" title="G_TYPE_CHECK_VALUE()">G_TYPE_CHECK_VALUE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-CHECK-VALUE-TYPE:CAPS" title="G_TYPE_CHECK_VALUE_TYPE()">G_TYPE_CHECK_VALUE_TYPE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-children" title="g_type_children ()">g_type_children</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-class-add-private" title="g_type_class_add_private ()">g_type_class_add_private</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-CLASS-GET-PRIVATE:CAPS" title="G_TYPE_CLASS_GET_PRIVATE()">G_TYPE_CLASS_GET_PRIVATE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-class-peek" title="g_type_class_peek ()">g_type_class_peek</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-class-peek-parent" title="g_type_class_peek_parent ()">g_type_class_peek_parent</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-class-peek-static" title="g_type_class_peek_static ()">g_type_class_peek_static</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-class-ref" title="g_type_class_ref ()">g_type_class_ref</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-class-unref" title="g_type_class_unref ()">g_type_class_unref</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-class-unref-uncached" title="g_type_class_unref_uncached ()">g_type_class_unref_uncached</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Closures.html#G-TYPE-CLOSURE:CAPS" title="G_TYPE_CLOSURE">G_TYPE_CLOSURE</a>, macro in <a class="link" href="gobject-Closures.html" title="Closures">Closures</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-create-instance" title="g_type_create_instance ()">g_type_create_instance</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#G-TYPE-DATE:CAPS" title="G_TYPE_DATE">G_TYPE_DATE</a>, macro in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#G-TYPE-DATE-TIME:CAPS" title="G_TYPE_DATE_TIME">G_TYPE_DATE_TIME</a>, macro in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-default-interface-peek" title="g_type_default_interface_peek ()">g_type_default_interface_peek</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-default-interface-ref" title="g_type_default_interface_ref ()">g_type_default_interface_ref</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-default-interface-unref" title="g_type_default_interface_unref ()">g_type_default_interface_unref</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-depth" title="g_type_depth ()">g_type_depth</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-DOUBLE:CAPS" title="G_TYPE_DOUBLE">G_TYPE_DOUBLE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-ENUM:CAPS" title="G_TYPE_ENUM">G_TYPE_ENUM</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#G-TYPE-ERROR:CAPS" title="G_TYPE_ERROR">G_TYPE_ERROR</a>, macro in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-FLAGS:CAPS" title="G_TYPE_FLAGS">G_TYPE_FLAGS</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-FLAG-RESERVED-ID-BIT:CAPS" title="G_TYPE_FLAG_RESERVED_ID_BIT">G_TYPE_FLAG_RESERVED_ID_BIT</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-FLOAT:CAPS" title="G_TYPE_FLOAT">G_TYPE_FLOAT</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-free-instance" title="g_type_free_instance ()">g_type_free_instance</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-FROM-CLASS:CAPS" title="G_TYPE_FROM_CLASS()">G_TYPE_FROM_CLASS</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-FROM-INSTANCE:CAPS" title="G_TYPE_FROM_INSTANCE()">G_TYPE_FROM_INSTANCE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-FROM-INTERFACE:CAPS" title="G_TYPE_FROM_INTERFACE()">G_TYPE_FROM_INTERFACE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-from-name" title="g_type_from_name ()">g_type_from_name</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-fundamental" title="g_type_fundamental ()">g_type_fundamental</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-FUNDAMENTAL:CAPS" title="G_TYPE_FUNDAMENTAL()">G_TYPE_FUNDAMENTAL</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-FUNDAMENTAL-MAX:CAPS" title="G_TYPE_FUNDAMENTAL_MAX">G_TYPE_FUNDAMENTAL_MAX</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-fundamental-next" title="g_type_fundamental_next ()">g_type_fundamental_next</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-get-plugin" title="g_type_get_plugin ()">g_type_get_plugin</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-get-qdata" title="g_type_get_qdata ()">g_type_get_qdata</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#G-TYPE-GSTRING:CAPS" title="G_TYPE_GSTRING">G_TYPE_GSTRING</a>, macro in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-GTYPE:CAPS" title="G_TYPE_GTYPE">G_TYPE_GTYPE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#G-TYPE-HASH-TABLE:CAPS" title="G_TYPE_HASH_TABLE">G_TYPE_HASH_TABLE</a>, macro in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-HAS-VALUE-TABLE:CAPS" title="G_TYPE_HAS_VALUE_TABLE()">G_TYPE_HAS_VALUE_TABLE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-init" title="g_type_init ()">g_type_init</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#G-TYPE-INITIALLY-UNOWNED:CAPS" title="G_TYPE_INITIALLY_UNOWNED">G_TYPE_INITIALLY_UNOWNED</a>, macro in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-init-with-debug-flags" title="g_type_init_with_debug_flags ()">g_type_init_with_debug_flags</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-INSTANCE-GET-CLASS:CAPS" title="G_TYPE_INSTANCE_GET_CLASS()">G_TYPE_INSTANCE_GET_CLASS</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-INSTANCE-GET-INTERFACE:CAPS" title="G_TYPE_INSTANCE_GET_INTERFACE()">G_TYPE_INSTANCE_GET_INTERFACE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-INSTANCE-GET-PRIVATE:CAPS" title="G_TYPE_INSTANCE_GET_PRIVATE()">G_TYPE_INSTANCE_GET_PRIVATE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-INT:CAPS" title="G_TYPE_INT">G_TYPE_INT</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-INT64:CAPS" title="G_TYPE_INT64">G_TYPE_INT64</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-INTERFACE:CAPS" title="G_TYPE_INTERFACE">G_TYPE_INTERFACE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-interfaces" title="g_type_interfaces ()">g_type_interfaces</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-interface-add-prerequisite" title="g_type_interface_add_prerequisite ()">g_type_interface_add_prerequisite</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-interface-get-plugin" title="g_type_interface_get_plugin ()">g_type_interface_get_plugin</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-interface-peek" title="g_type_interface_peek ()">g_type_interface_peek</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-interface-peek-parent" title="g_type_interface_peek_parent ()">g_type_interface_peek_parent</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-interface-prerequisites" title="g_type_interface_prerequisites ()">g_type_interface_prerequisites</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-INVALID:CAPS" title="G_TYPE_INVALID">G_TYPE_INVALID</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#G-TYPE-IO-CHANNEL:CAPS" title="G_TYPE_IO_CHANNEL">G_TYPE_IO_CHANNEL</a>, macro in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#G-TYPE-IO-CONDITION:CAPS" title="G_TYPE_IO_CONDITION">G_TYPE_IO_CONDITION</a>, macro in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-is-a" title="g_type_is_a ()">g_type_is_a</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-IS-ABSTRACT:CAPS" title="G_TYPE_IS_ABSTRACT()">G_TYPE_IS_ABSTRACT</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-IS-CLASSED:CAPS" title="G_TYPE_IS_CLASSED()">G_TYPE_IS_CLASSED</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-IS-DEEP-DERIVABLE:CAPS" title="G_TYPE_IS_DEEP_DERIVABLE()">G_TYPE_IS_DEEP_DERIVABLE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-IS-DERIVABLE:CAPS" title="G_TYPE_IS_DERIVABLE()">G_TYPE_IS_DERIVABLE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-IS-DERIVED:CAPS" title="G_TYPE_IS_DERIVED()">G_TYPE_IS_DERIVED</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#G-TYPE-IS-ENUM:CAPS" title="G_TYPE_IS_ENUM()">G_TYPE_IS_ENUM</a>, macro in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Enumeration-and-Flag-Types.html#G-TYPE-IS-FLAGS:CAPS" title="G_TYPE_IS_FLAGS()">G_TYPE_IS_FLAGS</a>, macro in <a class="link" href="gobject-Enumeration-and-Flag-Types.html" title="Enumeration and Flag Types">Enumeration and Flag Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-IS-FUNDAMENTAL:CAPS" title="G_TYPE_IS_FUNDAMENTAL()">G_TYPE_IS_FUNDAMENTAL</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-IS-INSTANTIATABLE:CAPS" title="G_TYPE_IS_INSTANTIATABLE()">G_TYPE_IS_INSTANTIATABLE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-IS-INTERFACE:CAPS" title="G_TYPE_IS_INTERFACE()">G_TYPE_IS_INTERFACE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#G-TYPE-IS-OBJECT:CAPS" title="G_TYPE_IS_OBJECT()">G_TYPE_IS_OBJECT</a>, macro in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-GParamSpec.html#G-TYPE-IS-PARAM:CAPS" title="G_TYPE_IS_PARAM()">G_TYPE_IS_PARAM</a>, macro in <a class="link" href="gobject-GParamSpec.html" title="GParamSpec">GParamSpec</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Generic-values.html#G-TYPE-IS-VALUE:CAPS" title="G_TYPE_IS_VALUE()">G_TYPE_IS_VALUE</a>, macro in <a class="link" href="gobject-Generic-values.html" title="Generic values">Generic values</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Generic-values.html#G-TYPE-IS-VALUE-ABSTRACT:CAPS" title="G_TYPE_IS_VALUE_ABSTRACT()">G_TYPE_IS_VALUE_ABSTRACT</a>, macro in <a class="link" href="gobject-Generic-values.html" title="Generic values">Generic values</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-IS-VALUE-TYPE:CAPS" title="G_TYPE_IS_VALUE_TYPE()">G_TYPE_IS_VALUE_TYPE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#G-TYPE-KEY-FILE:CAPS" title="G_TYPE_KEY_FILE">G_TYPE_KEY_FILE</a>, macro in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-LONG:CAPS" title="G_TYPE_LONG">G_TYPE_LONG</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#G-TYPE-MAIN-CONTEXT:CAPS" title="G_TYPE_MAIN_CONTEXT">G_TYPE_MAIN_CONTEXT</a>, macro in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#G-TYPE-MAIN-LOOP:CAPS" title="G_TYPE_MAIN_LOOP">G_TYPE_MAIN_LOOP</a>, macro in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-MAKE-FUNDAMENTAL:CAPS" title="G_TYPE_MAKE_FUNDAMENTAL()">G_TYPE_MAKE_FUNDAMENTAL</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#G-TYPE-MATCH-INFO:CAPS" title="G_TYPE_MATCH_INFO">G_TYPE_MATCH_INFO</a>, macro in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GTypeModule.html#g-type-module-add-interface" title="g_type_module_add_interface ()">g_type_module_add_interface</a>, function in <a class="link" href="GTypeModule.html" title="GTypeModule">GTypeModule</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GTypeModule.html#g-type-module-register-enum" title="g_type_module_register_enum ()">g_type_module_register_enum</a>, function in <a class="link" href="GTypeModule.html" title="GTypeModule">GTypeModule</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GTypeModule.html#g-type-module-register-flags" title="g_type_module_register_flags ()">g_type_module_register_flags</a>, function in <a class="link" href="GTypeModule.html" title="GTypeModule">GTypeModule</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GTypeModule.html#g-type-module-register-type" title="g_type_module_register_type ()">g_type_module_register_type</a>, function in <a class="link" href="GTypeModule.html" title="GTypeModule">GTypeModule</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GTypeModule.html#g-type-module-set-name" title="g_type_module_set_name ()">g_type_module_set_name</a>, function in <a class="link" href="GTypeModule.html" title="GTypeModule">GTypeModule</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GTypeModule.html#g-type-module-unuse" title="g_type_module_unuse ()">g_type_module_unuse</a>, function in <a class="link" href="GTypeModule.html" title="GTypeModule">GTypeModule</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GTypeModule.html#g-type-module-use" title="g_type_module_use ()">g_type_module_use</a>, function in <a class="link" href="GTypeModule.html" title="GTypeModule">GTypeModule</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-name" title="g_type_name ()">g_type_name</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-next-base" title="g_type_next_base ()">g_type_next_base</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-NONE:CAPS" title="G_TYPE_NONE">G_TYPE_NONE</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-OBJECT:CAPS" title="G_TYPE_OBJECT">G_TYPE_OBJECT</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-PARAM:CAPS" title="G_TYPE_PARAM">G_TYPE_PARAM</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-BOOLEAN:CAPS" title="G_TYPE_PARAM_BOOLEAN">G_TYPE_PARAM_BOOLEAN</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-BOXED:CAPS" title="G_TYPE_PARAM_BOXED">G_TYPE_PARAM_BOXED</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-CHAR:CAPS" title="G_TYPE_PARAM_CHAR">G_TYPE_PARAM_CHAR</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-DOUBLE:CAPS" title="G_TYPE_PARAM_DOUBLE">G_TYPE_PARAM_DOUBLE</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-ENUM:CAPS" title="G_TYPE_PARAM_ENUM">G_TYPE_PARAM_ENUM</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-FLAGS:CAPS" title="G_TYPE_PARAM_FLAGS">G_TYPE_PARAM_FLAGS</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-FLOAT:CAPS" title="G_TYPE_PARAM_FLOAT">G_TYPE_PARAM_FLOAT</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-GTYPE:CAPS" title="G_TYPE_PARAM_GTYPE">G_TYPE_PARAM_GTYPE</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-INT:CAPS" title="G_TYPE_PARAM_INT">G_TYPE_PARAM_INT</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-INT64:CAPS" title="G_TYPE_PARAM_INT64">G_TYPE_PARAM_INT64</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-LONG:CAPS" title="G_TYPE_PARAM_LONG">G_TYPE_PARAM_LONG</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-OBJECT:CAPS" title="G_TYPE_PARAM_OBJECT">G_TYPE_PARAM_OBJECT</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-OVERRIDE:CAPS" title="G_TYPE_PARAM_OVERRIDE">G_TYPE_PARAM_OVERRIDE</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-PARAM:CAPS" title="G_TYPE_PARAM_PARAM">G_TYPE_PARAM_PARAM</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-POINTER:CAPS" title="G_TYPE_PARAM_POINTER">G_TYPE_PARAM_POINTER</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-STRING:CAPS" title="G_TYPE_PARAM_STRING">G_TYPE_PARAM_STRING</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-UCHAR:CAPS" title="G_TYPE_PARAM_UCHAR">G_TYPE_PARAM_UCHAR</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-UINT:CAPS" title="G_TYPE_PARAM_UINT">G_TYPE_PARAM_UINT</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-UINT64:CAPS" title="G_TYPE_PARAM_UINT64">G_TYPE_PARAM_UINT64</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-ULONG:CAPS" title="G_TYPE_PARAM_ULONG">G_TYPE_PARAM_ULONG</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-UNICHAR:CAPS" title="G_TYPE_PARAM_UNICHAR">G_TYPE_PARAM_UNICHAR</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-VALUE-ARRAY:CAPS" title="G_TYPE_PARAM_VALUE_ARRAY">G_TYPE_PARAM_VALUE_ARRAY</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-VARIANT:CAPS" title="G_TYPE_PARAM_VARIANT">G_TYPE_PARAM_VARIANT</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-parent" title="g_type_parent ()">g_type_parent</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GTypePlugin.html#g-type-plugin-complete-interface-info" title="g_type_plugin_complete_interface_info ()">g_type_plugin_complete_interface_info</a>, function in <a class="link" href="GTypePlugin.html" title="GTypePlugin">GTypePlugin</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GTypePlugin.html#g-type-plugin-complete-type-info" title="g_type_plugin_complete_type_info ()">g_type_plugin_complete_type_info</a>, function in <a class="link" href="GTypePlugin.html" title="GTypePlugin">GTypePlugin</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GTypePlugin.html#g-type-plugin-unuse" title="g_type_plugin_unuse ()">g_type_plugin_unuse</a>, function in <a class="link" href="GTypePlugin.html" title="GTypePlugin">GTypePlugin</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="GTypePlugin.html#g-type-plugin-use" title="g_type_plugin_use ()">g_type_plugin_use</a>, function in <a class="link" href="GTypePlugin.html" title="GTypePlugin">GTypePlugin</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-POINTER:CAPS" title="G_TYPE_POINTER">G_TYPE_POINTER</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#G-TYPE-PTR-ARRAY:CAPS" title="G_TYPE_PTR_ARRAY">G_TYPE_PTR_ARRAY</a>, macro in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-qname" title="g_type_qname ()">g_type_qname</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-query" title="g_type_query ()">g_type_query</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#G-TYPE-REGEX:CAPS" title="G_TYPE_REGEX">G_TYPE_REGEX</a>, macro in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-register-dynamic" title="g_type_register_dynamic ()">g_type_register_dynamic</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-register-fundamental" title="g_type_register_fundamental ()">g_type_register_fundamental</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-register-static" title="g_type_register_static ()">g_type_register_static</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-register-static-simple" title="g_type_register_static_simple ()">g_type_register_static_simple</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-remove-class-cache-func" title="g_type_remove_class_cache_func ()">g_type_remove_class_cache_func</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-remove-interface-check" title="g_type_remove_interface_check ()">g_type_remove_interface_check</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-RESERVED-BSE-FIRST:CAPS" title="G_TYPE_RESERVED_BSE_FIRST">G_TYPE_RESERVED_BSE_FIRST</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-RESERVED-BSE-LAST:CAPS" title="G_TYPE_RESERVED_BSE_LAST">G_TYPE_RESERVED_BSE_LAST</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-RESERVED-GLIB-FIRST:CAPS" title="G_TYPE_RESERVED_GLIB_FIRST">G_TYPE_RESERVED_GLIB_FIRST</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-RESERVED-GLIB-LAST:CAPS" title="G_TYPE_RESERVED_GLIB_LAST">G_TYPE_RESERVED_GLIB_LAST</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-RESERVED-USER-FIRST:CAPS" title="G_TYPE_RESERVED_USER_FIRST">G_TYPE_RESERVED_USER_FIRST</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-set-qdata" title="g_type_set_qdata ()">g_type_set_qdata</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#G-TYPE-SOURCE:CAPS" title="G_TYPE_SOURCE">G_TYPE_SOURCE</a>, macro in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-STRING:CAPS" title="G_TYPE_STRING">G_TYPE_STRING</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#G-TYPE-STRV:CAPS" title="G_TYPE_STRV">G_TYPE_STRV</a>, macro in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-UCHAR:CAPS" title="G_TYPE_UCHAR">G_TYPE_UCHAR</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-UINT:CAPS" title="G_TYPE_UINT">G_TYPE_UINT</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-UINT64:CAPS" title="G_TYPE_UINT64">G_TYPE_UINT64</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-ULONG:CAPS" title="G_TYPE_ULONG">G_TYPE_ULONG</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Generic-values.html#G-TYPE-VALUE:CAPS" title="G_TYPE_VALUE">G_TYPE_VALUE</a>, macro in <a class="link" href="gobject-Generic-values.html" title="Generic values">Generic values</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Generic-values.html#G-TYPE-VALUE-ARRAY:CAPS" title="G_TYPE_VALUE_ARRAY">G_TYPE_VALUE_ARRAY</a>, macro in <a class="link" href="gobject-Generic-values.html" title="Generic values">Generic values</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#g-type-value-table-peek" title="g_type_value_table_peek ()">g_type_value_table_peek</a>, function in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Type-Information.html#G-TYPE-VARIANT:CAPS" title="G_TYPE_VARIANT">G_TYPE_VARIANT</a>, macro in <a class="link" href="gobject-Type-Information.html" title="Type Information">Type Information</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#G-TYPE-VARIANT-BUILDER:CAPS" title="G_TYPE_VARIANT_BUILDER">G_TYPE_VARIANT_BUILDER</a>, macro in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Boxed-Types.html#G-TYPE-VARIANT-TYPE:CAPS" title="G_TYPE_VARIANT_TYPE">G_TYPE_VARIANT_TYPE</a>, macro in <a class="link" href="gobject-Boxed-Types.html" title="Boxed Types">Boxed Types</a>
</dt>
<dd></dd>
<a name="idxV"></a><h3 class="title">V</h3>
<dt>
<a class="link" href="gobject-Generic-values.html#GValue" title="GValue">GValue</a>, struct in <a class="link" href="gobject-Generic-values.html" title="Generic values">Generic values</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Value-arrays.html#GValueArray" title="struct GValueArray">GValueArray</a>, struct in <a class="link" href="gobject-Value-arrays.html" title="Value arrays">Value arrays</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Generic-values.html#GValueTransform" title="GValueTransform ()">GValueTransform</a>, user_function in <a class="link" href="gobject-Generic-values.html" title="Generic values">Generic values</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Value-arrays.html#g-value-array-append" title="g_value_array_append ()">g_value_array_append</a>, function in <a class="link" href="gobject-Value-arrays.html" title="Value arrays">Value arrays</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Value-arrays.html#g-value-array-copy" title="g_value_array_copy ()">g_value_array_copy</a>, function in <a class="link" href="gobject-Value-arrays.html" title="Value arrays">Value arrays</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Value-arrays.html#g-value-array-free" title="g_value_array_free ()">g_value_array_free</a>, function in <a class="link" href="gobject-Value-arrays.html" title="Value arrays">Value arrays</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Value-arrays.html#g-value-array-get-nth" title="g_value_array_get_nth ()">g_value_array_get_nth</a>, function in <a class="link" href="gobject-Value-arrays.html" title="Value arrays">Value arrays</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Value-arrays.html#g-value-array-insert" title="g_value_array_insert ()">g_value_array_insert</a>, function in <a class="link" href="gobject-Value-arrays.html" title="Value arrays">Value arrays</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Value-arrays.html#g-value-array-new" title="g_value_array_new ()">g_value_array_new</a>, function in <a class="link" href="gobject-Value-arrays.html" title="Value arrays">Value arrays</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Value-arrays.html#g-value-array-prepend" title="g_value_array_prepend ()">g_value_array_prepend</a>, function in <a class="link" href="gobject-Value-arrays.html" title="Value arrays">Value arrays</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Value-arrays.html#g-value-array-remove" title="g_value_array_remove ()">g_value_array_remove</a>, function in <a class="link" href="gobject-Value-arrays.html" title="Value arrays">Value arrays</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Value-arrays.html#g-value-array-sort" title="g_value_array_sort ()">g_value_array_sort</a>, function in <a class="link" href="gobject-Value-arrays.html" title="Value arrays">Value arrays</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Value-arrays.html#g-value-array-sort-with-data" title="g_value_array_sort_with_data ()">g_value_array_sort_with_data</a>, function in <a class="link" href="gobject-Value-arrays.html" title="Value arrays">Value arrays</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Varargs-Value-Collection.html#G-VALUE-COLLECT:CAPS" title="G_VALUE_COLLECT()">G_VALUE_COLLECT</a>, macro in <a class="link" href="gobject-Varargs-Value-Collection.html" title="Varargs Value Collection">Varargs Value Collection</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Varargs-Value-Collection.html#G-VALUE-COLLECT-FORMAT-MAX-LENGTH:CAPS" title="G_VALUE_COLLECT_FORMAT_MAX_LENGTH">G_VALUE_COLLECT_FORMAT_MAX_LENGTH</a>, macro in <a class="link" href="gobject-Varargs-Value-Collection.html" title="Varargs Value Collection">Varargs Value Collection</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Varargs-Value-Collection.html#G-VALUE-COLLECT-INIT:CAPS" title="G_VALUE_COLLECT_INIT()">G_VALUE_COLLECT_INIT</a>, macro in <a class="link" href="gobject-Varargs-Value-Collection.html" title="Varargs Value Collection">Varargs Value Collection</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Generic-values.html#g-value-copy" title="g_value_copy ()">g_value_copy</a>, function in <a class="link" href="gobject-Generic-values.html" title="Generic values">Generic values</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-dup-boxed" title="g_value_dup_boxed ()">g_value_dup_boxed</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-dup-object" title="g_value_dup_object ()">g_value_dup_object</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-dup-param" title="g_value_dup_param ()">g_value_dup_param</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-dup-string" title="g_value_dup_string ()">g_value_dup_string</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-dup-variant" title="g_value_dup_variant ()">g_value_dup_variant</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Generic-values.html#g-value-fits-pointer" title="g_value_fits_pointer ()">g_value_fits_pointer</a>, function in <a class="link" href="gobject-Generic-values.html" title="Generic values">Generic values</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-boolean" title="g_value_get_boolean ()">g_value_get_boolean</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-boxed" title="g_value_get_boxed ()">g_value_get_boxed</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-char" title="g_value_get_char ()">g_value_get_char</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-double" title="g_value_get_double ()">g_value_get_double</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-enum" title="g_value_get_enum ()">g_value_get_enum</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-flags" title="g_value_get_flags ()">g_value_get_flags</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-float" title="g_value_get_float ()">g_value_get_float</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-gtype" title="g_value_get_gtype ()">g_value_get_gtype</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-int" title="g_value_get_int ()">g_value_get_int</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-int64" title="g_value_get_int64 ()">g_value_get_int64</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-long" title="g_value_get_long ()">g_value_get_long</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-object" title="g_value_get_object ()">g_value_get_object</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-param" title="g_value_get_param ()">g_value_get_param</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-pointer" title="g_value_get_pointer ()">g_value_get_pointer</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-schar" title="g_value_get_schar ()">g_value_get_schar</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-string" title="g_value_get_string ()">g_value_get_string</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-uchar" title="g_value_get_uchar ()">g_value_get_uchar</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-uint" title="g_value_get_uint ()">g_value_get_uint</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-uint64" title="g_value_get_uint64 ()">g_value_get_uint64</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-ulong" title="g_value_get_ulong ()">g_value_get_ulong</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-variant" title="g_value_get_variant ()">g_value_get_variant</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Generic-values.html#G-VALUE-HOLDS:CAPS" title="G_VALUE_HOLDS()">G_VALUE_HOLDS</a>, macro in <a class="link" href="gobject-Generic-values.html" title="Generic values">Generic values</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-BOOLEAN:CAPS" title="G_VALUE_HOLDS_BOOLEAN()">G_VALUE_HOLDS_BOOLEAN</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-BOXED:CAPS" title="G_VALUE_HOLDS_BOXED()">G_VALUE_HOLDS_BOXED</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-CHAR:CAPS" title="G_VALUE_HOLDS_CHAR()">G_VALUE_HOLDS_CHAR</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-DOUBLE:CAPS" title="G_VALUE_HOLDS_DOUBLE()">G_VALUE_HOLDS_DOUBLE</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-ENUM:CAPS" title="G_VALUE_HOLDS_ENUM()">G_VALUE_HOLDS_ENUM</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-FLAGS:CAPS" title="G_VALUE_HOLDS_FLAGS()">G_VALUE_HOLDS_FLAGS</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-FLOAT:CAPS" title="G_VALUE_HOLDS_FLOAT()">G_VALUE_HOLDS_FLOAT</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-GTYPE:CAPS" title="G_VALUE_HOLDS_GTYPE()">G_VALUE_HOLDS_GTYPE</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-INT:CAPS" title="G_VALUE_HOLDS_INT()">G_VALUE_HOLDS_INT</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-INT64:CAPS" title="G_VALUE_HOLDS_INT64()">G_VALUE_HOLDS_INT64</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-LONG:CAPS" title="G_VALUE_HOLDS_LONG()">G_VALUE_HOLDS_LONG</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-OBJECT:CAPS" title="G_VALUE_HOLDS_OBJECT()">G_VALUE_HOLDS_OBJECT</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-PARAM:CAPS" title="G_VALUE_HOLDS_PARAM()">G_VALUE_HOLDS_PARAM</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-POINTER:CAPS" title="G_VALUE_HOLDS_POINTER()">G_VALUE_HOLDS_POINTER</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-STRING:CAPS" title="G_VALUE_HOLDS_STRING()">G_VALUE_HOLDS_STRING</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-UCHAR:CAPS" title="G_VALUE_HOLDS_UCHAR()">G_VALUE_HOLDS_UCHAR</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-UINT:CAPS" title="G_VALUE_HOLDS_UINT()">G_VALUE_HOLDS_UINT</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-UINT64:CAPS" title="G_VALUE_HOLDS_UINT64()">G_VALUE_HOLDS_UINT64</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-ULONG:CAPS" title="G_VALUE_HOLDS_ULONG()">G_VALUE_HOLDS_ULONG</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-VARIANT:CAPS" title="G_VALUE_HOLDS_VARIANT()">G_VALUE_HOLDS_VARIANT</a>, macro in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Generic-values.html#g-value-init" title="g_value_init ()">g_value_init</a>, function in <a class="link" href="gobject-Generic-values.html" title="Generic values">Generic values</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Generic-values.html#G-VALUE-INIT:CAPS" title="G_VALUE_INIT">G_VALUE_INIT</a>, macro in <a class="link" href="gobject-Generic-values.html" title="Generic values">Generic values</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Varargs-Value-Collection.html#G-VALUE-LCOPY:CAPS" title="G_VALUE_LCOPY()">G_VALUE_LCOPY</a>, macro in <a class="link" href="gobject-Varargs-Value-Collection.html" title="Varargs Value Collection">Varargs Value Collection</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Generic-values.html#g-value-peek-pointer" title="g_value_peek_pointer ()">g_value_peek_pointer</a>, function in <a class="link" href="gobject-Generic-values.html" title="Generic values">Generic values</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Generic-values.html#g-value-register-transform-func" title="g_value_register_transform_func ()">g_value_register_transform_func</a>, function in <a class="link" href="gobject-Generic-values.html" title="Generic values">Generic values</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Generic-values.html#g-value-reset" title="g_value_reset ()">g_value_reset</a>, function in <a class="link" href="gobject-Generic-values.html" title="Generic values">Generic values</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-boolean" title="g_value_set_boolean ()">g_value_set_boolean</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-boxed" title="g_value_set_boxed ()">g_value_set_boxed</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-boxed-take-ownership" title="g_value_set_boxed_take_ownership ()">g_value_set_boxed_take_ownership</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-char" title="g_value_set_char ()">g_value_set_char</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-double" title="g_value_set_double ()">g_value_set_double</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-enum" title="g_value_set_enum ()">g_value_set_enum</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-flags" title="g_value_set_flags ()">g_value_set_flags</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-float" title="g_value_set_float ()">g_value_set_float</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-gtype" title="g_value_set_gtype ()">g_value_set_gtype</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Generic-values.html#g-value-set-instance" title="g_value_set_instance ()">g_value_set_instance</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-int" title="g_value_set_int ()">g_value_set_int</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-int64" title="g_value_set_int64 ()">g_value_set_int64</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-long" title="g_value_set_long ()">g_value_set_long</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-object" title="g_value_set_object ()">g_value_set_object</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-object-take-ownership" title="g_value_set_object_take_ownership ()">g_value_set_object_take_ownership</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-param" title="g_value_set_param ()">g_value_set_param</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-param-take-ownership" title="g_value_set_param_take_ownership ()">g_value_set_param_take_ownership</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-pointer" title="g_value_set_pointer ()">g_value_set_pointer</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-schar" title="g_value_set_schar ()">g_value_set_schar</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-static-boxed" title="g_value_set_static_boxed ()">g_value_set_static_boxed</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-static-string" title="g_value_set_static_string ()">g_value_set_static_string</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-string" title="g_value_set_string ()">g_value_set_string</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-string-take-ownership" title="g_value_set_string_take_ownership ()">g_value_set_string_take_ownership</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-uchar" title="g_value_set_uchar ()">g_value_set_uchar</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-uint" title="g_value_set_uint ()">g_value_set_uint</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-uint64" title="g_value_set_uint64 ()">g_value_set_uint64</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-ulong" title="g_value_set_ulong ()">g_value_set_ulong</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-variant" title="g_value_set_variant ()">g_value_set_variant</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-take-boxed" title="g_value_take_boxed ()">g_value_take_boxed</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-take-object" title="g_value_take_object ()">g_value_take_object</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-take-param" title="g_value_take_param ()">g_value_take_param</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-take-string" title="g_value_take_string ()">g_value_take_string</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-take-variant" title="g_value_take_variant ()">g_value_take_variant</a>, function in <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html" title="Parameters and Values">Standard Parameter and Value Types</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Generic-values.html#g-value-transform" title="g_value_transform ()">g_value_transform</a>, function in <a class="link" href="gobject-Generic-values.html" title="Generic values">Generic values</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Generic-values.html#G-VALUE-TYPE:CAPS" title="G_VALUE_TYPE()">G_VALUE_TYPE</a>, macro in <a class="link" href="gobject-Generic-values.html" title="Generic values">Generic values</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Generic-values.html#g-value-type-compatible" title="g_value_type_compatible ()">g_value_type_compatible</a>, function in <a class="link" href="gobject-Generic-values.html" title="Generic values">Generic values</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Generic-values.html#G-VALUE-TYPE-NAME:CAPS" title="G_VALUE_TYPE_NAME()">G_VALUE_TYPE_NAME</a>, macro in <a class="link" href="gobject-Generic-values.html" title="Generic values">Generic values</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Generic-values.html#g-value-type-transformable" title="g_value_type_transformable ()">g_value_type_transformable</a>, function in <a class="link" href="gobject-Generic-values.html" title="Generic values">Generic values</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-Generic-values.html#g-value-unset" title="g_value_unset ()">g_value_unset</a>, function in <a class="link" href="gobject-Generic-values.html" title="Generic values">Generic values</a>
</dt>
<dd></dd>
<a name="idxW"></a><h3 class="title">W</h3>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#GWeakNotify" title="GWeakNotify ()">GWeakNotify</a>, user_function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#GWeakRef" title="GWeakRef">GWeakRef</a>, struct in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-weak-ref-clear" title="g_weak_ref_clear ()">g_weak_ref_clear</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-weak-ref-get" title="g_weak_ref_get ()">g_weak_ref_get</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-weak-ref-init" title="g_weak_ref_init ()">g_weak_ref_init</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
<dt>
<a class="link" href="gobject-The-Base-Object-Type.html#g-weak-ref-set" title="g_weak_ref_set ()">g_weak_ref_set</a>, function in <a class="link" href="gobject-The-Base-Object-Type.html" title="GObject">The Base Object Type</a>
</dt>
<dd></dd>
</div>
<div class="footer">
<hr>
          Generated by GTK-Doc V1.18</div>
</body>
</html>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Type Information</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.76.1">
<link rel="home" href="index.html" title="GObject Reference Manual">
<link rel="up" href="rn01.html" title="API Reference">
<link rel="prev" href="rn01.html" title="API Reference">
<link rel="next" href="GTypePlugin.html" title="GTypePlugin">
<meta name="generator" content="GTK-Doc V1.18 (XML mode)">
<link rel="stylesheet" href="style.css" type="text/css">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF">
<table class="navigation" id="top" width="100%" summary="Navigation header" cellpadding="2" cellspacing="2">
<tr valign="middle">
<td><a accesskey="p" href="rn01.html"><img src="left.png" width="24" height="24" border="0" alt="Prev"></a></td>
<td><a accesskey="u" href="rn01.html"><img src="up.png" width="24" height="24" border="0" alt="Up"></a></td>
<td><a accesskey="h" href="index.html"><img src="home.png" width="24" height="24" border="0" alt="Home"></a></td>
<th width="100%" align="center">GObject Reference Manual</th>
<td><a accesskey="n" href="GTypePlugin.html"><img src="right.png" width="24" height="24" border="0" alt="Next"></a></td>
</tr>
<tr><td colspan="5" class="shortcuts">
<a href="#gobject-Type-Information.synopsis" class="shortcut">Top</a>
                   | 
                  <a href="#gobject-Type-Information.description" class="shortcut">Description</a>
</td></tr>
</table>
<div class="refentry">
<a name="gobject-Type-Information"></a><div class="titlepage"></div>
<div class="refnamediv"><table width="100%"><tr>
<td valign="top">
<h2><span class="refentrytitle"><a name="gobject-Type-Information.top_of_page"></a>Type Information</span></h2>
<p>Type Information — The GLib Runtime type identification and
    management system</p>
</td>
<td valign="top" align="right"></td>
</tr></table></div>
<div class="refsynopsisdiv">
<a name="gobject-Type-Information.synopsis"></a><h2>Synopsis</h2>
<pre class="synopsis">
#include &lt;glib-object.h&gt;

typedef             <a class="link" href="gobject-Type-Information.html#GType" title="GType">GType</a>;
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-FUNDAMENTAL:CAPS" title="G_TYPE_FUNDAMENTAL()">G_TYPE_FUNDAMENTAL</a>                  (type)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-FUNDAMENTAL-MAX:CAPS" title="G_TYPE_FUNDAMENTAL_MAX">G_TYPE_FUNDAMENTAL_MAX</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-MAKE-FUNDAMENTAL:CAPS" title="G_TYPE_MAKE_FUNDAMENTAL()">G_TYPE_MAKE_FUNDAMENTAL</a>             (x)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-IS-ABSTRACT:CAPS" title="G_TYPE_IS_ABSTRACT()">G_TYPE_IS_ABSTRACT</a>                  (type)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-IS-DERIVED:CAPS" title="G_TYPE_IS_DERIVED()">G_TYPE_IS_DERIVED</a>                   (type)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-IS-FUNDAMENTAL:CAPS" title="G_TYPE_IS_FUNDAMENTAL()">G_TYPE_IS_FUNDAMENTAL</a>               (type)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-IS-VALUE-TYPE:CAPS" title="G_TYPE_IS_VALUE_TYPE()">G_TYPE_IS_VALUE_TYPE</a>                (type)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-HAS-VALUE-TABLE:CAPS" title="G_TYPE_HAS_VALUE_TABLE()">G_TYPE_HAS_VALUE_TABLE</a>              (type)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-IS-CLASSED:CAPS" title="G_TYPE_IS_CLASSED()">G_TYPE_IS_CLASSED</a>                   (type)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-IS-INSTANTIATABLE:CAPS" title="G_TYPE_IS_INSTANTIATABLE()">G_TYPE_IS_INSTANTIATABLE</a>            (type)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-IS-DERIVABLE:CAPS" title="G_TYPE_IS_DERIVABLE()">G_TYPE_IS_DERIVABLE</a>                 (type)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-IS-DEEP-DERIVABLE:CAPS" title="G_TYPE_IS_DEEP_DERIVABLE()">G_TYPE_IS_DEEP_DERIVABLE</a>            (type)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-IS-INTERFACE:CAPS" title="G_TYPE_IS_INTERFACE()">G_TYPE_IS_INTERFACE</a>                 (type)
struct              <a class="link" href="gobject-Type-Information.html#GTypeInterface" title="struct GTypeInterface">GTypeInterface</a>;
struct              <a class="link" href="gobject-Type-Information.html#GTypeInstance" title="struct GTypeInstance">GTypeInstance</a>;
struct              <a class="link" href="gobject-Type-Information.html#GTypeClass" title="struct GTypeClass">GTypeClass</a>;
struct              <a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo">GTypeInfo</a>;
struct              <a class="link" href="gobject-Type-Information.html#GTypeFundamentalInfo" title="struct GTypeFundamentalInfo">GTypeFundamentalInfo</a>;
struct              <a class="link" href="gobject-Type-Information.html#GInterfaceInfo" title="struct GInterfaceInfo">GInterfaceInfo</a>;
struct              <a class="link" href="gobject-Type-Information.html#GTypeValueTable" title="struct GTypeValueTable">GTypeValueTable</a>;
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-FROM-INSTANCE:CAPS" title="G_TYPE_FROM_INSTANCE()">G_TYPE_FROM_INSTANCE</a>                (instance)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-FROM-CLASS:CAPS" title="G_TYPE_FROM_CLASS()">G_TYPE_FROM_CLASS</a>                   (g_class)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-FROM-INTERFACE:CAPS" title="G_TYPE_FROM_INTERFACE()">G_TYPE_FROM_INTERFACE</a>               (g_iface)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-INSTANCE-GET-CLASS:CAPS" title="G_TYPE_INSTANCE_GET_CLASS()">G_TYPE_INSTANCE_GET_CLASS</a>           (instance,
                                                         g_type,
                                                         c_type)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-INSTANCE-GET-INTERFACE:CAPS" title="G_TYPE_INSTANCE_GET_INTERFACE()">G_TYPE_INSTANCE_GET_INTERFACE</a>       (instance,
                                                         g_type,
                                                         c_type)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-INSTANCE-GET-PRIVATE:CAPS" title="G_TYPE_INSTANCE_GET_PRIVATE()">G_TYPE_INSTANCE_GET_PRIVATE</a>         (instance,
                                                         g_type,
                                                         c_type)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-CLASS-GET-PRIVATE:CAPS" title="G_TYPE_CLASS_GET_PRIVATE()">G_TYPE_CLASS_GET_PRIVATE</a>            (klass,
                                                         g_type,
                                                         c_type)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-CHECK-INSTANCE:CAPS" title="G_TYPE_CHECK_INSTANCE()">G_TYPE_CHECK_INSTANCE</a>               (instance)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-CHECK-INSTANCE-CAST:CAPS" title="G_TYPE_CHECK_INSTANCE_CAST()">G_TYPE_CHECK_INSTANCE_CAST</a>          (instance,
                                                         g_type,
                                                         c_type)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-CHECK-INSTANCE-TYPE:CAPS" title="G_TYPE_CHECK_INSTANCE_TYPE()">G_TYPE_CHECK_INSTANCE_TYPE</a>          (instance,
                                                         g_type)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-CHECK-CLASS-CAST:CAPS" title="G_TYPE_CHECK_CLASS_CAST()">G_TYPE_CHECK_CLASS_CAST</a>             (g_class,
                                                         g_type,
                                                         c_type)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-CHECK-CLASS-TYPE:CAPS" title="G_TYPE_CHECK_CLASS_TYPE()">G_TYPE_CHECK_CLASS_TYPE</a>             (g_class,
                                                         g_type)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-CHECK-VALUE:CAPS" title="G_TYPE_CHECK_VALUE()">G_TYPE_CHECK_VALUE</a>                  (value)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-CHECK-VALUE-TYPE:CAPS" title="G_TYPE_CHECK_VALUE_TYPE()">G_TYPE_CHECK_VALUE_TYPE</a>             (value,
                                                         g_type)
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-FLAG-RESERVED-ID-BIT:CAPS" title="G_TYPE_FLAG_RESERVED_ID_BIT">G_TYPE_FLAG_RESERVED_ID_BIT</a>
<span class="returnvalue">void</span>                <a class="link" href="gobject-Type-Information.html#g-type-init" title="g_type_init ()">g_type_init</a>                         (<em class="parameter"><code><span class="type">void</span></code></em>);
enum                <a class="link" href="gobject-Type-Information.html#GTypeDebugFlags" title="enum GTypeDebugFlags">GTypeDebugFlags</a>;
<span class="returnvalue">void</span>                <a class="link" href="gobject-Type-Information.html#g-type-init-with-debug-flags" title="g_type_init_with_debug_flags ()">g_type_init_with_debug_flags</a>        (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeDebugFlags" title="enum GTypeDebugFlags"><span class="type">GTypeDebugFlags</span></a> debug_flags</code></em>);
const <a href="../glib/glib-Basic-Types.html#gchar"><span class="returnvalue">gchar</span></a> *       <a class="link" href="gobject-Type-Information.html#g-type-name" title="g_type_name ()">g_type_name</a>                         (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>);
<a href="../glib/glib-Quarks.html#GQuark"><span class="returnvalue">GQuark</span></a>              <a class="link" href="gobject-Type-Information.html#g-type-qname" title="g_type_qname ()">g_type_qname</a>                        (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>);
<a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a>               <a class="link" href="gobject-Type-Information.html#g-type-from-name" title="g_type_from_name ()">g_type_from_name</a>                    (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>);
<a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a>               <a class="link" href="gobject-Type-Information.html#g-type-parent" title="g_type_parent ()">g_type_parent</a>                       (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>);
<a href="../glib/glib-Basic-Types.html#guint"><span class="returnvalue">guint</span></a>               <a class="link" href="gobject-Type-Information.html#g-type-depth" title="g_type_depth ()">g_type_depth</a>                        (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>);
<a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a>               <a class="link" href="gobject-Type-Information.html#g-type-next-base" title="g_type_next_base ()">g_type_next_base</a>                    (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> leaf_type</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> root_type</code></em>);
<a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            <a class="link" href="gobject-Type-Information.html#g-type-is-a" title="g_type_is_a ()">g_type_is_a</a>                         (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> is_a_type</code></em>);
<a href="../glib/glib-Basic-Types.html#gpointer"><span class="returnvalue">gpointer</span></a>            <a class="link" href="gobject-Type-Information.html#g-type-class-ref" title="g_type_class_ref ()">g_type_class_ref</a>                    (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>);
<a href="../glib/glib-Basic-Types.html#gpointer"><span class="returnvalue">gpointer</span></a>            <a class="link" href="gobject-Type-Information.html#g-type-class-peek" title="g_type_class_peek ()">g_type_class_peek</a>                   (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>);
<a href="../glib/glib-Basic-Types.html#gpointer"><span class="returnvalue">gpointer</span></a>            <a class="link" href="gobject-Type-Information.html#g-type-class-peek-static" title="g_type_class_peek_static ()">g_type_class_peek_static</a>            (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Type-Information.html#g-type-class-unref" title="g_type_class_unref ()">g_type_class_unref</a>                  (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_class</code></em>);
<a href="../glib/glib-Basic-Types.html#gpointer"><span class="returnvalue">gpointer</span></a>            <a class="link" href="gobject-Type-Information.html#g-type-class-peek-parent" title="g_type_class_peek_parent ()">g_type_class_peek_parent</a>            (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_class</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Type-Information.html#g-type-class-add-private" title="g_type_class_add_private ()">g_type_class_add_private</a>            (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_class</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gsize"><span class="type">gsize</span></a> private_size</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Type-Information.html#g-type-add-class-private" title="g_type_add_class_private ()">g_type_add_class_private</a>            (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> class_type</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gsize"><span class="type">gsize</span></a> private_size</code></em>);
<a href="../glib/glib-Basic-Types.html#gpointer"><span class="returnvalue">gpointer</span></a>            <a class="link" href="gobject-Type-Information.html#g-type-interface-peek" title="g_type_interface_peek ()">g_type_interface_peek</a>               (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> instance_class</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> iface_type</code></em>);
<a href="../glib/glib-Basic-Types.html#gpointer"><span class="returnvalue">gpointer</span></a>            <a class="link" href="gobject-Type-Information.html#g-type-interface-peek-parent" title="g_type_interface_peek_parent ()">g_type_interface_peek_parent</a>        (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_iface</code></em>);
<a href="../glib/glib-Basic-Types.html#gpointer"><span class="returnvalue">gpointer</span></a>            <a class="link" href="gobject-Type-Information.html#g-type-default-interface-ref" title="g_type_default_interface_ref ()">g_type_default_interface_ref</a>        (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> g_type</code></em>);
<a href="../glib/glib-Basic-Types.html#gpointer"><span class="returnvalue">gpointer</span></a>            <a class="link" href="gobject-Type-Information.html#g-type-default-interface-peek" title="g_type_default_interface_peek ()">g_type_default_interface_peek</a>       (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> g_type</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Type-Information.html#g-type-default-interface-unref" title="g_type_default_interface_unref ()">g_type_default_interface_unref</a>      (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_iface</code></em>);
<a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a> *             <a class="link" href="gobject-Type-Information.html#g-type-children" title="g_type_children ()">g_type_children</a>                     (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> *n_children</code></em>);
<a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a> *             <a class="link" href="gobject-Type-Information.html#g-type-interfaces" title="g_type_interfaces ()">g_type_interfaces</a>                   (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> *n_interfaces</code></em>);
<a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a> *             <a class="link" href="gobject-Type-Information.html#g-type-interface-prerequisites" title="g_type_interface_prerequisites ()">g_type_interface_prerequisites</a>      (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> interface_type</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> *n_prerequisites</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Type-Information.html#g-type-set-qdata" title="g_type_set_qdata ()">g_type_set_qdata</a>                    (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Quarks.html#GQuark"><span class="type">GQuark</span></a> quark</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> data</code></em>);
<a href="../glib/glib-Basic-Types.html#gpointer"><span class="returnvalue">gpointer</span></a>            <a class="link" href="gobject-Type-Information.html#g-type-get-qdata" title="g_type_get_qdata ()">g_type_get_qdata</a>                    (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Quarks.html#GQuark"><span class="type">GQuark</span></a> quark</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Type-Information.html#g-type-query" title="g_type_query ()">g_type_query</a>                        (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeQuery" title="struct GTypeQuery"><span class="type">GTypeQuery</span></a> *query</code></em>);
struct              <a class="link" href="gobject-Type-Information.html#GTypeQuery" title="struct GTypeQuery">GTypeQuery</a>;
<span class="returnvalue">void</span>                (<a class="link" href="gobject-Type-Information.html#GBaseInitFunc" title="GBaseInitFunc ()">*GBaseInitFunc</a>)                    (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_class</code></em>);
<span class="returnvalue">void</span>                (<a class="link" href="gobject-Type-Information.html#GBaseFinalizeFunc" title="GBaseFinalizeFunc ()">*GBaseFinalizeFunc</a>)                (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_class</code></em>);
<span class="returnvalue">void</span>                (<a class="link" href="gobject-Type-Information.html#GClassInitFunc" title="GClassInitFunc ()">*GClassInitFunc</a>)                   (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_class</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> class_data</code></em>);
<span class="returnvalue">void</span>                (<a class="link" href="gobject-Type-Information.html#GClassFinalizeFunc" title="GClassFinalizeFunc ()">*GClassFinalizeFunc</a>)               (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_class</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> class_data</code></em>);
<span class="returnvalue">void</span>                (<a class="link" href="gobject-Type-Information.html#GInstanceInitFunc" title="GInstanceInitFunc ()">*GInstanceInitFunc</a>)                (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeInstance" title="struct GTypeInstance"><span class="type">GTypeInstance</span></a> *instance</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_class</code></em>);
<span class="returnvalue">void</span>                (<a class="link" href="gobject-Type-Information.html#GInterfaceInitFunc" title="GInterfaceInitFunc ()">*GInterfaceInitFunc</a>)               (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_iface</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> iface_data</code></em>);
<span class="returnvalue">void</span>                (<a class="link" href="gobject-Type-Information.html#GInterfaceFinalizeFunc" title="GInterfaceFinalizeFunc ()">*GInterfaceFinalizeFunc</a>)           (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_iface</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> iface_data</code></em>);
<a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            (<a class="link" href="gobject-Type-Information.html#GTypeClassCacheFunc" title="GTypeClassCacheFunc ()">*GTypeClassCacheFunc</a>)              (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> cache_data</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeClass" title="struct GTypeClass"><span class="type">GTypeClass</span></a> *g_class</code></em>);
enum                <a class="link" href="gobject-Type-Information.html#GTypeFlags" title="enum GTypeFlags">GTypeFlags</a>;
enum                <a class="link" href="gobject-Type-Information.html#GTypeFundamentalFlags" title="enum GTypeFundamentalFlags">GTypeFundamentalFlags</a>;
<a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a>               <a class="link" href="gobject-Type-Information.html#g-type-register-static" title="g_type_register_static ()">g_type_register_static</a>              (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> parent_type</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *type_name</code></em>,
                                                         <em class="parameter"><code>const <a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a> *info</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeFlags" title="enum GTypeFlags"><span class="type">GTypeFlags</span></a> flags</code></em>);
<a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a>               <a class="link" href="gobject-Type-Information.html#g-type-register-static-simple" title="g_type_register_static_simple ()">g_type_register_static_simple</a>       (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> parent_type</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *type_name</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> class_size</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GClassInitFunc" title="GClassInitFunc ()"><span class="type">GClassInitFunc</span></a> class_init</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> instance_size</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GInstanceInitFunc" title="GInstanceInitFunc ()"><span class="type">GInstanceInitFunc</span></a> instance_init</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeFlags" title="enum GTypeFlags"><span class="type">GTypeFlags</span></a> flags</code></em>);
<a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a>               <a class="link" href="gobject-Type-Information.html#g-type-register-dynamic" title="g_type_register_dynamic ()">g_type_register_dynamic</a>             (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> parent_type</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *type_name</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GTypePlugin.html" title="GTypePlugin"><span class="type">GTypePlugin</span></a> *plugin</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeFlags" title="enum GTypeFlags"><span class="type">GTypeFlags</span></a> flags</code></em>);
<a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a>               <a class="link" href="gobject-Type-Information.html#g-type-register-fundamental" title="g_type_register_fundamental ()">g_type_register_fundamental</a>         (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type_id</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *type_name</code></em>,
                                                         <em class="parameter"><code>const <a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a> *info</code></em>,
                                                         <em class="parameter"><code>const <a class="link" href="gobject-Type-Information.html#GTypeFundamentalInfo" title="struct GTypeFundamentalInfo"><span class="type">GTypeFundamentalInfo</span></a> *finfo</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeFlags" title="enum GTypeFlags"><span class="type">GTypeFlags</span></a> flags</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Type-Information.html#g-type-add-interface-static" title="g_type_add_interface_static ()">g_type_add_interface_static</a>         (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> instance_type</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> interface_type</code></em>,
                                                         <em class="parameter"><code>const <a class="link" href="gobject-Type-Information.html#GInterfaceInfo" title="struct GInterfaceInfo"><span class="type">GInterfaceInfo</span></a> *info</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Type-Information.html#g-type-add-interface-dynamic" title="g_type_add_interface_dynamic ()">g_type_add_interface_dynamic</a>        (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> instance_type</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> interface_type</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GTypePlugin.html" title="GTypePlugin"><span class="type">GTypePlugin</span></a> *plugin</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Type-Information.html#g-type-interface-add-prerequisite" title="g_type_interface_add_prerequisite ()">g_type_interface_add_prerequisite</a>   (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> interface_type</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> prerequisite_type</code></em>);
<a class="link" href="GTypePlugin.html" title="GTypePlugin"><span class="returnvalue">GTypePlugin</span></a> *       <a class="link" href="gobject-Type-Information.html#g-type-get-plugin" title="g_type_get_plugin ()">g_type_get_plugin</a>                   (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>);
<a class="link" href="GTypePlugin.html" title="GTypePlugin"><span class="returnvalue">GTypePlugin</span></a> *       <a class="link" href="gobject-Type-Information.html#g-type-interface-get-plugin" title="g_type_interface_get_plugin ()">g_type_interface_get_plugin</a>         (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> instance_type</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> interface_type</code></em>);
<a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a>               <a class="link" href="gobject-Type-Information.html#g-type-fundamental-next" title="g_type_fundamental_next ()">g_type_fundamental_next</a>             (<em class="parameter"><code><span class="type">void</span></code></em>);
<a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a>               <a class="link" href="gobject-Type-Information.html#g-type-fundamental" title="g_type_fundamental ()">g_type_fundamental</a>                  (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type_id</code></em>);
<a class="link" href="gobject-Type-Information.html#GTypeInstance" title="struct GTypeInstance"><span class="returnvalue">GTypeInstance</span></a> *     <a class="link" href="gobject-Type-Information.html#g-type-create-instance" title="g_type_create_instance ()">g_type_create_instance</a>              (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Type-Information.html#g-type-free-instance" title="g_type_free_instance ()">g_type_free_instance</a>                (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeInstance" title="struct GTypeInstance"><span class="type">GTypeInstance</span></a> *instance</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Type-Information.html#g-type-add-class-cache-func" title="g_type_add_class_cache_func ()">g_type_add_class_cache_func</a>         (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> cache_data</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeClassCacheFunc" title="GTypeClassCacheFunc ()"><span class="type">GTypeClassCacheFunc</span></a> cache_func</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Type-Information.html#g-type-remove-class-cache-func" title="g_type_remove_class_cache_func ()">g_type_remove_class_cache_func</a>      (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> cache_data</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeClassCacheFunc" title="GTypeClassCacheFunc ()"><span class="type">GTypeClassCacheFunc</span></a> cache_func</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Type-Information.html#g-type-class-unref-uncached" title="g_type_class_unref_uncached ()">g_type_class_unref_uncached</a>         (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_class</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Type-Information.html#g-type-add-interface-check" title="g_type_add_interface_check ()">g_type_add_interface_check</a>          (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> check_data</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeInterfaceCheckFunc" title="GTypeInterfaceCheckFunc ()"><span class="type">GTypeInterfaceCheckFunc</span></a> check_func</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Type-Information.html#g-type-remove-interface-check" title="g_type_remove_interface_check ()">g_type_remove_interface_check</a>       (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> check_data</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeInterfaceCheckFunc" title="GTypeInterfaceCheckFunc ()"><span class="type">GTypeInterfaceCheckFunc</span></a> check_func</code></em>);
<span class="returnvalue">void</span>                (<a class="link" href="gobject-Type-Information.html#GTypeInterfaceCheckFunc" title="GTypeInterfaceCheckFunc ()">*GTypeInterfaceCheckFunc</a>)          (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> check_data</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_iface</code></em>);
<a class="link" href="gobject-Type-Information.html#GTypeValueTable" title="struct GTypeValueTable"><span class="returnvalue">GTypeValueTable</span></a> *   <a class="link" href="gobject-Type-Information.html#g-type-value-table-peek" title="g_type_value_table_peek ()">g_type_value_table_peek</a>             (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>);
#define             <a class="link" href="gobject-Type-Information.html#G-DEFINE-TYPE:CAPS" title="G_DEFINE_TYPE()">G_DEFINE_TYPE</a>                       (TN,
                                                         t_n,
                                                         T_P)
#define             <a class="link" href="gobject-Type-Information.html#G-DEFINE-TYPE-WITH-CODE:CAPS" title="G_DEFINE_TYPE_WITH_CODE()">G_DEFINE_TYPE_WITH_CODE</a>             (TN,
                                                         t_n,
                                                         T_P,
                                                         _C_)
#define             <a class="link" href="gobject-Type-Information.html#G-DEFINE-ABSTRACT-TYPE:CAPS" title="G_DEFINE_ABSTRACT_TYPE()">G_DEFINE_ABSTRACT_TYPE</a>              (TN,
                                                         t_n,
                                                         T_P)
#define             <a class="link" href="gobject-Type-Information.html#G-DEFINE-ABSTRACT-TYPE-WITH-CODE:CAPS" title="G_DEFINE_ABSTRACT_TYPE_WITH_CODE()">G_DEFINE_ABSTRACT_TYPE_WITH_CODE</a>    (TN,
                                                         t_n,
                                                         T_P,
                                                         _C_)
#define             <a class="link" href="gobject-Type-Information.html#G-DEFINE-INTERFACE:CAPS" title="G_DEFINE_INTERFACE()">G_DEFINE_INTERFACE</a>                  (TN,
                                                         t_n,
                                                         T_P)
#define             <a class="link" href="gobject-Type-Information.html#G-DEFINE-INTERFACE-WITH-CODE:CAPS" title="G_DEFINE_INTERFACE_WITH_CODE()">G_DEFINE_INTERFACE_WITH_CODE</a>        (TN,
                                                         t_n,
                                                         T_P,
                                                         _C_)
#define             <a class="link" href="gobject-Type-Information.html#G-IMPLEMENT-INTERFACE:CAPS" title="G_IMPLEMENT_INTERFACE()">G_IMPLEMENT_INTERFACE</a>               (TYPE_IFACE,
                                                         iface_init)
#define             <a class="link" href="gobject-Type-Information.html#G-DEFINE-TYPE-EXTENDED:CAPS" title="G_DEFINE_TYPE_EXTENDED()">G_DEFINE_TYPE_EXTENDED</a>              (TN,
                                                         t_n,
                                                         T_P,
                                                         _f_,
                                                         _C_)
#define             <a class="link" href="gobject-Type-Information.html#G-DEFINE-BOXED-TYPE:CAPS" title="G_DEFINE_BOXED_TYPE()">G_DEFINE_BOXED_TYPE</a>                 (TypeName,
                                                         type_name,
                                                         copy_func,
                                                         free_func)
#define             <a class="link" href="gobject-Type-Information.html#G-DEFINE-BOXED-TYPE-WITH-CODE:CAPS" title="G_DEFINE_BOXED_TYPE_WITH_CODE()">G_DEFINE_BOXED_TYPE_WITH_CODE</a>       (TypeName,
                                                         type_name,
                                                         copy_func,
                                                         free_func,
                                                         _C_)
#define             <a class="link" href="gobject-Type-Information.html#G-DEFINE-POINTER-TYPE:CAPS" title="G_DEFINE_POINTER_TYPE()">G_DEFINE_POINTER_TYPE</a>               (TypeName,
                                                         type_name)
#define             <a class="link" href="gobject-Type-Information.html#G-DEFINE-POINTER-TYPE-WITH-CODE:CAPS" title="G_DEFINE_POINTER_TYPE_WITH_CODE()">G_DEFINE_POINTER_TYPE_WITH_CODE</a>     (TypeName,
                                                         type_name,
                                                         _C_)


#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-INVALID:CAPS" title="G_TYPE_INVALID">G_TYPE_INVALID</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-NONE:CAPS" title="G_TYPE_NONE">G_TYPE_NONE</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-INTERFACE:CAPS" title="G_TYPE_INTERFACE">G_TYPE_INTERFACE</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-CHAR:CAPS" title="G_TYPE_CHAR">G_TYPE_CHAR</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-UCHAR:CAPS" title="G_TYPE_UCHAR">G_TYPE_UCHAR</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-BOOLEAN:CAPS" title="G_TYPE_BOOLEAN">G_TYPE_BOOLEAN</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-INT:CAPS" title="G_TYPE_INT">G_TYPE_INT</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-UINT:CAPS" title="G_TYPE_UINT">G_TYPE_UINT</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-LONG:CAPS" title="G_TYPE_LONG">G_TYPE_LONG</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-ULONG:CAPS" title="G_TYPE_ULONG">G_TYPE_ULONG</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-INT64:CAPS" title="G_TYPE_INT64">G_TYPE_INT64</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-UINT64:CAPS" title="G_TYPE_UINT64">G_TYPE_UINT64</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-ENUM:CAPS" title="G_TYPE_ENUM">G_TYPE_ENUM</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-FLAGS:CAPS" title="G_TYPE_FLAGS">G_TYPE_FLAGS</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-FLOAT:CAPS" title="G_TYPE_FLOAT">G_TYPE_FLOAT</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-DOUBLE:CAPS" title="G_TYPE_DOUBLE">G_TYPE_DOUBLE</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-STRING:CAPS" title="G_TYPE_STRING">G_TYPE_STRING</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-POINTER:CAPS" title="G_TYPE_POINTER">G_TYPE_POINTER</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-BOXED:CAPS" title="G_TYPE_BOXED">G_TYPE_BOXED</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-PARAM:CAPS" title="G_TYPE_PARAM">G_TYPE_PARAM</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-OBJECT:CAPS" title="G_TYPE_OBJECT">G_TYPE_OBJECT</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-GTYPE:CAPS" title="G_TYPE_GTYPE">G_TYPE_GTYPE</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-VARIANT:CAPS" title="G_TYPE_VARIANT">G_TYPE_VARIANT</a>

#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-RESERVED-GLIB-FIRST:CAPS" title="G_TYPE_RESERVED_GLIB_FIRST">G_TYPE_RESERVED_GLIB_FIRST</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-RESERVED-GLIB-LAST:CAPS" title="G_TYPE_RESERVED_GLIB_LAST">G_TYPE_RESERVED_GLIB_LAST</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-RESERVED-BSE-FIRST:CAPS" title="G_TYPE_RESERVED_BSE_FIRST">G_TYPE_RESERVED_BSE_FIRST</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-RESERVED-BSE-LAST:CAPS" title="G_TYPE_RESERVED_BSE_LAST">G_TYPE_RESERVED_BSE_LAST</a>
#define             <a class="link" href="gobject-Type-Information.html#G-TYPE-RESERVED-USER-FIRST:CAPS" title="G_TYPE_RESERVED_USER_FIRST">G_TYPE_RESERVED_USER_FIRST</a>
</pre>
</div>
<div class="refsect1">
<a name="gobject-Type-Information.description"></a><h2>Description</h2>
<p>
The GType API is the foundation of the GObject system.  It provides the
facilities for registering and managing all fundamental data types,
user-defined object and interface types.  Before using any GType
or GObject functions, <a class="link" href="gobject-Type-Information.html#g-type-init" title="g_type_init ()"><code class="function">g_type_init()</code></a> must be called to initialize the
type system.
</p>
<p>
For type creation and registration purposes, all types fall into one of
two categories: static or dynamic.  Static types are never loaded or
unloaded at run-time as dynamic types may be.  Static types are created
with <a class="link" href="gobject-Type-Information.html#g-type-register-static" title="g_type_register_static ()"><code class="function">g_type_register_static()</code></a> that gets type specific information passed
in via a <a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a> structure.
Dynamic types are created with <a class="link" href="gobject-Type-Information.html#g-type-register-dynamic" title="g_type_register_dynamic ()"><code class="function">g_type_register_dynamic()</code></a> which takes a
<a class="link" href="GTypePlugin.html" title="GTypePlugin"><span class="type">GTypePlugin</span></a> structure instead. The remaining type information (the
<a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a> structure) is retrieved during runtime through <a class="link" href="GTypePlugin.html" title="GTypePlugin"><span class="type">GTypePlugin</span></a>
and the g_type_plugin_*() API.
These registration functions are usually called only once from a
function whose only purpose is to return the type identifier for a
specific class.  Once the type (or class or interface) is registered,
it may be instantiated, inherited, or implemented depending on exactly
what sort of type it is.
There is also a third registration function for registering fundamental
types called <a class="link" href="gobject-Type-Information.html#g-type-register-fundamental" title="g_type_register_fundamental ()"><code class="function">g_type_register_fundamental()</code></a> which requires both a <a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a>
structure and a <a class="link" href="gobject-Type-Information.html#GTypeFundamentalInfo" title="struct GTypeFundamentalInfo"><span class="type">GTypeFundamentalInfo</span></a> structure but it is seldom used
since most fundamental types are predefined rather than user-defined.
</p>
<p>
Type instance and class structs are limited to a total of 64 KiB,
including all parent types. Similarly, type instances' private data
(as created by <a class="link" href="gobject-Type-Information.html#g-type-class-add-private" title="g_type_class_add_private ()"><code class="function">g_type_class_add_private()</code></a>) are limited to a total of
64 KiB. If a type instance needs a large static buffer, allocate it
separately (typically by using <a href="../glib/glib-Arrays.html#GArray"><span class="type">GArray</span></a> or <a href="../glib/glib-Pointer-Arrays.html#GPtrArray"><span class="type">GPtrArray</span></a>) and put a pointer
to the buffer in the structure.
</p>
<p>
A final word about type names.
Such an identifier needs to be at least three characters long. There is no
upper length limit. The first character needs to be a letter (a-z or A-Z)
or an underscore '_'. Subsequent characters can be letters, numbers or
any of '-_+'.
</p>
</div>
<div class="refsect1">
<a name="gobject-Type-Information.details"></a><h2>Details</h2>
<div class="refsect2">
<a name="GType"></a><h3>GType</h3>
<p>
A numerical value which represents the unique identifier of a registered
type.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-FUNDAMENTAL:CAPS"></a><h3>G_TYPE_FUNDAMENTAL()</h3>
<pre class="programlisting">#define G_TYPE_FUNDAMENTAL(type) (g_type_fundamental (type))
</pre>
<p>
The fundamental type which is the ancestor of <em class="parameter"><code>type</code></em>.
Fundamental types are types that serve as ultimate bases for the derived types, 
thus they are the roots of distinct inheritance hierarchies.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody><tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>A <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> value.</td>
</tr></tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-FUNDAMENTAL-MAX:CAPS"></a><h3>G_TYPE_FUNDAMENTAL_MAX</h3>
<pre class="programlisting">#define G_TYPE_FUNDAMENTAL_MAX		(255 &lt;&lt; G_TYPE_FUNDAMENTAL_SHIFT)
</pre>
<p>
An integer constant that represents the number of identifiers reserved
for types that are assigned at compile-time.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-MAKE-FUNDAMENTAL:CAPS"></a><h3>G_TYPE_MAKE_FUNDAMENTAL()</h3>
<pre class="programlisting">#define G_TYPE_MAKE_FUNDAMENTAL(x) ((GType) ((x) &lt;&lt; G_TYPE_FUNDAMENTAL_SHIFT))
</pre>
<p>
Get the type ID for the fundamental type number <em class="parameter"><code>x</code></em>.
Use <a class="link" href="gobject-Type-Information.html#g-type-fundamental-next" title="g_type_fundamental_next ()"><code class="function">g_type_fundamental_next()</code></a> instead of this macro to create new fundamental 
types.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>x</code></em> :</span></p></td>
<td>the fundamental type number.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>the GType</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-IS-ABSTRACT:CAPS"></a><h3>G_TYPE_IS_ABSTRACT()</h3>
<pre class="programlisting">#define G_TYPE_IS_ABSTRACT(type)                (g_type_test_flags ((type), G_TYPE_FLAG_ABSTRACT))
</pre>
<p>
Checks if <em class="parameter"><code>type</code></em> is an abstract type.  An abstract type cannot be
instantiated and is normally used as an abstract base class for
derived classes.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>A <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> value.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-IS-DERIVED:CAPS"></a><h3>G_TYPE_IS_DERIVED()</h3>
<pre class="programlisting">#define G_TYPE_IS_DERIVED(type)                 ((type) &gt; G_TYPE_FUNDAMENTAL_MAX)
</pre>
<p>
Checks if <em class="parameter"><code>type</code></em> is derived (or in object-oriented terminology:
inherited) from another type (this holds true for all non-fundamental
types).
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>A <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> value.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-IS-FUNDAMENTAL:CAPS"></a><h3>G_TYPE_IS_FUNDAMENTAL()</h3>
<pre class="programlisting">#define G_TYPE_IS_FUNDAMENTAL(type)             ((type) &lt;= G_TYPE_FUNDAMENTAL_MAX)
</pre>
<p>
Checks if <em class="parameter"><code>type</code></em> is a fundamental type.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>A <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> value.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-IS-VALUE-TYPE:CAPS"></a><h3>G_TYPE_IS_VALUE_TYPE()</h3>
<pre class="programlisting">#define G_TYPE_IS_VALUE_TYPE(type)              (g_type_check_is_value_type (type))
</pre>
<p>
Checks if <em class="parameter"><code>type</code></em> is a value type and can be used with <a class="link" href="gobject-Generic-values.html#g-value-init" title="g_value_init ()"><code class="function">g_value_init()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>A <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> value.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-HAS-VALUE-TABLE:CAPS"></a><h3>G_TYPE_HAS_VALUE_TABLE()</h3>
<pre class="programlisting">#define G_TYPE_HAS_VALUE_TABLE(type)            (g_type_value_table_peek (type) != NULL)
</pre>
<p>
Checks if <em class="parameter"><code>type</code></em> has a <a class="link" href="gobject-Type-Information.html#GTypeValueTable" title="struct GTypeValueTable"><span class="type">GTypeValueTable</span></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>A <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> value.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-IS-CLASSED:CAPS"></a><h3>G_TYPE_IS_CLASSED()</h3>
<pre class="programlisting">#define G_TYPE_IS_CLASSED(type)                 (g_type_test_flags ((type), G_TYPE_FLAG_CLASSED))
</pre>
<p>
Checks if <em class="parameter"><code>type</code></em> is a classed type.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>A <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> value.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-IS-INSTANTIATABLE:CAPS"></a><h3>G_TYPE_IS_INSTANTIATABLE()</h3>
<pre class="programlisting">#define G_TYPE_IS_INSTANTIATABLE(type)          (g_type_test_flags ((type), G_TYPE_FLAG_INSTANTIATABLE))
</pre>
<p>
Checks if <em class="parameter"><code>type</code></em> can be instantiated.  Instantiation is the
process of creating an instance (object) of this type.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>A <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> value.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-IS-DERIVABLE:CAPS"></a><h3>G_TYPE_IS_DERIVABLE()</h3>
<pre class="programlisting">#define G_TYPE_IS_DERIVABLE(type)               (g_type_test_flags ((type), G_TYPE_FLAG_DERIVABLE))
</pre>
<p>
Checks if <em class="parameter"><code>type</code></em> is a derivable type.  A derivable type can
be used as the base class of a flat (single-level) class hierarchy.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>A <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> value.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-IS-DEEP-DERIVABLE:CAPS"></a><h3>G_TYPE_IS_DEEP_DERIVABLE()</h3>
<pre class="programlisting">#define G_TYPE_IS_DEEP_DERIVABLE(type)          (g_type_test_flags ((type), G_TYPE_FLAG_DEEP_DERIVABLE))
</pre>
<p>
Checks if <em class="parameter"><code>type</code></em> is a deep derivable type.  A deep derivable type
can be used as the base class of a deep (multi-level) class hierarchy.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>A <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> value.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-IS-INTERFACE:CAPS"></a><h3>G_TYPE_IS_INTERFACE()</h3>
<pre class="programlisting">#define G_TYPE_IS_INTERFACE(type)               (G_TYPE_FUNDAMENTAL (type) == G_TYPE_INTERFACE)
</pre>
<p>
Checks if <em class="parameter"><code>type</code></em> is an interface type.
An interface type provides a pure API, the implementation
of which is provided by another type (which is then said to conform
to the interface).  GLib interfaces are somewhat analogous to Java
interfaces and C++ classes containing only pure virtual functions, 
with the difference that GType interfaces are not derivable (but see
<a class="link" href="gobject-Type-Information.html#g-type-interface-add-prerequisite" title="g_type_interface_add_prerequisite ()"><code class="function">g_type_interface_add_prerequisite()</code></a> for an alternative).
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>A <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> value.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="GTypeInterface"></a><h3>struct GTypeInterface</h3>
<pre class="programlisting">struct GTypeInterface {
};
</pre>
<p>
An opaque structure used as the base of all interface types.
</p>
</div>
<hr>
<div class="refsect2">
<a name="GTypeInstance"></a><h3>struct GTypeInstance</h3>
<pre class="programlisting">struct GTypeInstance {
};
</pre>
<p>
An opaque structure used as the base of all type instances.
</p>
</div>
<hr>
<div class="refsect2">
<a name="GTypeClass"></a><h3>struct GTypeClass</h3>
<pre class="programlisting">struct GTypeClass {
};
</pre>
<p>
An opaque structure used as the base of all classes.
</p>
</div>
<hr>
<div class="refsect2">
<a name="GTypeInfo"></a><h3>struct GTypeInfo</h3>
<pre class="programlisting">struct GTypeInfo {
  /* interface types, classed types, instantiated types */
  guint16                class_size;
  
  GBaseInitFunc          base_init;
  GBaseFinalizeFunc      base_finalize;
  
  /* interface types, classed types, instantiated types */
  GClassInitFunc         class_init;
  GClassFinalizeFunc     class_finalize;
  gconstpointer          class_data;
  
  /* instantiated types */
  guint16                instance_size;
  guint16                n_preallocs;
  GInstanceInitFunc      instance_init;
  
  /* value handling */
  const GTypeValueTable *value_table;
};
</pre>
<p>
This structure is used to provide the type system with the information
required to initialize and destruct (finalize) a type's class and
its instances.
The initialized structure is passed to the <a class="link" href="gobject-Type-Information.html#g-type-register-static" title="g_type_register_static ()"><code class="function">g_type_register_static()</code></a> function
(or is copied into the provided <a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a> structure in the
<a class="link" href="GTypePlugin.html#g-type-plugin-complete-type-info" title="g_type_plugin_complete_type_info ()"><code class="function">g_type_plugin_complete_type_info()</code></a>). The type system will perform a deep
copy of this structure, so its memory does not need to be persistent
across invocation of <a class="link" href="gobject-Type-Information.html#g-type-register-static" title="g_type_register_static ()"><code class="function">g_type_register_static()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><a href="../glib/glib-Basic-Types.html#guint16"><span class="type">guint16</span></a> <em class="structfield"><code><a name="GTypeInfo.class-size"></a>class_size</code></em>;</span></p></td>
<td>Size of the class structure (required for interface, classed and instantiatable types).</td>
</tr>
<tr>
<td><p><span class="term"><a class="link" href="gobject-Type-Information.html#GBaseInitFunc" title="GBaseInitFunc ()"><span class="type">GBaseInitFunc</span></a> <em class="structfield"><code><a name="GTypeInfo.base-init"></a>base_init</code></em>;</span></p></td>
<td>Location of the base initialization function (optional).</td>
</tr>
<tr>
<td><p><span class="term"><a class="link" href="gobject-Type-Information.html#GBaseFinalizeFunc" title="GBaseFinalizeFunc ()"><span class="type">GBaseFinalizeFunc</span></a> <em class="structfield"><code><a name="GTypeInfo.base-finalize"></a>base_finalize</code></em>;</span></p></td>
<td>Location of the base finalization function (optional).</td>
</tr>
<tr>
<td><p><span class="term"><a class="link" href="gobject-Type-Information.html#GClassInitFunc" title="GClassInitFunc ()"><span class="type">GClassInitFunc</span></a> <em class="structfield"><code><a name="GTypeInfo.class-init"></a>class_init</code></em>;</span></p></td>
<td>Location of the class initialization function for
classed and instantiatable types. Location of the default vtable
inititalization function for interface types. (optional) This function
is used both to fill in virtual functions in the class or default vtable,
and to do type-specific setup such as registering signals and object
properties.</td>
</tr>
<tr>
<td><p><span class="term"><a class="link" href="gobject-Type-Information.html#GClassFinalizeFunc" title="GClassFinalizeFunc ()"><span class="type">GClassFinalizeFunc</span></a> <em class="structfield"><code><a name="GTypeInfo.class-finalize"></a>class_finalize</code></em>;</span></p></td>
<td>Location of the class finalization function for
classed and instantiatable types. Location fo the default vtable
finalization function for interface types. (optional)</td>
</tr>
<tr>
<td><p><span class="term"><a href="../glib/glib-Basic-Types.html#gconstpointer"><span class="type">gconstpointer</span></a> <em class="structfield"><code><a name="GTypeInfo.class-data"></a>class_data</code></em>;</span></p></td>
<td>User-supplied data passed to the class init/finalize functions.</td>
</tr>
<tr>
<td><p><span class="term"><a href="../glib/glib-Basic-Types.html#guint16"><span class="type">guint16</span></a> <em class="structfield"><code><a name="GTypeInfo.instance-size"></a>instance_size</code></em>;</span></p></td>
<td>Size of the instance (object) structure (required for instantiatable types only).</td>
</tr>
<tr>
<td><p><span class="term"><a href="../glib/glib-Basic-Types.html#guint16"><span class="type">guint16</span></a> <em class="structfield"><code><a name="GTypeInfo.n-preallocs"></a>n_preallocs</code></em>;</span></p></td>
<td>Prior to GLib 2.10, it specified the number of pre-allocated (cached) instances to reserve memory for (0 indicates no caching). Since GLib 2.10, it is ignored, since instances are allocated with the <a href="../glib/glib-Memory-Slices.html">slice allocator</a> now.</td>
</tr>
<tr>
<td><p><span class="term"><a class="link" href="gobject-Type-Information.html#GInstanceInitFunc" title="GInstanceInitFunc ()"><span class="type">GInstanceInitFunc</span></a> <em class="structfield"><code><a name="GTypeInfo.instance-init"></a>instance_init</code></em>;</span></p></td>
<td>Location of the instance initialization function (optional, for instantiatable types only).</td>
</tr>
<tr>
<td><p><span class="term">const <a class="link" href="gobject-Type-Information.html#GTypeValueTable" title="struct GTypeValueTable"><span class="type">GTypeValueTable</span></a> *<em class="structfield"><code><a name="GTypeInfo.value-table"></a>value_table</code></em>;</span></p></td>
<td>A <a class="link" href="gobject-Type-Information.html#GTypeValueTable" title="struct GTypeValueTable"><span class="type">GTypeValueTable</span></a> function table for generic handling of GValues of this type (usually only
useful for fundamental types).</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="GTypeFundamentalInfo"></a><h3>struct GTypeFundamentalInfo</h3>
<pre class="programlisting">struct GTypeFundamentalInfo {
  GTypeFundamentalFlags  type_flags;
};
</pre>
<p>
A structure that provides information to the type system which is
used specifically for managing fundamental types.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody><tr>
<td><p><span class="term"><a class="link" href="gobject-Type-Information.html#GTypeFundamentalFlags" title="enum GTypeFundamentalFlags"><span class="type">GTypeFundamentalFlags</span></a> <em class="structfield"><code><a name="GTypeFundamentalInfo.type-flags"></a>type_flags</code></em>;</span></p></td>
<td>
<a class="link" href="gobject-Type-Information.html#GTypeFundamentalFlags" title="enum GTypeFundamentalFlags"><span class="type">GTypeFundamentalFlags</span></a> describing the characteristics of the fundamental type</td>
</tr></tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="GInterfaceInfo"></a><h3>struct GInterfaceInfo</h3>
<pre class="programlisting">struct GInterfaceInfo {
  GInterfaceInitFunc     interface_init;
  GInterfaceFinalizeFunc interface_finalize;
  gpointer               interface_data;
};
</pre>
<p>
A structure that provides information to the type system which is
used specifically for managing interface types.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><a class="link" href="gobject-Type-Information.html#GInterfaceInitFunc" title="GInterfaceInitFunc ()"><span class="type">GInterfaceInitFunc</span></a> <em class="structfield"><code><a name="GInterfaceInfo.interface-init"></a>interface_init</code></em>;</span></p></td>
<td>location of the interface initialization function</td>
</tr>
<tr>
<td><p><span class="term"><a class="link" href="gobject-Type-Information.html#GInterfaceFinalizeFunc" title="GInterfaceFinalizeFunc ()"><span class="type">GInterfaceFinalizeFunc</span></a> <em class="structfield"><code><a name="GInterfaceInfo.interface-finalize"></a>interface_finalize</code></em>;</span></p></td>
<td>location of the interface finalization function</td>
</tr>
<tr>
<td><p><span class="term"><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> <em class="structfield"><code><a name="GInterfaceInfo.interface-data"></a>interface_data</code></em>;</span></p></td>
<td>user-supplied data passed to the interface init/finalize functions</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="GTypeValueTable"></a><h3>struct GTypeValueTable</h3>
<pre class="programlisting">struct GTypeValueTable {
  void     (*value_init)         (GValue       *value);
  void     (*value_free)         (GValue       *value);
  void     (*value_copy)         (const GValue *src_value,
				  GValue       *dest_value);
  /* varargs functionality (optional) */
  gpointer (*value_peek_pointer) (const GValue *value);
  gchar	    *collect_format;
  gchar*   (*collect_value)      (GValue       *value,
				  guint         n_collect_values,
				  GTypeCValue  *collect_values,
				  guint		collect_flags);
  gchar	    *lcopy_format;
  gchar*   (*lcopy_value)        (const GValue *value,
				  guint         n_collect_values,
				  GTypeCValue  *collect_values,
				  guint		collect_flags);
};
</pre>
<p>
The <a class="link" href="gobject-Type-Information.html#GTypeValueTable" title="struct GTypeValueTable"><span class="type">GTypeValueTable</span></a> provides the functions required by the <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> implementation,
to serve as a container for values of a type.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GTypeValueTable.value-init"></a>value_init</code></em> ()</span></p></td>
<td>Default initialize <em class="parameter"><code>values</code></em> contents by poking values
directly into the value-&gt;data array. The data array of
the <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> passed into this function was zero-filled
with <code class="function"><code class="function">memset()</code></code>, so no care has to
be taken to free any
old contents. E.g. for the implementation of a string
value that may never be <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>, the implementation might
look like:
<div class="informalexample"><pre class="programlisting">
value-&gt;data[0].v_pointer = g_strdup ("");
</pre></div>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GTypeValueTable.value-free"></a>value_free</code></em> ()</span></p></td>
<td>Free any old contents that might be left in the
data array of the passed in <em class="parameter"><code>value</code></em>. No resources may
remain allocated through the <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> contents after
this function returns. E.g. for our above string type:
<div class="informalexample"><pre class="programlisting">
// only free strings without a specific flag for static storage
if (!(value-&gt;data[1].v_uint &amp; G_VALUE_NOCOPY_CONTENTS))
g_free (value-&gt;data[0].v_pointer);
</pre></div>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GTypeValueTable.value-copy"></a>value_copy</code></em> ()</span></p></td>
<td>
<em class="parameter"><code>dest_value</code></em> is a <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> with zero-filled data section
and <em class="parameter"><code>src_value</code></em> is a properly setup <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> of same or
derived type.
The purpose of this function is to copy the contents of
<em class="parameter"><code>src_value</code></em> into <em class="parameter"><code>dest_value</code></em> in a way, that even after
<em class="parameter"><code>src_value</code></em> has been freed, the contents of <em class="parameter"><code>dest_value</code></em>
remain valid. String type example:
<div class="informalexample"><pre class="programlisting">
dest_value-&gt;data[0].v_pointer = g_strdup (src_value-&gt;data[0].v_pointer);
</pre></div>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GTypeValueTable.value-peek-pointer"></a>value_peek_pointer</code></em> ()</span></p></td>
<td>If the value contents fit into a pointer, such as objects
or strings, return this pointer, so the caller can peek at
the current contents. To extend on our above string example:
<div class="informalexample"><pre class="programlisting">
return value-&gt;data[0].v_pointer;
</pre></div>
</td>
</tr>
<tr>
<td><p><span class="term"><a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *<em class="structfield"><code><a name="GTypeValueTable.collect-format"></a>collect_format</code></em>;</span></p></td>
<td>A string format describing how to collect the contents of
this value bit-by-bit. Each character in the format represents
an argument to be collected, and the characters themselves indicate
the type of the argument. Currently supported arguments are:
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"></span></p></td>
<td><p>
'i' - Integers. passed as collect_values[].v_int.
</p></td>
</tr>
<tr>
<td><p><span class="term"></span></p></td>
<td><p>
'l' - Longs. passed as collect_values[].v_long.
</p></td>
</tr>
<tr>
<td><p><span class="term"></span></p></td>
<td><p>
'd' - Doubles. passed as collect_values[].v_double.
</p></td>
</tr>
<tr>
<td><p><span class="term"></span></p></td>
<td><p>
'p' - Pointers. passed as collect_values[].v_pointer.
</p></td>
</tr>
</tbody>
</table></div>
It should be noted that for variable argument list construction,
ANSI C promotes every type smaller than an integer to an int, and
floats to doubles. So for collection of short int or char, 'i'
needs to be used, and for collection of floats 'd'.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GTypeValueTable.collect-value"></a>collect_value</code></em> ()</span></p></td>
<td>The <code class="function">collect_value()</code> function is responsible for converting the
values collected from a variable argument list into contents
suitable for storage in a GValue. This function should setup
<em class="parameter"><code>value</code></em> similar to <code class="function">value_init()</code>; e.g. for a string value that
does not allow <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> pointers, it needs to either spew an error,
or do an implicit conversion by storing an empty string.
The <em class="parameter"><code>value</code></em> passed in to this function has a zero-filled data
array, so just like for <code class="function">value_init()</code> it is guaranteed to not
contain any old contents that might need freeing.
<em class="parameter"><code>n_collect_values</code></em> is exactly the string length of <em class="parameter"><code>collect_format</code></em>,
and <em class="parameter"><code>collect_values</code></em> is an array of unions <a class="link" href="gobject-Varargs-Value-Collection.html#GTypeCValue" title="union GTypeCValue"><span class="type">GTypeCValue</span></a> with
length <em class="parameter"><code>n_collect_values</code></em>, containing the collected values
according to <em class="parameter"><code>collect_format</code></em>.
<em class="parameter"><code>collect_flags</code></em> is an argument provided as a hint by the caller.
It may contain the flag <code class="literal">G_VALUE_NOCOPY_CONTENTS</code> indicating,
that the collected value contents may be considered "static"
for the duration of the <em class="parameter"><code>value</code></em> lifetime.
Thus an extra copy of the contents stored in <em class="parameter"><code>collect_values</code></em> is
not required for assignment to <em class="parameter"><code>value</code></em>.
For our above string example, we continue with:
<div class="informalexample"><pre class="programlisting">
if (!collect_values[0].v_pointer)
value-&gt;data[0].v_pointer = g_strdup ("");
else if (collect_flags &amp; G_VALUE_NOCOPY_CONTENTS)
{
value-&gt;data[0].v_pointer = collect_values[0].v_pointer;
// keep a flag for the value_free() implementation to not free this string
value-&gt;data[1].v_uint = G_VALUE_NOCOPY_CONTENTS;
}
else
value-&gt;data[0].v_pointer = g_strdup (collect_values[0].v_pointer);
return NULL;
</pre></div>
It should be noted, that it is generally a bad idea to follow the
<span class="type">G_VALUE_NOCOPY_CONTENTS</span> hint for reference counted types. Due to
reentrancy requirements and reference count assertions performed
by the signal emission code, reference counts should always be
incremented for reference counted contents stored in the value-&gt;data
array.  To deviate from our string example for a moment, and taking
a look at an exemplary implementation for <code class="function">collect_value()</code> of
<a class="link" href="gobject-The-Base-Object-Type.html#GObject"><span class="type">GObject</span></a>:
<div class="informalexample"><pre class="programlisting">
if (collect_values[0].v_pointer)
{
GObject *object = G_OBJECT (collect_values[0].v_pointer);
// never honour G_VALUE_NOCOPY_CONTENTS for ref-counted types
value-&gt;data[0].v_pointer = g_object_ref (object);
return NULL;
}
else
return g_strdup_printf ("Object passed as invalid NULL pointer");
}
</pre></div>
The reference count for valid objects is always incremented,
regardless of <em class="parameter"><code>collect_flags</code></em>. For invalid objects, the example
returns a newly allocated string without altering <em class="parameter"><code>value</code></em>.
Upon success, <code class="function">collect_value()</code> needs to return <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. If, however,
an error condition occurred, <code class="function">collect_value()</code> may spew an
error by returning a newly allocated non-<a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> string, giving
a suitable description of the error condition.
The calling code makes no assumptions about the <em class="parameter"><code>value</code></em>
contents being valid upon error returns, <em class="parameter"><code>value</code></em>
is simply thrown away without further freeing. As such, it is
a good idea to not allocate <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> contents, prior to returning
an error, however, <code class="function">collect_values()</code> is not obliged to return
a correctly setup <em class="parameter"><code>value</code></em> for error returns, simply because
any non-<a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> return is considered a fatal condition so further
program behaviour is undefined.</td>
</tr>
<tr>
<td><p><span class="term"><a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *<em class="structfield"><code><a name="GTypeValueTable.lcopy-format"></a>lcopy_format</code></em>;</span></p></td>
<td>Format description of the arguments to collect for <em class="parameter"><code>lcopy_value</code></em>,
analogous to <em class="parameter"><code>collect_format</code></em>. Usually, <em class="parameter"><code>lcopy_format</code></em> string consists
only of 'p's to provide <code class="function">lcopy_value()</code> with pointers to storage locations.</td>
</tr>
<tr>
<td><p><span class="term"><em class="structfield"><code><a name="GTypeValueTable.lcopy-value"></a>lcopy_value</code></em> ()</span></p></td>
<td>This function is responsible for storing the <em class="parameter"><code>value</code></em> contents into
arguments passed through a variable argument list which got
collected into <em class="parameter"><code>collect_values</code></em> according to <em class="parameter"><code>lcopy_format</code></em>.
<em class="parameter"><code>n_collect_values</code></em> equals the string length of <em class="parameter"><code>lcopy_format</code></em>,
and <em class="parameter"><code>collect_flags</code></em> may contain <code class="literal">G_VALUE_NOCOPY_CONTENTS</code>.
In contrast to <code class="function">collect_value()</code>, <code class="function">lcopy_value()</code> is obliged to
always properly support <code class="literal">G_VALUE_NOCOPY_CONTENTS</code>.
Similar to <code class="function">collect_value()</code> the function may prematurely abort
by returning a newly allocated string describing an error condition.
To complete the string example:
<div class="informalexample"><pre class="programlisting">
gchar **string_p = collect_values[0].v_pointer;
if (!string_p)
return g_strdup_printf ("string location passed as NULL");
if (collect_flags &amp; G_VALUE_NOCOPY_CONTENTS)
*string_p = value-&gt;data[0].v_pointer;
else
*string_p = g_strdup (value-&gt;data[0].v_pointer);
</pre></div>
And an illustrative version of <code class="function">lcopy_value()</code> for
reference-counted types:
<div class="informalexample"><pre class="programlisting">
GObject **object_p = collect_values[0].v_pointer;
if (!object_p)
return g_strdup_printf ("object location passed as NULL");
if (!value-&gt;data[0].v_pointer)
*object_p = NULL;
else if (collect_flags &amp; G_VALUE_NOCOPY_CONTENTS) /* always honour */
*object_p = value-&gt;data[0].v_pointer;
else
*object_p = g_object_ref (value-&gt;data[0].v_pointer);
return NULL;
</pre></div>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-FROM-INSTANCE:CAPS"></a><h3>G_TYPE_FROM_INSTANCE()</h3>
<pre class="programlisting">#define G_TYPE_FROM_INSTANCE(instance)                          (G_TYPE_FROM_CLASS (((GTypeInstance*) (instance))-&gt;g_class))
</pre>
<p>
Get the type identifier from a given <em class="parameter"><code>instance</code></em> structure. 
</p>
<p>
This macro should only be used in type implementations.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>instance</code></em> :</span></p></td>
<td>Location of a valid <a class="link" href="gobject-Type-Information.html#GTypeInstance" title="struct GTypeInstance"><span class="type">GTypeInstance</span></a> structure.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>the <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-FROM-CLASS:CAPS"></a><h3>G_TYPE_FROM_CLASS()</h3>
<pre class="programlisting">#define G_TYPE_FROM_CLASS(g_class)                              (((GTypeClass*) (g_class))-&gt;g_type)
</pre>
<p>
Get the type identifier from a given <em class="parameter"><code>class</code></em> structure.
</p>
<p>
This macro should only be used in type implementations.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_class</code></em> :</span></p></td>
<td>Location of a valid <a class="link" href="gobject-Type-Information.html#GTypeClass" title="struct GTypeClass"><span class="type">GTypeClass</span></a> structure.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>the <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-FROM-INTERFACE:CAPS"></a><h3>G_TYPE_FROM_INTERFACE()</h3>
<pre class="programlisting">#define G_TYPE_FROM_INTERFACE(g_iface)                          (((GTypeInterface*) (g_iface))-&gt;g_type)
</pre>
<p>
Get the type identifier from a given <em class="parameter"><code>interface</code></em> structure.
</p>
<p>
This macro should only be used in type implementations.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_iface</code></em> :</span></p></td>
<td>Location of a valid <a class="link" href="gobject-Type-Information.html#GTypeInterface" title="struct GTypeInterface"><span class="type">GTypeInterface</span></a> structure.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>the <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-INSTANCE-GET-CLASS:CAPS"></a><h3>G_TYPE_INSTANCE_GET_CLASS()</h3>
<pre class="programlisting">#define G_TYPE_INSTANCE_GET_CLASS(instance, g_type, c_type)     (_G_TYPE_IGC ((instance), (g_type), c_type))
</pre>
<p>
Get the class structure of a given <em class="parameter"><code>instance</code></em>, casted
to a specified ancestor type <em class="parameter"><code>g_type</code></em> of the instance.
</p>
<p>
Note that while calling a <a class="link" href="gobject-Type-Information.html#GInstanceInitFunc" title="GInstanceInitFunc ()"><code class="function">GInstanceInitFunc()</code></a>, the class pointer gets
modified, so it might not always return the expected pointer.
</p>
<p>
This macro should only be used in type implementations.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>instance</code></em> :</span></p></td>
<td>Location of the <a class="link" href="gobject-Type-Information.html#GTypeInstance" title="struct GTypeInstance"><span class="type">GTypeInstance</span></a> structure.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_type</code></em> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> of the class to be returned.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>c_type</code></em> :</span></p></td>
<td>The C type of the class structure.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a pointer to the class structure</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-INSTANCE-GET-INTERFACE:CAPS"></a><h3>G_TYPE_INSTANCE_GET_INTERFACE()</h3>
<pre class="programlisting">#define G_TYPE_INSTANCE_GET_INTERFACE(instance, g_type, c_type) (_G_TYPE_IGI ((instance), (g_type), c_type))
</pre>
<p>
Get the interface structure for interface <em class="parameter"><code>g_type</code></em> of a given <em class="parameter"><code>instance</code></em>.
</p>
<p>
This macro should only be used in type implementations.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>instance</code></em> :</span></p></td>
<td>Location of the <a class="link" href="gobject-Type-Information.html#GTypeInstance" title="struct GTypeInstance"><span class="type">GTypeInstance</span></a> structure.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_type</code></em> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> of the interface to be returned.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>c_type</code></em> :</span></p></td>
<td>The C type of the interface structure.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a pointer to the interface structure</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-INSTANCE-GET-PRIVATE:CAPS"></a><h3>G_TYPE_INSTANCE_GET_PRIVATE()</h3>
<pre class="programlisting">#define G_TYPE_INSTANCE_GET_PRIVATE(instance, g_type, c_type)   ((c_type*) g_type_instance_get_private ((GTypeInstance*) (instance), (g_type)))
</pre>
<p>
Gets the private structure for a particular type.
The private structure must have been registered in the
class_init function with <a class="link" href="gobject-Type-Information.html#g-type-class-add-private" title="g_type_class_add_private ()"><code class="function">g_type_class_add_private()</code></a>.
</p>
<p>
This macro should only be used in type implementations.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>instance</code></em> :</span></p></td>
<td>the instance of a type deriving from <em class="parameter"><code>private_type</code></em>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_type</code></em> :</span></p></td>
<td>the type identifying which private data to retrieve.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>c_type</code></em> :</span></p></td>
<td>The C type for the private structure.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a pointer to the private data structure.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.4</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-CLASS-GET-PRIVATE:CAPS"></a><h3>G_TYPE_CLASS_GET_PRIVATE()</h3>
<pre class="programlisting">#define G_TYPE_CLASS_GET_PRIVATE(klass, g_type, c_type)   ((c_type*) g_type_class_get_private ((GTypeClass*) (klass), (g_type)))
</pre>
<p>
Gets the private class structure for a particular type.
The private structure must have been registered in the
<code class="function">get_type()</code> function with <a class="link" href="gobject-Type-Information.html#g-type-add-class-private" title="g_type_add_class_private ()"><code class="function">g_type_add_class_private()</code></a>.
</p>
<p>
This macro should only be used in type implementations.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>klass</code></em> :</span></p></td>
<td>the class of a type deriving from <em class="parameter"><code>private_type</code></em>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_type</code></em> :</span></p></td>
<td>the type identifying which private data to retrieve.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>c_type</code></em> :</span></p></td>
<td>The C type for the private structure.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a pointer to the private data structure.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.24</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-CHECK-INSTANCE:CAPS"></a><h3>G_TYPE_CHECK_INSTANCE()</h3>
<pre class="programlisting">#define G_TYPE_CHECK_INSTANCE(instance)				(_G_TYPE_CHI ((GTypeInstance*) (instance)))
</pre>
<p>
Checks if <em class="parameter"><code>instance</code></em> is a valid <a class="link" href="gobject-Type-Information.html#GTypeInstance" title="struct GTypeInstance"><span class="type">GTypeInstance</span></a> structure,
otherwise issues a warning and returns <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a>.
</p>
<p>
This macro should only be used in type implementations.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>instance</code></em> :</span></p></td>
<td>Location of a <a class="link" href="gobject-Type-Information.html#GTypeInstance" title="struct GTypeInstance"><span class="type">GTypeInstance</span></a> structure.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-CHECK-INSTANCE-CAST:CAPS"></a><h3>G_TYPE_CHECK_INSTANCE_CAST()</h3>
<pre class="programlisting">#define G_TYPE_CHECK_INSTANCE_CAST(instance, g_type, c_type)    (_G_TYPE_CIC ((instance), (g_type), c_type))
</pre>
<p>
Checks that <em class="parameter"><code>instance</code></em> is an instance of the type identified by <em class="parameter"><code>g_type</code></em>
and issues a warning if this is not the case. Returns <em class="parameter"><code>instance</code></em> casted 
to a pointer to <em class="parameter"><code>c_type</code></em>.
</p>
<p>
This macro should only be used in type implementations.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>instance</code></em> :</span></p></td>
<td>Location of a <a class="link" href="gobject-Type-Information.html#GTypeInstance" title="struct GTypeInstance"><span class="type">GTypeInstance</span></a> structure.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_type</code></em> :</span></p></td>
<td>The type to be returned.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>c_type</code></em> :</span></p></td>
<td>The corresponding C type of <em class="parameter"><code>g_type</code></em>.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-CHECK-INSTANCE-TYPE:CAPS"></a><h3>G_TYPE_CHECK_INSTANCE_TYPE()</h3>
<pre class="programlisting">#define G_TYPE_CHECK_INSTANCE_TYPE(instance, g_type)            (_G_TYPE_CIT ((instance), (g_type)))
</pre>
<p>
Checks if <em class="parameter"><code>instance</code></em> is an instance of the type identified by <em class="parameter"><code>g_type</code></em>.
</p>
<p>
This macro should only be used in type implementations.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>instance</code></em> :</span></p></td>
<td>Location of a <a class="link" href="gobject-Type-Information.html#GTypeInstance" title="struct GTypeInstance"><span class="type">GTypeInstance</span></a> structure.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_type</code></em> :</span></p></td>
<td>The type to be checked</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-CHECK-CLASS-CAST:CAPS"></a><h3>G_TYPE_CHECK_CLASS_CAST()</h3>
<pre class="programlisting">#define G_TYPE_CHECK_CLASS_CAST(g_class, g_type, c_type)        (_G_TYPE_CCC ((g_class), (g_type), c_type))
</pre>
<p>
Checks that <em class="parameter"><code>g_class</code></em> is a class structure of the type identified by <em class="parameter"><code>g_type</code></em>
and issues a warning if this is not the case. Returns <em class="parameter"><code>g_class</code></em> casted 
to a pointer to <em class="parameter"><code>c_type</code></em>.
</p>
<p>
This macro should only be used in type implementations.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_class</code></em> :</span></p></td>
<td>Location of a <a class="link" href="gobject-Type-Information.html#GTypeClass" title="struct GTypeClass"><span class="type">GTypeClass</span></a> structure.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_type</code></em> :</span></p></td>
<td>The type to be returned.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>c_type</code></em> :</span></p></td>
<td>The corresponding C type of class structure of <em class="parameter"><code>g_type</code></em>.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-CHECK-CLASS-TYPE:CAPS"></a><h3>G_TYPE_CHECK_CLASS_TYPE()</h3>
<pre class="programlisting">#define G_TYPE_CHECK_CLASS_TYPE(g_class, g_type)                (_G_TYPE_CCT ((g_class), (g_type)))
</pre>
<p>
Checks if <em class="parameter"><code>g_class</code></em> is a class structure of the type identified by 
<em class="parameter"><code>g_type</code></em>.
</p>
<p>
This macro should only be used in type implementations.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_class</code></em> :</span></p></td>
<td>Location of a <a class="link" href="gobject-Type-Information.html#GTypeClass" title="struct GTypeClass"><span class="type">GTypeClass</span></a> structure.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_type</code></em> :</span></p></td>
<td>The type to be checked.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-CHECK-VALUE:CAPS"></a><h3>G_TYPE_CHECK_VALUE()</h3>
<pre class="programlisting">#define G_TYPE_CHECK_VALUE(value)				(_G_TYPE_CHV ((value)))
</pre>
<p>
Checks if <em class="parameter"><code>value</code></em> has been initialized to hold values
of a value type.
</p>
<p>
This macro should only be used in type implementations.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>value</code></em> :</span></p></td>
<td>a <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-CHECK-VALUE-TYPE:CAPS"></a><h3>G_TYPE_CHECK_VALUE_TYPE()</h3>
<pre class="programlisting">#define G_TYPE_CHECK_VALUE_TYPE(value, g_type)			(_G_TYPE_CVH ((value), (g_type)))
</pre>
<p>
Checks if <em class="parameter"><code>value</code></em> has been initialized to hold values
of type <em class="parameter"><code>g_type</code></em>. 
</p>
<p>
This macro should only be used in type implementations.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>value</code></em> :</span></p></td>
<td>a <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_type</code></em> :</span></p></td>
<td>The type to be checked.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-FLAG-RESERVED-ID-BIT:CAPS"></a><h3>G_TYPE_FLAG_RESERVED_ID_BIT</h3>
<pre class="programlisting">#define G_TYPE_FLAG_RESERVED_ID_BIT ((GType) (1 &lt;&lt; 0))
</pre>
<p>
A bit in the type number that's supposed to be left untouched.
</p>
</div>
<hr>
<div class="refsect2">
<a name="g-type-init"></a><h3>g_type_init ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_type_init                         (<em class="parameter"><code><span class="type">void</span></code></em>);</pre>
<p>
Prior to any use of the type system, <a class="link" href="gobject-Type-Information.html#g-type-init" title="g_type_init ()"><code class="function">g_type_init()</code></a> has to be called
to initialize the type system and assorted other code portions
(such as the various fundamental type implementations or the signal
system).
</p>
<p>
This function is idempotent.
</p>
<p>
Since version 2.24 this also initializes the thread system
</p>
</div>
<hr>
<div class="refsect2">
<a name="GTypeDebugFlags"></a><h3>enum GTypeDebugFlags</h3>
<pre class="programlisting">typedef enum {
  G_TYPE_DEBUG_NONE = 0,
  G_TYPE_DEBUG_OBJECTS = 1 &lt;&lt; 0,
  G_TYPE_DEBUG_SIGNALS = 1 &lt;&lt; 1,
  G_TYPE_DEBUG_MASK = 0x03
} GTypeDebugFlags;
</pre>
<p>
The <span class="type">GTypeDebugFlags</span> enumeration values can be passed to
<a class="link" href="gobject-Type-Information.html#g-type-init-with-debug-flags" title="g_type_init_with_debug_flags ()"><code class="function">g_type_init_with_debug_flags()</code></a> to trigger debugging messages during runtime.
Note that the messages can also be triggered by setting the
<code class="envar">GOBJECT_DEBUG</code> environment variable to a ':'-separated list of 
"objects" and "signals".
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><a name="G-TYPE-DEBUG-NONE:CAPS"></a><span class="term"><code class="literal">G_TYPE_DEBUG_NONE</code></span></p></td>
<td>Print no messages.
</td>
</tr>
<tr>
<td><p><a name="G-TYPE-DEBUG-OBJECTS:CAPS"></a><span class="term"><code class="literal">G_TYPE_DEBUG_OBJECTS</code></span></p></td>
<td>Print messages about object bookkeeping.
</td>
</tr>
<tr>
<td><p><a name="G-TYPE-DEBUG-SIGNALS:CAPS"></a><span class="term"><code class="literal">G_TYPE_DEBUG_SIGNALS</code></span></p></td>
<td>Print messages about signal emissions.
</td>
</tr>
<tr>
<td><p><a name="G-TYPE-DEBUG-MASK:CAPS"></a><span class="term"><code class="literal">G_TYPE_DEBUG_MASK</code></span></p></td>
<td>Mask covering all debug flags.
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-init-with-debug-flags"></a><h3>g_type_init_with_debug_flags ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_type_init_with_debug_flags        (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeDebugFlags" title="enum GTypeDebugFlags"><span class="type">GTypeDebugFlags</span></a> debug_flags</code></em>);</pre>
<p>
Similar to <a class="link" href="gobject-Type-Information.html#g-type-init" title="g_type_init ()"><code class="function">g_type_init()</code></a>, but additionally sets debug flags.
</p>
<p>
This function is idempotent.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody><tr>
<td><p><span class="term"><em class="parameter"><code>debug_flags</code></em> :</span></p></td>
<td>Bitwise combination of <a class="link" href="gobject-Type-Information.html#GTypeDebugFlags" title="enum GTypeDebugFlags"><span class="type">GTypeDebugFlags</span></a> values for
debugging purposes.</td>
</tr></tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-name"></a><h3>g_type_name ()</h3>
<pre class="programlisting">const <a href="../glib/glib-Basic-Types.html#gchar"><span class="returnvalue">gchar</span></a> *       g_type_name                         (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>);</pre>
<p>
Get the unique name that is assigned to a type ID.  Note that this
function (like all other GType API) cannot cope with invalid type
IDs. <a class="link" href="gobject-Type-Information.html#G-TYPE-INVALID:CAPS" title="G_TYPE_INVALID"><code class="literal">G_TYPE_INVALID</code></a> may be passed to this function, as may be any
other validly registered type ID, but randomized type IDs should
not be passed in and will most likely lead to a crash.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>Type to return name for.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>Static type name or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-qname"></a><h3>g_type_qname ()</h3>
<pre class="programlisting"><a href="../glib/glib-Quarks.html#GQuark"><span class="returnvalue">GQuark</span></a>              g_type_qname                        (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>);</pre>
<p>
Get the corresponding quark of the type IDs name.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>Type to return quark of type name for.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>The type names quark or 0.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-from-name"></a><h3>g_type_from_name ()</h3>
<pre class="programlisting"><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a>               g_type_from_name                    (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>);</pre>
<p>
Lookup the type ID from a given type name, returning 0 if no type
has been registered under this name (this is the preferred method
to find out by name whether a specific type has been registered
yet).
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>name</code></em> :</span></p></td>
<td>Type name to lookup.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>Corresponding type ID or 0.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-parent"></a><h3>g_type_parent ()</h3>
<pre class="programlisting"><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a>               g_type_parent                       (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>);</pre>
<p>
Return the direct parent type of the passed in type.  If the passed
in type has no parent, i.e. is a fundamental type, 0 is returned.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>The derived type.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>The parent type.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-depth"></a><h3>g_type_depth ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#guint"><span class="returnvalue">guint</span></a>               g_type_depth                        (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>);</pre>
<p>
Returns the length of the ancestry of the passed in type. This
includes the type itself, so that e.g. a fundamental type has depth 1.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>A <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> value.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>The depth of <em class="parameter"><code>type</code></em>.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-next-base"></a><h3>g_type_next_base ()</h3>
<pre class="programlisting"><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a>               g_type_next_base                    (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> leaf_type</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> root_type</code></em>);</pre>
<p>
Given a <em class="parameter"><code>leaf_type</code></em> and a <em class="parameter"><code>root_type</code></em> which is contained in its
anchestry, return the type that <em class="parameter"><code>root_type</code></em> is the immediate parent
of.  In other words, this function determines the type that is
derived directly from <em class="parameter"><code>root_type</code></em> which is also a base class of
<em class="parameter"><code>leaf_type</code></em>.  Given a root type and a leaf type, this function can
be used to determine the types and order in which the leaf type is
descended from the root type.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>leaf_type</code></em> :</span></p></td>
<td>Descendant of <em class="parameter"><code>root_type</code></em> and the type to be returned.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>root_type</code></em> :</span></p></td>
<td>Immediate parent of the returned type.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>Immediate child of <em class="parameter"><code>root_type</code></em> and anchestor of <em class="parameter"><code>leaf_type</code></em>.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-is-a"></a><h3>g_type_is_a ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_type_is_a                         (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> is_a_type</code></em>);</pre>
<p>
If <em class="parameter"><code>is_a_type</code></em> is a derivable type, check whether <em class="parameter"><code>type</code></em> is a
descendant of <em class="parameter"><code>is_a_type</code></em>.  If <em class="parameter"><code>is_a_type</code></em> is an interface, check
whether <em class="parameter"><code>type</code></em> conforms to it.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>Type to check anchestry for.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>is_a_type</code></em> :</span></p></td>
<td>Possible anchestor of <em class="parameter"><code>type</code></em> or interface <em class="parameter"><code>type</code></em> could conform to.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> if <em class="parameter"><code>type</code></em> is_a <em class="parameter"><code>is_a_type</code></em> holds true.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-class-ref"></a><h3>g_type_class_ref ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gpointer"><span class="returnvalue">gpointer</span></a>            g_type_class_ref                    (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>);</pre>
<p>
Increments the reference count of the class structure belonging to
<em class="parameter"><code>type</code></em>. This function will demand-create the class if it doesn't
exist already.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>Type ID of a classed type.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GTypeClass" title="struct GTypeClass"><span class="type">GTypeClass</span></a>
structure for the given type ID. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> GObject.TypeClass][<acronym title="Don't free data after the code is done."><span class="acronym">transfer none</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-class-peek"></a><h3>g_type_class_peek ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gpointer"><span class="returnvalue">gpointer</span></a>            g_type_class_peek                   (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>);</pre>
<p>
This function is essentially the same as <a class="link" href="gobject-Type-Information.html#g-type-class-ref" title="g_type_class_ref ()"><code class="function">g_type_class_ref()</code></a>, except that
the classes reference count isn't incremented. As a consequence, this function
may return <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if the class of the type passed in does not currently
exist (hasn't been referenced before).
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>Type ID of a classed type.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GTypeClass" title="struct GTypeClass"><span class="type">GTypeClass</span></a>
structure for the given type ID or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if the class does not
currently exist. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> GObject.TypeClass][<acronym title="Don't free data after the code is done."><span class="acronym">transfer none</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-class-peek-static"></a><h3>g_type_class_peek_static ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gpointer"><span class="returnvalue">gpointer</span></a>            g_type_class_peek_static            (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>);</pre>
<p>
A more efficient version of <a class="link" href="gobject-Type-Information.html#g-type-class-peek" title="g_type_class_peek ()"><code class="function">g_type_class_peek()</code></a> which works only for
static types.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>Type ID of a classed type.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GTypeClass" title="struct GTypeClass"><span class="type">GTypeClass</span></a>
structure for the given type ID or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if the class does not
currently exist or is dynamically loaded. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> GObject.TypeClass][<acronym title="Don't free data after the code is done."><span class="acronym">transfer none</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.4</p>
</div>
<hr>
<div class="refsect2">
<a name="g-type-class-unref"></a><h3>g_type_class_unref ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_type_class_unref                  (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_class</code></em>);</pre>
<p>
Decrements the reference count of the class structure being passed in.
Once the last reference count of a class has been released, classes
may be finalized by the type system, so further dereferencing of a
class pointer after <a class="link" href="gobject-Type-Information.html#g-type-class-unref" title="g_type_class_unref ()"><code class="function">g_type_class_unref()</code></a> are invalid.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody><tr>
<td><p><span class="term"><em class="parameter"><code>g_class</code></em> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GTypeClass" title="struct GTypeClass"><span class="type">GTypeClass</span></a> structure to
unreference. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> GObject.TypeClass]</span>
</td>
</tr></tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-class-peek-parent"></a><h3>g_type_class_peek_parent ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gpointer"><span class="returnvalue">gpointer</span></a>            g_type_class_peek_parent            (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_class</code></em>);</pre>
<p>
This is a convenience function often needed in class initializers.
It returns the class structure of the immediate parent type of the
class passed in.  Since derived classes hold a reference count on
their parent classes as long as they are instantiated, the returned
class will always exist. This function is essentially equivalent
to:
</p>
<p>
</p>
<pre class="programlisting">
g_type_class_peek (g_type_parent (G_TYPE_FROM_CLASS (g_class)));
</pre>
<p>
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_class</code></em> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GTypeClass" title="struct GTypeClass"><span class="type">GTypeClass</span></a> structure to
retrieve the parent class for. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> GObject.TypeClass]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>The parent class
of <em class="parameter"><code>g_class</code></em>. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> GObject.TypeClass][<acronym title="Don't free data after the code is done."><span class="acronym">transfer none</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-class-add-private"></a><h3>g_type_class_add_private ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_type_class_add_private            (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_class</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gsize"><span class="type">gsize</span></a> private_size</code></em>);</pre>
<p>
Registers a private structure for an instantiatable type.
</p>
<p>
When an object is allocated, the private structures for
the type and all of its parent types are allocated
sequentially in the same memory block as the public
structures.
</p>
<p>
Note that the accumulated size of the private structures of
a type and all its parent types cannot excced 64 KiB.
</p>
<p>
This function should be called in the type's <code class="function">class_init()</code> function.
The private structure can be retrieved using the
<a class="link" href="gobject-Type-Information.html#G-TYPE-INSTANCE-GET-PRIVATE:CAPS" title="G_TYPE_INSTANCE_GET_PRIVATE()"><code class="function">G_TYPE_INSTANCE_GET_PRIVATE()</code></a> macro.
</p>
<p>
The following example shows attaching a private structure
<span class="structname">MyObjectPrivate</span> to an object
<span class="structname">MyObject</span> defined in the standard GObject
fashion.
type's <code class="function">class_init()</code> function.
Note the use of a structure member "priv" to avoid the overhead
of repeatedly calling <code class="function">MY_OBJECT_GET_PRIVATE()</code>.
</p>
<p>
</p>
<div class="informalexample"><pre class="programlisting">
typedef struct _MyObject        MyObject;
typedef struct _MyObjectPrivate MyObjectPrivate;

struct _MyObject {
 GObject parent;

 MyObjectPrivate *priv;
};

struct _MyObjectPrivate {
  int some_field;
};

static void
my_object_class_init (MyObjectClass *klass)
{
  g_type_class_add_private (klass, sizeof (MyObjectPrivate));
}

static void
my_object_init (MyObject *my_object)
{
  my_object-&gt;priv = G_TYPE_INSTANCE_GET_PRIVATE (my_object,
                                                 MY_TYPE_OBJECT,
                                                 MyObjectPrivate);
}

static int
my_object_get_some_field (MyObject *my_object)
{
  MyObjectPrivate *priv;

  g_return_val_if_fail (MY_IS_OBJECT (my_object), 0);

  priv = my_object-&gt;priv;

  return priv-&gt;some_field;
}
</pre></div>
<p>
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_class</code></em> :</span></p></td>
<td>class structure for an instantiatable type</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>private_size</code></em> :</span></p></td>
<td>size of private structure.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.4</p>
</div>
<hr>
<div class="refsect2">
<a name="g-type-add-class-private"></a><h3>g_type_add_class_private ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_type_add_class_private            (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> class_type</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gsize"><span class="type">gsize</span></a> private_size</code></em>);</pre>
<p>
Registers a private class structure for a classed type;
when the class is allocated, the private structures for
the class and all of its parent types are allocated
sequentially in the same memory block as the public
structures. This function should be called in the
type's <code class="function">get_type()</code> function after the type is registered.
The private structure can be retrieved using the
<a class="link" href="gobject-Type-Information.html#G-TYPE-CLASS-GET-PRIVATE:CAPS" title="G_TYPE_CLASS_GET_PRIVATE()"><code class="function">G_TYPE_CLASS_GET_PRIVATE()</code></a> macro.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>class_type</code></em> :</span></p></td>
<td>GType of an classed type.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>private_size</code></em> :</span></p></td>
<td>size of private structure.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.24</p>
</div>
<hr>
<div class="refsect2">
<a name="g-type-interface-peek"></a><h3>g_type_interface_peek ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gpointer"><span class="returnvalue">gpointer</span></a>            g_type_interface_peek               (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> instance_class</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> iface_type</code></em>);</pre>
<p>
Returns the <a class="link" href="gobject-Type-Information.html#GTypeInterface" title="struct GTypeInterface"><span class="type">GTypeInterface</span></a> structure of an interface to which the
passed in class conforms.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>instance_class</code></em> :</span></p></td>
<td>A <a class="link" href="gobject-Type-Information.html#GTypeClass" title="struct GTypeClass"><span class="type">GTypeClass</span></a> structure. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> GObject.TypeClass]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>iface_type</code></em> :</span></p></td>
<td>An interface ID which this class conforms to.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>The GTypeInterface
structure of iface_type if implemented by <em class="parameter"><code>instance_class</code></em>, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>
otherwise. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> GObject.TypeInterface][<acronym title="Don't free data after the code is done."><span class="acronym">transfer none</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-interface-peek-parent"></a><h3>g_type_interface_peek_parent ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gpointer"><span class="returnvalue">gpointer</span></a>            g_type_interface_peek_parent        (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_iface</code></em>);</pre>
<p>
Returns the corresponding <a class="link" href="gobject-Type-Information.html#GTypeInterface" title="struct GTypeInterface"><span class="type">GTypeInterface</span></a> structure of the parent type
of the instance type to which <em class="parameter"><code>g_iface</code></em> belongs. This is useful when
deriving the implementation of an interface from the parent type and
then possibly overriding some methods.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_iface</code></em> :</span></p></td>
<td>A <a class="link" href="gobject-Type-Information.html#GTypeInterface" title="struct GTypeInterface"><span class="type">GTypeInterface</span></a> structure. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> GObject.TypeInterface]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>The
corresponding <a class="link" href="gobject-Type-Information.html#GTypeInterface" title="struct GTypeInterface"><span class="type">GTypeInterface</span></a> structure of the parent type of the
instance type to which <em class="parameter"><code>g_iface</code></em> belongs, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if the parent
type doesn't conform to the interface. <span class="annotation">[<acronym title="Don't free data after the code is done."><span class="acronym">transfer none</span></acronym>][<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> GObject.TypeInterface]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-default-interface-ref"></a><h3>g_type_default_interface_ref ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gpointer"><span class="returnvalue">gpointer</span></a>            g_type_default_interface_ref        (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> g_type</code></em>);</pre>
<p>
Increments the reference count for the interface type <em class="parameter"><code>g_type</code></em>,
and returns the default interface vtable for the type.
</p>
<p>
If the type is not currently in use, then the default vtable
for the type will be created and initalized by calling
the base interface init and default vtable init functions for
the type (the @<em class="structfield"><code>base_init</code></em>
and <em class="structfield"><code>class_init</code></em> members of <a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a>).
Calling <a class="link" href="gobject-Type-Information.html#g-type-default-interface-ref" title="g_type_default_interface_ref ()"><code class="function">g_type_default_interface_ref()</code></a> is useful when you
want to make sure that signals and properties for an interface
have been installed.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_type</code></em> :</span></p></td>
<td>an interface type</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>the default
vtable for the interface; call <a class="link" href="gobject-Type-Information.html#g-type-default-interface-unref" title="g_type_default_interface_unref ()"><code class="function">g_type_default_interface_unref()</code></a>
when you are done using the interface. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> GObject.TypeInterface][<acronym title="Don't free data after the code is done."><span class="acronym">transfer none</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.4</p>
</div>
<hr>
<div class="refsect2">
<a name="g-type-default-interface-peek"></a><h3>g_type_default_interface_peek ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gpointer"><span class="returnvalue">gpointer</span></a>            g_type_default_interface_peek       (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> g_type</code></em>);</pre>
<p>
If the interface type <em class="parameter"><code>g_type</code></em> is currently in use, returns its
default interface vtable.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_type</code></em> :</span></p></td>
<td>an interface type</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>the default
vtable for the interface, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if the type is not currently in
use. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> GObject.TypeInterface][<acronym title="Don't free data after the code is done."><span class="acronym">transfer none</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.4</p>
</div>
<hr>
<div class="refsect2">
<a name="g-type-default-interface-unref"></a><h3>g_type_default_interface_unref ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_type_default_interface_unref      (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_iface</code></em>);</pre>
<p>
Decrements the reference count for the type corresponding to the
interface default vtable <em class="parameter"><code>g_iface</code></em>. If the type is dynamic, then
when no one is using the interface and all references have
been released, the finalize function for the interface's default
vtable (the <em class="structfield"><code>class_finalize</code></em> member of
<a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a>) will be called.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody><tr>
<td><p><span class="term"><em class="parameter"><code>g_iface</code></em> :</span></p></td>
<td>the default vtable
structure for a interface, as returned by
<a class="link" href="gobject-Type-Information.html#g-type-default-interface-ref" title="g_type_default_interface_ref ()"><code class="function">g_type_default_interface_ref()</code></a>. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> GObject.TypeInterface]</span>
</td>
</tr></tbody>
</table></div>
<p class="since">Since 2.4</p>
</div>
<hr>
<div class="refsect2">
<a name="g-type-children"></a><h3>g_type_children ()</h3>
<pre class="programlisting"><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a> *             g_type_children                     (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> *n_children</code></em>);</pre>
<p>
Return a newly allocated and 0-terminated array of type IDs, listing the
child types of <em class="parameter"><code>type</code></em>. The return value has to be <a href="../glib/glib-Memory-Allocation.html#g-free"><code class="function">g_free()</code></a>ed after use.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>The parent type.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>n_children</code></em> :</span></p></td>
<td>Optional <a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> pointer to contain
the number of child types. <span class="annotation">[<acronym title="Parameter for returning results. Default is transfer full."><span class="acronym">out</span></acronym>][<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>Newly allocated
and 0-terminated array of child types. <span class="annotation">[<acronym title="Parameter points to an array of items."><span class="acronym">array</span></acronym> length=n_children][<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-interfaces"></a><h3>g_type_interfaces ()</h3>
<pre class="programlisting"><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a> *             g_type_interfaces                   (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> *n_interfaces</code></em>);</pre>
<p>
Return a newly allocated and 0-terminated array of type IDs, listing the
interface types that <em class="parameter"><code>type</code></em> conforms to. The return value has to be
<a href="../glib/glib-Memory-Allocation.html#g-free"><code class="function">g_free()</code></a>ed after use.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>The type to list interface types for.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>n_interfaces</code></em> :</span></p></td>
<td>Optional <a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> pointer to
contain the number of interface types. <span class="annotation">[<acronym title="Parameter for returning results. Default is transfer full."><span class="acronym">out</span></acronym>][<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>Newly
allocated and 0-terminated array of interface types. <span class="annotation">[<acronym title="Parameter points to an array of items."><span class="acronym">array</span></acronym> length=n_interfaces][<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-interface-prerequisites"></a><h3>g_type_interface_prerequisites ()</h3>
<pre class="programlisting"><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a> *             g_type_interface_prerequisites      (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> interface_type</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> *n_prerequisites</code></em>);</pre>
<p>
Returns the prerequisites of an interfaces type.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>interface_type</code></em> :</span></p></td>
<td>an interface type</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>n_prerequisites</code></em> :</span></p></td>
<td>location to return the number
of prerequisites, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a>. <span class="annotation">[<acronym title="Parameter for returning results. Default is transfer full."><span class="acronym">out</span></acronym>][<acronym title="NULL is ok, both for passing and for returning."><span class="acronym">allow-none</span></acronym>]</span>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a
newly-allocated zero-terminated array of <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> containing
the prerequisites of <em class="parameter"><code>interface_type</code></em>. <span class="annotation">[<acronym title="Parameter points to an array of items."><span class="acronym">array</span></acronym> length=n_prerequisites][<acronym title="Free data after the code is done."><span class="acronym">transfer full</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.2</p>
</div>
<hr>
<div class="refsect2">
<a name="g-type-set-qdata"></a><h3>g_type_set_qdata ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_type_set_qdata                    (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Quarks.html#GQuark"><span class="type">GQuark</span></a> quark</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> data</code></em>);</pre>
<p>
Attaches arbitrary data to a type.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>a <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>quark</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Quarks.html#GQuark"><span class="type">GQuark</span></a> id to identify the data</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>data</code></em> :</span></p></td>
<td>the data</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-get-qdata"></a><h3>g_type_get_qdata ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gpointer"><span class="returnvalue">gpointer</span></a>            g_type_get_qdata                    (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Quarks.html#GQuark"><span class="type">GQuark</span></a> quark</code></em>);</pre>
<p>
Obtains data which has previously been attached to <em class="parameter"><code>type</code></em>
with <a class="link" href="gobject-Type-Information.html#g-type-set-qdata" title="g_type_set_qdata ()"><code class="function">g_type_set_qdata()</code></a>.
</p>
<p>
Note that this does not take subtyping into account; data
attached to one type with <a class="link" href="gobject-Type-Information.html#g-type-set-qdata" title="g_type_set_qdata ()"><code class="function">g_type_set_qdata()</code></a> cannot
be retrieved from a subtype using <a class="link" href="gobject-Type-Information.html#g-type-get-qdata" title="g_type_get_qdata ()"><code class="function">g_type_get_qdata()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>a <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>quark</code></em> :</span></p></td>
<td>a <a href="../glib/glib-Quarks.html#GQuark"><span class="type">GQuark</span></a> id to identify the data</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>the data, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if no data was found. <span class="annotation">[<acronym title="Don't free data after the code is done."><span class="acronym">transfer none</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-query"></a><h3>g_type_query ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_type_query                        (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeQuery" title="struct GTypeQuery"><span class="type">GTypeQuery</span></a> *query</code></em>);</pre>
<p>
Queries the type system for information about a specific type.
This function will fill in a user-provided structure to hold
type-specific information. If an invalid <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> is passed in, the
<em class="parameter"><code>type</code></em> member of the <a class="link" href="gobject-Type-Information.html#GTypeQuery" title="struct GTypeQuery"><span class="type">GTypeQuery</span></a> is 0. All members filled into the
<a class="link" href="gobject-Type-Information.html#GTypeQuery" title="struct GTypeQuery"><span class="type">GTypeQuery</span></a> structure should be considered constant and have to be
left untouched.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>the <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> value of a static, classed type.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>query</code></em> :</span></p></td>
<td>A user provided structure that is
filled in with constant values upon success. <span class="annotation">[<acronym title="Parameter for returning results. Default is transfer full."><span class="acronym">out</span></acronym> caller-allocates]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="GTypeQuery"></a><h3>struct GTypeQuery</h3>
<pre class="programlisting">struct GTypeQuery {
  GType		type;
  const gchar  *type_name;
  guint		class_size;
  guint		instance_size;
};
</pre>
<p>
A structure holding information for a specific type. It is
filled in by the <a class="link" href="gobject-Type-Information.html#g-type-query" title="g_type_query ()"><code class="function">g_type_query()</code></a> function.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> <em class="structfield"><code><a name="GTypeQuery.type"></a>type</code></em>;</span></p></td>
<td>the <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> value of the type.</td>
</tr>
<tr>
<td><p><span class="term">const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *<em class="structfield"><code><a name="GTypeQuery.type-name"></a>type_name</code></em>;</span></p></td>
<td>the name of the type.</td>
</tr>
<tr>
<td><p><span class="term"><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> <em class="structfield"><code><a name="GTypeQuery.class-size"></a>class_size</code></em>;</span></p></td>
<td>the size of the class structure.</td>
</tr>
<tr>
<td><p><span class="term"><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> <em class="structfield"><code><a name="GTypeQuery.instance-size"></a>instance_size</code></em>;</span></p></td>
<td>the size of the instance structure.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="GBaseInitFunc"></a><h3>GBaseInitFunc ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                (*GBaseInitFunc)                    (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_class</code></em>);</pre>
<p>
A callback function used by the type system to do base initialization
of the class structures of derived types. It is called as part of the
initialization process of all derived classes and should reallocate
or reset all dynamic class members copied over from the parent class.
For example, class members (such as strings) that are not sufficiently
handled by a plain memory copy of the parent class into the derived class
have to be altered. See <a class="link" href="gobject-Type-Information.html#GClassInitFunc" title="GClassInitFunc ()"><code class="function">GClassInitFunc()</code></a> for a discussion of the class
intialization process.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody><tr>
<td><p><span class="term"><em class="parameter"><code>g_class</code></em> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GTypeClass" title="struct GTypeClass"><span class="type">GTypeClass</span></a> structure to initialize.</td>
</tr></tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="GBaseFinalizeFunc"></a><h3>GBaseFinalizeFunc ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                (*GBaseFinalizeFunc)                (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_class</code></em>);</pre>
<p>
A callback function used by the type system to finalize those portions
of a derived types class structure that were setup from the corresponding
<a class="link" href="gobject-Type-Information.html#GBaseInitFunc" title="GBaseInitFunc ()"><code class="function">GBaseInitFunc()</code></a> function. Class finalization basically works the inverse
way in which class intialization is performed.
See <a class="link" href="gobject-Type-Information.html#GClassInitFunc" title="GClassInitFunc ()"><code class="function">GClassInitFunc()</code></a> for a discussion of the class intialization process.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody><tr>
<td><p><span class="term"><em class="parameter"><code>g_class</code></em> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GTypeClass" title="struct GTypeClass"><span class="type">GTypeClass</span></a> structure to finalize.</td>
</tr></tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="GClassInitFunc"></a><h3>GClassInitFunc ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                (*GClassInitFunc)                   (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_class</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> class_data</code></em>);</pre>
<p>
A callback function used by the type system to initialize the class
of a specific type. This function should initialize all static class
members.
The initialization process of a class involves:
</p>
<div class="itemizedlist"><ul class="itemizedlist" type="disc">
<li class="listitem"><p>
	1 - Copying common members from the parent class over to the
	derived class structure.
</p></li>
<li class="listitem"><p>
	2 -  Zero initialization of the remaining members not copied
	over from the parent class.
</p></li>
<li class="listitem"><p>
	3 - Invocation of the <a class="link" href="gobject-Type-Information.html#GBaseInitFunc" title="GBaseInitFunc ()"><code class="function">GBaseInitFunc()</code></a> initializers of all parent
	types and the class' type.
</p></li>
<li class="listitem"><p>
	4 - Invocation of the class' <a class="link" href="gobject-Type-Information.html#GClassInitFunc" title="GClassInitFunc ()"><code class="function">GClassInitFunc()</code></a> initializer.
</p></li>
</ul></div>
<p>
Since derived classes are partially initialized through a memory copy
of the parent class, the general rule is that <a class="link" href="gobject-Type-Information.html#GBaseInitFunc" title="GBaseInitFunc ()"><code class="function">GBaseInitFunc()</code></a> and
<a class="link" href="gobject-Type-Information.html#GBaseFinalizeFunc" title="GBaseFinalizeFunc ()"><code class="function">GBaseFinalizeFunc()</code></a> should take care of necessary reinitialization
and release of those class members that were introduced by the type
that specified these <a class="link" href="gobject-Type-Information.html#GBaseInitFunc" title="GBaseInitFunc ()"><code class="function">GBaseInitFunc()</code></a>/<a class="link" href="gobject-Type-Information.html#GBaseFinalizeFunc" title="GBaseFinalizeFunc ()"><code class="function">GBaseFinalizeFunc()</code></a>.
<a class="link" href="gobject-Type-Information.html#GClassInitFunc" title="GClassInitFunc ()"><code class="function">GClassInitFunc()</code></a> should only care about initializing static
class members, while dynamic class members (such as allocated strings
or reference counted resources) are better handled by a <a class="link" href="gobject-Type-Information.html#GBaseInitFunc" title="GBaseInitFunc ()"><code class="function">GBaseInitFunc()</code></a>
for this type, so proper initialization of the dynamic class members
is performed for class initialization of derived types as well.
An example may help to correspond the intend of the different class
initializers:
</p>
<p>
</p>
<div class="informalexample"><pre class="programlisting">
typedef struct {
  GObjectClass parent_class;
  gint         static_integer;
  gchar       *dynamic_string;
} TypeAClass;
static void
type_a_base_class_init (TypeAClass *class)
{
  class-&gt;dynamic_string = g_strdup ("some string");
}
static void
type_a_base_class_finalize (TypeAClass *class)
{
  g_free (class-&gt;dynamic_string);
}
static void
type_a_class_init (TypeAClass *class)
{
  class-&gt;static_integer = 42;
}

typedef struct {
  TypeAClass   parent_class;
  gfloat       static_float;
  GString     *dynamic_gstring;
} TypeBClass;
static void
type_b_base_class_init (TypeBClass *class)
{
  class-&gt;dynamic_gstring = g_string_new ("some other string");
}
static void
type_b_base_class_finalize (TypeBClass *class)
{
  g_string_free (class-&gt;dynamic_gstring);
}
static void
type_b_class_init (TypeBClass *class)
{
  class-&gt;static_float = 3.14159265358979323846;
}
</pre></div>
<p>
Initialization of TypeBClass will first cause initialization of
TypeAClass (derived classes reference their parent classes, see
<a class="link" href="gobject-Type-Information.html#g-type-class-ref" title="g_type_class_ref ()"><code class="function">g_type_class_ref()</code></a> on this).
Initialization of TypeAClass roughly involves zero-initializing its fields,
then calling its <a class="link" href="gobject-Type-Information.html#GBaseInitFunc" title="GBaseInitFunc ()"><code class="function">GBaseInitFunc()</code></a> <code class="function">type_a_base_class_init()</code> to allocate
its dynamic members (dynamic_string), and finally calling its <a class="link" href="gobject-Type-Information.html#GClassInitFunc" title="GClassInitFunc ()"><code class="function">GClassInitFunc()</code></a>
<code class="function">type_a_class_init()</code> to initialize its static members (static_integer).
The first step in the initialization process of TypeBClass is then
a plain memory copy of the contents of TypeAClass into TypeBClass and 
zero-initialization of the remaining fields in TypeBClass.
The dynamic members of TypeAClass within TypeBClass now need
reinitialization which is performed by calling <code class="function">type_a_base_class_init()</code>
with an argument of TypeBClass.
After that, the <a class="link" href="gobject-Type-Information.html#GBaseInitFunc" title="GBaseInitFunc ()"><code class="function">GBaseInitFunc()</code></a> of TypeBClass, <code class="function">type_b_base_class_init()</code>
is called to allocate the dynamic members of TypeBClass (dynamic_gstring),
and finally the <a class="link" href="gobject-Type-Information.html#GClassInitFunc" title="GClassInitFunc ()"><code class="function">GClassInitFunc()</code></a> of TypeBClass, <code class="function">type_b_class_init()</code>,
is called to complete the initialization process with the static members
(static_float).
Corresponding finalization counter parts to the <a class="link" href="gobject-Type-Information.html#GBaseInitFunc" title="GBaseInitFunc ()"><code class="function">GBaseInitFunc()</code></a> functions
have to be provided to release allocated resources at class finalization
time.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_class</code></em> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GTypeClass" title="struct GTypeClass"><span class="type">GTypeClass</span></a> structure to initialize.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>class_data</code></em> :</span></p></td>
<td>The <em class="parameter"><code>class_data</code></em> member supplied via the <a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a> structure.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="GClassFinalizeFunc"></a><h3>GClassFinalizeFunc ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                (*GClassFinalizeFunc)               (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_class</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> class_data</code></em>);</pre>
<p>
A callback function used by the type system to finalize a class.
This function is rarely needed, as dynamically allocated class resources
should be handled by <a class="link" href="gobject-Type-Information.html#GBaseInitFunc" title="GBaseInitFunc ()"><code class="function">GBaseInitFunc()</code></a> and <a class="link" href="gobject-Type-Information.html#GBaseFinalizeFunc" title="GBaseFinalizeFunc ()"><code class="function">GBaseFinalizeFunc()</code></a>.
Also, specification of a <a class="link" href="gobject-Type-Information.html#GClassFinalizeFunc" title="GClassFinalizeFunc ()"><code class="function">GClassFinalizeFunc()</code></a> in the <a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a>
structure of a static type is invalid, because classes of static types
will never be finalized (they are artificially kept alive when their
reference count drops to zero).
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_class</code></em> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GTypeClass" title="struct GTypeClass"><span class="type">GTypeClass</span></a> structure to finalize.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>class_data</code></em> :</span></p></td>
<td>The <em class="parameter"><code>class_data</code></em> member supplied via the <a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a> structure.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="GInstanceInitFunc"></a><h3>GInstanceInitFunc ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                (*GInstanceInitFunc)                (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeInstance" title="struct GTypeInstance"><span class="type">GTypeInstance</span></a> *instance</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_class</code></em>);</pre>
<p>
A callback function used by the type system to initialize a new
instance of a type. This function initializes all instance members and
allocates any resources required by it.
Initialization of a derived instance involves calling all its parent
types instance initializers, so the class member of the instance
is altered during its initialization to always point to the class that
belongs to the type the current initializer was introduced for.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>instance</code></em> :</span></p></td>
<td>The instance to initialize.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_class</code></em> :</span></p></td>
<td>The class of the type the instance is created for.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="GInterfaceInitFunc"></a><h3>GInterfaceInitFunc ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                (*GInterfaceInitFunc)               (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_iface</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> iface_data</code></em>);</pre>
<p>
A callback function used by the type system to initialize a new
interface.  This function should initialize all internal data and
allocate any resources required by the interface.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_iface</code></em> :</span></p></td>
<td>The interface structure to initialize.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>iface_data</code></em> :</span></p></td>
<td>The <em class="parameter"><code>interface_data</code></em> supplied via the <a class="link" href="gobject-Type-Information.html#GInterfaceInfo" title="struct GInterfaceInfo"><span class="type">GInterfaceInfo</span></a> structure.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="GInterfaceFinalizeFunc"></a><h3>GInterfaceFinalizeFunc ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                (*GInterfaceFinalizeFunc)           (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_iface</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> iface_data</code></em>);</pre>
<p>
A callback function used by the type system to finalize an interface.
This function should destroy any internal data and release any resources
allocated by the corresponding <a class="link" href="gobject-Type-Information.html#GInterfaceInitFunc" title="GInterfaceInitFunc ()"><code class="function">GInterfaceInitFunc()</code></a> function.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_iface</code></em> :</span></p></td>
<td>The interface structure to finalize.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>iface_data</code></em> :</span></p></td>
<td>The <em class="parameter"><code>interface_data</code></em> supplied via the <a class="link" href="gobject-Type-Information.html#GInterfaceInfo" title="struct GInterfaceInfo"><span class="type">GInterfaceInfo</span></a> structure.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="GTypeClassCacheFunc"></a><h3>GTypeClassCacheFunc ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            (*GTypeClassCacheFunc)              (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> cache_data</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeClass" title="struct GTypeClass"><span class="type">GTypeClass</span></a> *g_class</code></em>);</pre>
<p>
A callback function which is called when the reference count of a class 
drops to zero. It may use <a class="link" href="gobject-Type-Information.html#g-type-class-ref" title="g_type_class_ref ()"><code class="function">g_type_class_ref()</code></a> to prevent the class from
being freed. You should not call <a class="link" href="gobject-Type-Information.html#g-type-class-unref" title="g_type_class_unref ()"><code class="function">g_type_class_unref()</code></a> from a 
<a class="link" href="gobject-Type-Information.html#GTypeClassCacheFunc" title="GTypeClassCacheFunc ()"><span class="type">GTypeClassCacheFunc</span></a> function to prevent infinite recursion, use 
<a class="link" href="gobject-Type-Information.html#g-type-class-unref-uncached" title="g_type_class_unref_uncached ()"><code class="function">g_type_class_unref_uncached()</code></a> instead.
</p>
<p>
The functions have to check the class id passed in to figure 
whether they actually want to cache the class of this type, since all
classes are routed through the same <a class="link" href="gobject-Type-Information.html#GTypeClassCacheFunc" title="GTypeClassCacheFunc ()"><span class="type">GTypeClassCacheFunc</span></a> chain.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>cache_data</code></em> :</span></p></td>
<td>data that was given to the <a class="link" href="gobject-Type-Information.html#g-type-add-class-cache-func" title="g_type_add_class_cache_func ()"><code class="function">g_type_add_class_cache_func()</code></a> call</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_class</code></em> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GTypeClass" title="struct GTypeClass"><span class="type">GTypeClass</span></a> structure which is unreferenced</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> to stop further <a class="link" href="gobject-Type-Information.html#GTypeClassCacheFunc" title="GTypeClassCacheFunc ()"><span class="type">GTypeClassCacheFunc</span></a>s from being
called, <a href="../glib/glib-Standard-Macros.html#FALSE:CAPS"><code class="literal">FALSE</code></a> to continue.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="GTypeFlags"></a><h3>enum GTypeFlags</h3>
<pre class="programlisting">typedef enum {
  G_TYPE_FLAG_ABSTRACT		= (1 &lt;&lt; 4),
  G_TYPE_FLAG_VALUE_ABSTRACT = (1 &lt;&lt; 5)
} GTypeFlags;
</pre>
<p>
Bit masks used to check or determine characteristics of a type.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><a name="G-TYPE-FLAG-ABSTRACT:CAPS"></a><span class="term"><code class="literal">G_TYPE_FLAG_ABSTRACT</code></span></p></td>
<td>Indicates an abstract type. No instances can be
 created for an abstract type.
</td>
</tr>
<tr>
<td><p><a name="G-TYPE-FLAG-VALUE-ABSTRACT:CAPS"></a><span class="term"><code class="literal">G_TYPE_FLAG_VALUE_ABSTRACT</code></span></p></td>
<td>Indicates an abstract value type, i.e. a type
 that introduces a value table, but can't be used for
 <a class="link" href="gobject-Generic-values.html#g-value-init" title="g_value_init ()"><code class="function">g_value_init()</code></a>.
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="GTypeFundamentalFlags"></a><h3>enum GTypeFundamentalFlags</h3>
<pre class="programlisting">typedef enum {
  G_TYPE_FLAG_CLASSED           = (1 &lt;&lt; 0),
  G_TYPE_FLAG_INSTANTIATABLE    = (1 &lt;&lt; 1),
  G_TYPE_FLAG_DERIVABLE         = (1 &lt;&lt; 2),
  G_TYPE_FLAG_DEEP_DERIVABLE    = (1 &lt;&lt; 3)
} GTypeFundamentalFlags;
</pre>
<p>
Bit masks used to check or determine specific characteristics of a
fundamental type.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><a name="G-TYPE-FLAG-CLASSED:CAPS"></a><span class="term"><code class="literal">G_TYPE_FLAG_CLASSED</code></span></p></td>
<td>Indicates a classed type.
</td>
</tr>
<tr>
<td><p><a name="G-TYPE-FLAG-INSTANTIATABLE:CAPS"></a><span class="term"><code class="literal">G_TYPE_FLAG_INSTANTIATABLE</code></span></p></td>
<td>Indicates an instantiable type (implies classed).
</td>
</tr>
<tr>
<td><p><a name="G-TYPE-FLAG-DERIVABLE:CAPS"></a><span class="term"><code class="literal">G_TYPE_FLAG_DERIVABLE</code></span></p></td>
<td>Indicates a flat derivable type.
</td>
</tr>
<tr>
<td><p><a name="G-TYPE-FLAG-DEEP-DERIVABLE:CAPS"></a><span class="term"><code class="literal">G_TYPE_FLAG_DEEP_DERIVABLE</code></span></p></td>
<td>Indicates a deep derivable type (implies derivable).
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-register-static"></a><h3>g_type_register_static ()</h3>
<pre class="programlisting"><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a>               g_type_register_static              (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> parent_type</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *type_name</code></em>,
                                                         <em class="parameter"><code>const <a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a> *info</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeFlags" title="enum GTypeFlags"><span class="type">GTypeFlags</span></a> flags</code></em>);</pre>
<p>
Registers <em class="parameter"><code>type_name</code></em> as the name of a new static type derived from
<em class="parameter"><code>parent_type</code></em>.  The type system uses the information contained in the
<a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a> structure pointed to by <em class="parameter"><code>info</code></em> to manage the type and its
instances (if not abstract).  The value of <em class="parameter"><code>flags</code></em> determines the nature
(e.g. abstract or not) of the type.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>parent_type</code></em> :</span></p></td>
<td>Type from which this type will be derived.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>type_name</code></em> :</span></p></td>
<td>0-terminated string used as the name of the new type.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>info</code></em> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a> structure for this type.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>Bitwise combination of <a class="link" href="gobject-Type-Information.html#GTypeFlags" title="enum GTypeFlags"><span class="type">GTypeFlags</span></a> values.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>The new type identifier.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-register-static-simple"></a><h3>g_type_register_static_simple ()</h3>
<pre class="programlisting"><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a>               g_type_register_static_simple       (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> parent_type</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *type_name</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> class_size</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GClassInitFunc" title="GClassInitFunc ()"><span class="type">GClassInitFunc</span></a> class_init</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> instance_size</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GInstanceInitFunc" title="GInstanceInitFunc ()"><span class="type">GInstanceInitFunc</span></a> instance_init</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeFlags" title="enum GTypeFlags"><span class="type">GTypeFlags</span></a> flags</code></em>);</pre>
<p>
Registers <em class="parameter"><code>type_name</code></em> as the name of a new static type derived from
<em class="parameter"><code>parent_type</code></em>.  The value of <em class="parameter"><code>flags</code></em> determines the nature (e.g.
abstract or not) of the type. It works by filling a <a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a>
struct and calling <a class="link" href="gobject-Type-Information.html#g-type-register-static" title="g_type_register_static ()"><code class="function">g_type_register_static()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>parent_type</code></em> :</span></p></td>
<td>Type from which this type will be derived.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>type_name</code></em> :</span></p></td>
<td>0-terminated string used as the name of the new type.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>class_size</code></em> :</span></p></td>
<td>Size of the class structure (see <a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a>)</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>class_init</code></em> :</span></p></td>
<td>Location of the class initialization function (see <a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a>)</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>instance_size</code></em> :</span></p></td>
<td>Size of the instance structure (see <a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a>)</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>instance_init</code></em> :</span></p></td>
<td>Location of the instance initialization function (see <a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a>)</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>Bitwise combination of <a class="link" href="gobject-Type-Information.html#GTypeFlags" title="enum GTypeFlags"><span class="type">GTypeFlags</span></a> values.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>The new type identifier.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.12</p>
</div>
<hr>
<div class="refsect2">
<a name="g-type-register-dynamic"></a><h3>g_type_register_dynamic ()</h3>
<pre class="programlisting"><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a>               g_type_register_dynamic             (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> parent_type</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *type_name</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GTypePlugin.html" title="GTypePlugin"><span class="type">GTypePlugin</span></a> *plugin</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeFlags" title="enum GTypeFlags"><span class="type">GTypeFlags</span></a> flags</code></em>);</pre>
<p>
Registers <em class="parameter"><code>type_name</code></em> as the name of a new dynamic type derived from
<em class="parameter"><code>parent_type</code></em>.  The type system uses the information contained in the
<a class="link" href="GTypePlugin.html" title="GTypePlugin"><span class="type">GTypePlugin</span></a> structure pointed to by <em class="parameter"><code>plugin</code></em> to manage the type and its
instances (if not abstract).  The value of <em class="parameter"><code>flags</code></em> determines the nature
(e.g. abstract or not) of the type.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>parent_type</code></em> :</span></p></td>
<td>Type from which this type will be derived.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>type_name</code></em> :</span></p></td>
<td>0-terminated string used as the name of the new type.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>plugin</code></em> :</span></p></td>
<td>The <a class="link" href="GTypePlugin.html" title="GTypePlugin"><span class="type">GTypePlugin</span></a> structure to retrieve the <a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a> from.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>Bitwise combination of <a class="link" href="gobject-Type-Information.html#GTypeFlags" title="enum GTypeFlags"><span class="type">GTypeFlags</span></a> values.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>The new type identifier or <a class="link" href="gobject-Type-Information.html#G-TYPE-INVALID:CAPS" title="G_TYPE_INVALID"><span class="type">G_TYPE_INVALID</span></a> if registration failed.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-register-fundamental"></a><h3>g_type_register_fundamental ()</h3>
<pre class="programlisting"><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a>               g_type_register_fundamental         (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type_id</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *type_name</code></em>,
                                                         <em class="parameter"><code>const <a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a> *info</code></em>,
                                                         <em class="parameter"><code>const <a class="link" href="gobject-Type-Information.html#GTypeFundamentalInfo" title="struct GTypeFundamentalInfo"><span class="type">GTypeFundamentalInfo</span></a> *finfo</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeFlags" title="enum GTypeFlags"><span class="type">GTypeFlags</span></a> flags</code></em>);</pre>
<p>
Registers <em class="parameter"><code>type_id</code></em> as the predefined identifier and <em class="parameter"><code>type_name</code></em> as the
name of a fundamental type. If <em class="parameter"><code>type_id</code></em> is already registered, or a type
named <em class="parameter"><code>type_name</code></em> is already registered, the behaviour is undefined. The type
system uses the information contained in the <a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a> structure pointed to
by <em class="parameter"><code>info</code></em> and the <a class="link" href="gobject-Type-Information.html#GTypeFundamentalInfo" title="struct GTypeFundamentalInfo"><span class="type">GTypeFundamentalInfo</span></a> structure pointed to by <em class="parameter"><code>finfo</code></em> to
manage the type and its instances. The value of <em class="parameter"><code>flags</code></em> determines additional
characteristics of the fundamental type.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type_id</code></em> :</span></p></td>
<td>A predefined type identifier.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>type_name</code></em> :</span></p></td>
<td>0-terminated string used as the name of the new type.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>info</code></em> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a> structure for this type.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>finfo</code></em> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GTypeFundamentalInfo" title="struct GTypeFundamentalInfo"><span class="type">GTypeFundamentalInfo</span></a> structure for this type.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>Bitwise combination of <a class="link" href="gobject-Type-Information.html#GTypeFlags" title="enum GTypeFlags"><span class="type">GTypeFlags</span></a> values.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>The predefined type identifier.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-add-interface-static"></a><h3>g_type_add_interface_static ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_type_add_interface_static         (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> instance_type</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> interface_type</code></em>,
                                                         <em class="parameter"><code>const <a class="link" href="gobject-Type-Information.html#GInterfaceInfo" title="struct GInterfaceInfo"><span class="type">GInterfaceInfo</span></a> *info</code></em>);</pre>
<p>
Adds the static <em class="parameter"><code>interface_type</code></em> to <em class="parameter"><code>instantiable_type</code></em>.  The
information contained in the <a class="link" href="gobject-Type-Information.html#GInterfaceInfo" title="struct GInterfaceInfo"><span class="type">GInterfaceInfo</span></a> structure pointed to by
<em class="parameter"><code>info</code></em> is used to manage the relationship.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>instance_type</code></em> :</span></p></td>
<td>
<a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> value of an instantiable type.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>interface_type</code></em> :</span></p></td>
<td>
<a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> value of an interface type.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>info</code></em> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GInterfaceInfo" title="struct GInterfaceInfo"><span class="type">GInterfaceInfo</span></a> structure for this
(<em class="parameter"><code>instance_type</code></em>, <em class="parameter"><code>interface_type</code></em>) combination.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-add-interface-dynamic"></a><h3>g_type_add_interface_dynamic ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_type_add_interface_dynamic        (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> instance_type</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> interface_type</code></em>,
                                                         <em class="parameter"><code><a class="link" href="GTypePlugin.html" title="GTypePlugin"><span class="type">GTypePlugin</span></a> *plugin</code></em>);</pre>
<p>
Adds the dynamic <em class="parameter"><code>interface_type</code></em> to <em class="parameter"><code>instantiable_type</code></em>. The information
contained in the <a class="link" href="GTypePlugin.html" title="GTypePlugin"><span class="type">GTypePlugin</span></a> structure pointed to by <em class="parameter"><code>plugin</code></em>
is used to manage the relationship.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>instance_type</code></em> :</span></p></td>
<td>the <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> value of an instantiable type.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>interface_type</code></em> :</span></p></td>
<td>the <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> value of an interface type.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>plugin</code></em> :</span></p></td>
<td>the <a class="link" href="GTypePlugin.html" title="GTypePlugin"><span class="type">GTypePlugin</span></a> structure to retrieve the <a class="link" href="gobject-Type-Information.html#GInterfaceInfo" title="struct GInterfaceInfo"><span class="type">GInterfaceInfo</span></a> from.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-interface-add-prerequisite"></a><h3>g_type_interface_add_prerequisite ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_type_interface_add_prerequisite   (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> interface_type</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> prerequisite_type</code></em>);</pre>
<p>
Adds <em class="parameter"><code>prerequisite_type</code></em> to the list of prerequisites of <em class="parameter"><code>interface_type</code></em>.
This means that any type implementing <em class="parameter"><code>interface_type</code></em> must also implement
<em class="parameter"><code>prerequisite_type</code></em>. Prerequisites can be thought of as an alternative to
interface derivation (which GType doesn't support). An interface can have
at most one instantiatable prerequisite type.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>interface_type</code></em> :</span></p></td>
<td>
<a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> value of an interface type.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>prerequisite_type</code></em> :</span></p></td>
<td>
<a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> value of an interface or instantiatable type.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-get-plugin"></a><h3>g_type_get_plugin ()</h3>
<pre class="programlisting"><a class="link" href="GTypePlugin.html" title="GTypePlugin"><span class="returnvalue">GTypePlugin</span></a> *       g_type_get_plugin                   (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>);</pre>
<p>
Returns the <a class="link" href="GTypePlugin.html" title="GTypePlugin"><span class="type">GTypePlugin</span></a> structure for <em class="parameter"><code>type</code></em> or
<a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if <em class="parameter"><code>type</code></em> does not have a <a class="link" href="GTypePlugin.html" title="GTypePlugin"><span class="type">GTypePlugin</span></a> structure.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> to retrieve the plugin for.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>The corresponding plugin if <em class="parameter"><code>type</code></em> is a
dynamic type, <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> otherwise. <span class="annotation">[<acronym title="Don't free data after the code is done."><span class="acronym">transfer none</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-interface-get-plugin"></a><h3>g_type_interface_get_plugin ()</h3>
<pre class="programlisting"><a class="link" href="GTypePlugin.html" title="GTypePlugin"><span class="returnvalue">GTypePlugin</span></a> *       g_type_interface_get_plugin         (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> instance_type</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> interface_type</code></em>);</pre>
<p>
Returns the <a class="link" href="GTypePlugin.html" title="GTypePlugin"><span class="type">GTypePlugin</span></a> structure for the dynamic interface
<em class="parameter"><code>interface_type</code></em> which has been added to <em class="parameter"><code>instance_type</code></em>, or <a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if
<em class="parameter"><code>interface_type</code></em> has not been added to <em class="parameter"><code>instance_type</code></em> or does not
have a <a class="link" href="GTypePlugin.html" title="GTypePlugin"><span class="type">GTypePlugin</span></a> structure. See <a class="link" href="gobject-Type-Information.html#g-type-add-interface-dynamic" title="g_type_add_interface_dynamic ()"><code class="function">g_type_add_interface_dynamic()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>instance_type</code></em> :</span></p></td>
<td>the <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> value of an instantiatable type.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>interface_type</code></em> :</span></p></td>
<td>the <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> value of an interface type.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>the <a class="link" href="GTypePlugin.html" title="GTypePlugin"><span class="type">GTypePlugin</span></a> for the dynamic
interface <em class="parameter"><code>interface_type</code></em> of <em class="parameter"><code>instance_type</code></em>. <span class="annotation">[<acronym title="Don't free data after the code is done."><span class="acronym">transfer none</span></acronym>]</span>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-fundamental-next"></a><h3>g_type_fundamental_next ()</h3>
<pre class="programlisting"><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a>               g_type_fundamental_next             (<em class="parameter"><code><span class="type">void</span></code></em>);</pre>
<p>
Returns the next free fundamental type id which can be used to
register a new fundamental type with <a class="link" href="gobject-Type-Information.html#g-type-register-fundamental" title="g_type_register_fundamental ()"><code class="function">g_type_register_fundamental()</code></a>.
The returned type ID represents the highest currently registered
fundamental type identifier.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody><tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>The nextmost fundamental type ID to be registered,
or 0 if the type system ran out of fundamental type IDs.</td>
</tr></tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-fundamental"></a><h3>g_type_fundamental ()</h3>
<pre class="programlisting"><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a>               g_type_fundamental                  (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type_id</code></em>);</pre>
<p>
Internal function, used to extract the fundamental type ID portion.
use <a class="link" href="gobject-Type-Information.html#G-TYPE-FUNDAMENTAL:CAPS" title="G_TYPE_FUNDAMENTAL()"><code class="function">G_TYPE_FUNDAMENTAL()</code></a> instead.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type_id</code></em> :</span></p></td>
<td>valid type ID</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>fundamental type ID</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-create-instance"></a><h3>g_type_create_instance ()</h3>
<pre class="programlisting"><a class="link" href="gobject-Type-Information.html#GTypeInstance" title="struct GTypeInstance"><span class="returnvalue">GTypeInstance</span></a> *     g_type_create_instance              (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>);</pre>
<p>
Creates and initializes an instance of <em class="parameter"><code>type</code></em> if <em class="parameter"><code>type</code></em> is valid and
can be instantiated. The type system only performs basic allocation
and structure setups for instances: actual instance creation should
happen through functions supplied by the type's fundamental type
implementation.  So use of <a class="link" href="gobject-Type-Information.html#g-type-create-instance" title="g_type_create_instance ()"><code class="function">g_type_create_instance()</code></a> is reserved for
implementators of fundamental types only. E.g. instances of the
<a class="link" href="gobject-The-Base-Object-Type.html#GObject"><span class="type">GObject</span></a> hierarchy should be created via <a class="link" href="gobject-The-Base-Object-Type.html#g-object-new" title="g_object_new ()"><code class="function">g_object_new()</code></a> and
<span class="emphasis"><em>never</em></span> directly through
<a class="link" href="gobject-Type-Information.html#g-type-create-instance" title="g_type_create_instance ()"><code class="function">g_type_create_instance()</code></a> which doesn't handle things like singleton
objects or object construction.  Note: Do <span class="emphasis"><em>not</em></span>
use this function, unless you're implementing a fundamental
type. Also language bindings should <span class="emphasis"><em>not</em></span> use
this function but <a class="link" href="gobject-The-Base-Object-Type.html#g-object-new" title="g_object_new ()"><code class="function">g_object_new()</code></a> instead.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>An instantiatable type to create an instance for.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>An allocated and initialized instance, subject to further
treatment by the fundamental type implementation.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-free-instance"></a><h3>g_type_free_instance ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_type_free_instance                (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeInstance" title="struct GTypeInstance"><span class="type">GTypeInstance</span></a> *instance</code></em>);</pre>
<p>
Frees an instance of a type, returning it to the instance pool for
the type, if there is one.
</p>
<p>
Like <a class="link" href="gobject-Type-Information.html#g-type-create-instance" title="g_type_create_instance ()"><code class="function">g_type_create_instance()</code></a>, this function is reserved for
implementors of fundamental types.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody><tr>
<td><p><span class="term"><em class="parameter"><code>instance</code></em> :</span></p></td>
<td>an instance of a type.</td>
</tr></tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-add-class-cache-func"></a><h3>g_type_add_class_cache_func ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_type_add_class_cache_func         (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> cache_data</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeClassCacheFunc" title="GTypeClassCacheFunc ()"><span class="type">GTypeClassCacheFunc</span></a> cache_func</code></em>);</pre>
<p>
Adds a <a class="link" href="gobject-Type-Information.html#GTypeClassCacheFunc" title="GTypeClassCacheFunc ()"><span class="type">GTypeClassCacheFunc</span></a> to be called before the reference count of a
class goes from one to zero. This can be used to prevent premature class
destruction. All installed <a class="link" href="gobject-Type-Information.html#GTypeClassCacheFunc" title="GTypeClassCacheFunc ()"><span class="type">GTypeClassCacheFunc</span></a> functions will be chained
until one of them returns <a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a>. The functions have to check the class id
passed in to figure whether they actually want to cache the class of this
type, since all classes are routed through the same <a class="link" href="gobject-Type-Information.html#GTypeClassCacheFunc" title="GTypeClassCacheFunc ()"><span class="type">GTypeClassCacheFunc</span></a>
chain.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>cache_data</code></em> :</span></p></td>
<td>data to be passed to <em class="parameter"><code>cache_func</code></em>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cache_func</code></em> :</span></p></td>
<td>a <a class="link" href="gobject-Type-Information.html#GTypeClassCacheFunc" title="GTypeClassCacheFunc ()"><span class="type">GTypeClassCacheFunc</span></a>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-remove-class-cache-func"></a><h3>g_type_remove_class_cache_func ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_type_remove_class_cache_func      (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> cache_data</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeClassCacheFunc" title="GTypeClassCacheFunc ()"><span class="type">GTypeClassCacheFunc</span></a> cache_func</code></em>);</pre>
<p>
Removes a previously installed <a class="link" href="gobject-Type-Information.html#GTypeClassCacheFunc" title="GTypeClassCacheFunc ()"><span class="type">GTypeClassCacheFunc</span></a>. The cache
maintained by <em class="parameter"><code>cache_func</code></em> has to be empty when calling
<a class="link" href="gobject-Type-Information.html#g-type-remove-class-cache-func" title="g_type_remove_class_cache_func ()"><code class="function">g_type_remove_class_cache_func()</code></a> to avoid leaks.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>cache_data</code></em> :</span></p></td>
<td>data that was given when adding <em class="parameter"><code>cache_func</code></em>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>cache_func</code></em> :</span></p></td>
<td>a <a class="link" href="gobject-Type-Information.html#GTypeClassCacheFunc" title="GTypeClassCacheFunc ()"><span class="type">GTypeClassCacheFunc</span></a>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-class-unref-uncached"></a><h3>g_type_class_unref_uncached ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_type_class_unref_uncached         (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_class</code></em>);</pre>
<p>
A variant of <a class="link" href="gobject-Type-Information.html#g-type-class-unref" title="g_type_class_unref ()"><code class="function">g_type_class_unref()</code></a> for use in <a class="link" href="gobject-Type-Information.html#GTypeClassCacheFunc" title="GTypeClassCacheFunc ()"><span class="type">GTypeClassCacheFunc</span></a>
implementations. It unreferences a class without consulting the chain
of <a class="link" href="gobject-Type-Information.html#GTypeClassCacheFunc" title="GTypeClassCacheFunc ()"><span class="type">GTypeClassCacheFunc</span></a>s, avoiding the recursion which would occur
otherwise.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody><tr>
<td><p><span class="term"><em class="parameter"><code>g_class</code></em> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GTypeClass" title="struct GTypeClass"><span class="type">GTypeClass</span></a> structure to
unreference. <span class="annotation">[<acronym title="Override the parsed C type with given type"><span class="acronym">type</span></acronym> GObject.TypeClass]</span>
</td>
</tr></tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-type-add-interface-check"></a><h3>g_type_add_interface_check ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_type_add_interface_check          (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> check_data</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeInterfaceCheckFunc" title="GTypeInterfaceCheckFunc ()"><span class="type">GTypeInterfaceCheckFunc</span></a> check_func</code></em>);</pre>
<p>
Adds a function to be called after an interface vtable is
initialized for any class (i.e. after the <em class="parameter"><code>interface_init</code></em> member of
<a class="link" href="gobject-Type-Information.html#GInterfaceInfo" title="struct GInterfaceInfo"><span class="type">GInterfaceInfo</span></a> has been called).
</p>
<p>
This function is useful when you want to check an invariant that
depends on the interfaces of a class. For instance, the
implementation of <a class="link" href="gobject-The-Base-Object-Type.html#GObject"><span class="type">GObject</span></a> uses this facility to check that an
object implements all of the properties that are defined on its
interfaces.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>check_data</code></em> :</span></p></td>
<td>data to pass to <em class="parameter"><code>check_func</code></em>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>check_func</code></em> :</span></p></td>
<td>function to be called after each interface
is initialized.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.4</p>
</div>
<hr>
<div class="refsect2">
<a name="g-type-remove-interface-check"></a><h3>g_type_remove_interface_check ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_type_remove_interface_check       (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> check_data</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GTypeInterfaceCheckFunc" title="GTypeInterfaceCheckFunc ()"><span class="type">GTypeInterfaceCheckFunc</span></a> check_func</code></em>);</pre>
<p>
Removes an interface check function added with
<a class="link" href="gobject-Type-Information.html#g-type-add-interface-check" title="g_type_add_interface_check ()"><code class="function">g_type_add_interface_check()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>check_data</code></em> :</span></p></td>
<td>callback data passed to <a class="link" href="gobject-Type-Information.html#g-type-add-interface-check" title="g_type_add_interface_check ()"><code class="function">g_type_add_interface_check()</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>check_func</code></em> :</span></p></td>
<td>callback function passed to <a class="link" href="gobject-Type-Information.html#g-type-add-interface-check" title="g_type_add_interface_check ()"><code class="function">g_type_add_interface_check()</code></a>
</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.4</p>
</div>
<hr>
<div class="refsect2">
<a name="GTypeInterfaceCheckFunc"></a><h3>GTypeInterfaceCheckFunc ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                (*GTypeInterfaceCheckFunc)          (<em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> check_data</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> g_iface</code></em>);</pre>
<p>
A callback called after an interface vtable is initialized.
See <a class="link" href="gobject-Type-Information.html#g-type-add-interface-check" title="g_type_add_interface_check ()"><code class="function">g_type_add_interface_check()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>check_data</code></em> :</span></p></td>
<td>data passed to <a class="link" href="gobject-Type-Information.html#g-type-add-interface-check" title="g_type_add_interface_check ()"><code class="function">g_type_add_interface_check()</code></a>.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>g_iface</code></em> :</span></p></td>
<td>the interface that has been initialized</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.4</p>
</div>
<hr>
<div class="refsect2">
<a name="g-type-value-table-peek"></a><h3>g_type_value_table_peek ()</h3>
<pre class="programlisting"><a class="link" href="gobject-Type-Information.html#GTypeValueTable" title="struct GTypeValueTable"><span class="returnvalue">GTypeValueTable</span></a> *   g_type_value_table_peek             (<em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> type</code></em>);</pre>
<p>
Returns the location of the <a class="link" href="gobject-Type-Information.html#GTypeValueTable" title="struct GTypeValueTable"><span class="type">GTypeValueTable</span></a> associated with <em class="parameter"><code>type</code></em>.
<span class="emphasis"><em>Note that this function should only be used from source code
that implements or has internal knowledge of the implementation of
<em class="parameter"><code>type</code></em>.</em></span>
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>type</code></em> :</span></p></td>
<td>A <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> value.</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>Location of the <a class="link" href="gobject-Type-Information.html#GTypeValueTable" title="struct GTypeValueTable"><span class="type">GTypeValueTable</span></a> associated with <em class="parameter"><code>type</code></em> or
<a href="../glib/glib-Standard-Macros.html#NULL:CAPS"><code class="literal">NULL</code></a> if there is no <a class="link" href="gobject-Type-Information.html#GTypeValueTable" title="struct GTypeValueTable"><span class="type">GTypeValueTable</span></a> associated with <em class="parameter"><code>type</code></em>.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-DEFINE-TYPE:CAPS"></a><h3>G_DEFINE_TYPE()</h3>
<pre class="programlisting">#define G_DEFINE_TYPE(TN, t_n, T_P)			    G_DEFINE_TYPE_EXTENDED (TN, t_n, T_P, 0, {})
</pre>
<p>
A convenience macro for type implementations, which declares a 
class initialization function, an instance initialization function (see <a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a> for information about 
these) and a static variable named <em class="parameter"><code>t_n</code></em>_parent_class pointing to the parent class. Furthermore, it defines 
a *_get_type() function. See <a class="link" href="gobject-Type-Information.html#G-DEFINE-TYPE-EXTENDED:CAPS" title="G_DEFINE_TYPE_EXTENDED()"><code class="function">G_DEFINE_TYPE_EXTENDED()</code></a> for an example.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>TN</code></em> :</span></p></td>
<td>The name of the new type, in Camel case.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>t_n</code></em> :</span></p></td>
<td>The name of the new type, in lowercase, with words
separated by '_'.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>T_P</code></em> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> of the parent type.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.4</p>
</div>
<hr>
<div class="refsect2">
<a name="G-DEFINE-TYPE-WITH-CODE:CAPS"></a><h3>G_DEFINE_TYPE_WITH_CODE()</h3>
<pre class="programlisting">#define G_DEFINE_TYPE_WITH_CODE(TN, t_n, T_P, _C_)	    _G_DEFINE_TYPE_EXTENDED_BEGIN (TN, t_n, T_P, 0) {_C_;} _G_DEFINE_TYPE_EXTENDED_END()
</pre>
<p>
A convenience macro for type implementations.  
Similar to <a class="link" href="gobject-Type-Information.html#G-DEFINE-TYPE:CAPS" title="G_DEFINE_TYPE()"><code class="function">G_DEFINE_TYPE()</code></a>, but allows you to insert custom code into the 
*_get_type() function, e.g. interface implementations via <a class="link" href="gobject-Type-Information.html#G-IMPLEMENT-INTERFACE:CAPS" title="G_IMPLEMENT_INTERFACE()"><code class="function">G_IMPLEMENT_INTERFACE()</code></a>.
See <a class="link" href="gobject-Type-Information.html#G-DEFINE-TYPE-EXTENDED:CAPS" title="G_DEFINE_TYPE_EXTENDED()"><code class="function">G_DEFINE_TYPE_EXTENDED()</code></a> for an example.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>TN</code></em> :</span></p></td>
<td>The name of the new type, in Camel case.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>t_n</code></em> :</span></p></td>
<td>The name of the new type in lowercase, with words separated by '_'.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>T_P</code></em> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> of the parent type.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>_C_</code></em> :</span></p></td>
<td>Custom code that gets inserted in the *_get_type() function.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.4</p>
</div>
<hr>
<div class="refsect2">
<a name="G-DEFINE-ABSTRACT-TYPE:CAPS"></a><h3>G_DEFINE_ABSTRACT_TYPE()</h3>
<pre class="programlisting">#define G_DEFINE_ABSTRACT_TYPE(TN, t_n, T_P)		    G_DEFINE_TYPE_EXTENDED (TN, t_n, T_P, G_TYPE_FLAG_ABSTRACT, {})
</pre>
<p>
A convenience macro for type implementations. 
Similar to <a class="link" href="gobject-Type-Information.html#G-DEFINE-TYPE:CAPS" title="G_DEFINE_TYPE()"><code class="function">G_DEFINE_TYPE()</code></a>, but defines an abstract type. 
See <a class="link" href="gobject-Type-Information.html#G-DEFINE-TYPE-EXTENDED:CAPS" title="G_DEFINE_TYPE_EXTENDED()"><code class="function">G_DEFINE_TYPE_EXTENDED()</code></a> for an example.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>TN</code></em> :</span></p></td>
<td>The name of the new type, in Camel case.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>t_n</code></em> :</span></p></td>
<td>The name of the new type, in lowercase, with words
separated by '_'.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>T_P</code></em> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> of the parent type.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.4</p>
</div>
<hr>
<div class="refsect2">
<a name="G-DEFINE-ABSTRACT-TYPE-WITH-CODE:CAPS"></a><h3>G_DEFINE_ABSTRACT_TYPE_WITH_CODE()</h3>
<pre class="programlisting">#define G_DEFINE_ABSTRACT_TYPE_WITH_CODE(TN, t_n, T_P, _C_) _G_DEFINE_TYPE_EXTENDED_BEGIN (TN, t_n, T_P, G_TYPE_FLAG_ABSTRACT) {_C_;} _G_DEFINE_TYPE_EXTENDED_END()
</pre>
<p>
A convenience macro for type implementations.
Similar to <a class="link" href="gobject-Type-Information.html#G-DEFINE-TYPE-WITH-CODE:CAPS" title="G_DEFINE_TYPE_WITH_CODE()"><code class="function">G_DEFINE_TYPE_WITH_CODE()</code></a>, but defines an abstract type and allows you to 
insert custom code into the *_get_type() function, e.g. interface implementations 
via <a class="link" href="gobject-Type-Information.html#G-IMPLEMENT-INTERFACE:CAPS" title="G_IMPLEMENT_INTERFACE()"><code class="function">G_IMPLEMENT_INTERFACE()</code></a>. See <a class="link" href="gobject-Type-Information.html#G-DEFINE-TYPE-EXTENDED:CAPS" title="G_DEFINE_TYPE_EXTENDED()"><code class="function">G_DEFINE_TYPE_EXTENDED()</code></a> for an example.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>TN</code></em> :</span></p></td>
<td>The name of the new type, in Camel case.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>t_n</code></em> :</span></p></td>
<td>The name of the new type, in lowercase, with words
separated by '_'.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>T_P</code></em> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> of the parent type.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>_C_</code></em> :</span></p></td>
<td>Custom code that gets inserted in the <em class="parameter"><code><code class="function">type_name_get_type()</code></code></em> function.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.4</p>
</div>
<hr>
<div class="refsect2">
<a name="G-DEFINE-INTERFACE:CAPS"></a><h3>G_DEFINE_INTERFACE()</h3>
<pre class="programlisting">#define G_DEFINE_INTERFACE(TN, t_n, T_P)		    G_DEFINE_INTERFACE_WITH_CODE(TN, t_n, T_P, ;)
</pre>
<p>
A convenience macro for <a class="link" href="gobject-Type-Information.html#GTypeInterface" title="struct GTypeInterface"><span class="type">GTypeInterface</span></a> definitions, which declares
a default vtable initialization function and defines a *_get_type()
function.
</p>
<p>
The macro expects the interface initialization function to have the
name <code class="literal">t_n ## _default_init</code>, and the interface
structure to have the name <code class="literal">TN ## Interface</code>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>TN</code></em> :</span></p></td>
<td>The name of the new type, in Camel case.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>t_n</code></em> :</span></p></td>
<td>The name of the new type, in lowercase, with words separated by '_'.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>T_P</code></em> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> of the prerequisite type for the interface, or 0
(<a class="link" href="gobject-Type-Information.html#G-TYPE-INVALID:CAPS" title="G_TYPE_INVALID"><code class="literal">G_TYPE_INVALID</code></a>) for no prerequisite type.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.24</p>
</div>
<hr>
<div class="refsect2">
<a name="G-DEFINE-INTERFACE-WITH-CODE:CAPS"></a><h3>G_DEFINE_INTERFACE_WITH_CODE()</h3>
<pre class="programlisting">#define G_DEFINE_INTERFACE_WITH_CODE(TN, t_n, T_P, _C_)     _G_DEFINE_INTERFACE_EXTENDED_BEGIN(TN, t_n, T_P) {_C_;} _G_DEFINE_INTERFACE_EXTENDED_END()
</pre>
<p>
A convenience macro for <a class="link" href="gobject-Type-Information.html#GTypeInterface" title="struct GTypeInterface"><span class="type">GTypeInterface</span></a> definitions. Similar to
<a class="link" href="gobject-Type-Information.html#G-DEFINE-INTERFACE:CAPS" title="G_DEFINE_INTERFACE()"><code class="function">G_DEFINE_INTERFACE()</code></a>, but allows you to insert custom code into the
*_get_type() function, e.g. additional interface implementations
via <a class="link" href="gobject-Type-Information.html#G-IMPLEMENT-INTERFACE:CAPS" title="G_IMPLEMENT_INTERFACE()"><code class="function">G_IMPLEMENT_INTERFACE()</code></a>, or additional prerequisite types. See
<a class="link" href="gobject-Type-Information.html#G-DEFINE-TYPE-EXTENDED:CAPS" title="G_DEFINE_TYPE_EXTENDED()"><code class="function">G_DEFINE_TYPE_EXTENDED()</code></a> for a similar example using
<a class="link" href="gobject-Type-Information.html#G-DEFINE-TYPE-WITH-CODE:CAPS" title="G_DEFINE_TYPE_WITH_CODE()"><code class="function">G_DEFINE_TYPE_WITH_CODE()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>TN</code></em> :</span></p></td>
<td>The name of the new type, in Camel case.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>t_n</code></em> :</span></p></td>
<td>The name of the new type, in lowercase, with words separated by '_'.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>T_P</code></em> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> of the prerequisite type for the interface, or 0
(<a class="link" href="gobject-Type-Information.html#G-TYPE-INVALID:CAPS" title="G_TYPE_INVALID"><code class="literal">G_TYPE_INVALID</code></a>) for no prerequisite type.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>_C_</code></em> :</span></p></td>
<td>Custom code that gets inserted in the *_get_type() function.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.24</p>
</div>
<hr>
<div class="refsect2">
<a name="G-IMPLEMENT-INTERFACE:CAPS"></a><h3>G_IMPLEMENT_INTERFACE()</h3>
<pre class="programlisting">#define             G_IMPLEMENT_INTERFACE(TYPE_IFACE, iface_init)</pre>
<p>
A convenience macro to ease interface addition in the <em class="parameter"><code>_C_</code></em> section
of <a class="link" href="gobject-Type-Information.html#G-DEFINE-TYPE-WITH-CODE:CAPS" title="G_DEFINE_TYPE_WITH_CODE()"><code class="function">G_DEFINE_TYPE_WITH_CODE()</code></a> or <a class="link" href="gobject-Type-Information.html#G-DEFINE-ABSTRACT-TYPE-WITH-CODE:CAPS" title="G_DEFINE_ABSTRACT_TYPE_WITH_CODE()"><code class="function">G_DEFINE_ABSTRACT_TYPE_WITH_CODE()</code></a>.
See <a class="link" href="gobject-Type-Information.html#G-DEFINE-TYPE-EXTENDED:CAPS" title="G_DEFINE_TYPE_EXTENDED()"><code class="function">G_DEFINE_TYPE_EXTENDED()</code></a> for an example.
</p>
<p>
Note that this macro can only be used together with the G_DEFINE_TYPE_*
macros, since it depends on variable names from those macros.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>TYPE_IFACE</code></em> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> of the interface to add</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>iface_init</code></em> :</span></p></td>
<td>The interface init function</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.4</p>
</div>
<hr>
<div class="refsect2">
<a name="G-DEFINE-TYPE-EXTENDED:CAPS"></a><h3>G_DEFINE_TYPE_EXTENDED()</h3>
<pre class="programlisting">#define G_DEFINE_TYPE_EXTENDED(TN, t_n, T_P, _f_, _C_)	    _G_DEFINE_TYPE_EXTENDED_BEGIN (TN, t_n, T_P, _f_) {_C_;} _G_DEFINE_TYPE_EXTENDED_END()
</pre>
<p>
The most general convenience macro for type implementations, on which
<a class="link" href="gobject-Type-Information.html#G-DEFINE-TYPE:CAPS" title="G_DEFINE_TYPE()"><code class="function">G_DEFINE_TYPE()</code></a>, etc are based.
</p>
<p>
</p>
<div class="informalexample"><pre class="programlisting">
G_DEFINE_TYPE_EXTENDED (GtkGadget,
                        gtk_gadget,
                        GTK_TYPE_WIDGET,
                        0,
                        G_IMPLEMENT_INTERFACE (TYPE_GIZMO,
                                               gtk_gadget_gizmo_init));
</pre></div>
<p>
expands to
</p>
<div class="informalexample"><pre class="programlisting">
static void     gtk_gadget_init       (GtkGadget      *self);
static void     gtk_gadget_class_init (GtkGadgetClass *klass);
static gpointer gtk_gadget_parent_class = NULL;
static void     gtk_gadget_class_intern_init (gpointer klass)
{
  gtk_gadget_parent_class = g_type_class_peek_parent (klass);
  gtk_gadget_class_init ((GtkGadgetClass*) klass);
}

GType
gtk_gadget_get_type (void)
{
  static volatile gsize g_define_type_id__volatile = 0;
  if (g_once_init_enter (&amp;g_define_type_id__volatile))
    {
      GType g_define_type_id =
        g_type_register_static_simple (GTK_TYPE_WIDGET,
                                       g_intern_static_string ("GtkGadget"),
                                       sizeof (GtkGadgetClass),
                                       (GClassInitFunc) gtk_gadget_class_intern_init,
                                       sizeof (GtkGadget),
                                       (GInstanceInitFunc) gtk_gadget_init,
                                       (GTypeFlags) flags);
      {
        const GInterfaceInfo g_implement_interface_info = {
          (GInterfaceInitFunc) gtk_gadget_gizmo_init
        };
        g_type_add_interface_static (g_define_type_id, TYPE_GIZMO, &amp;g_implement_interface_info);
      }
      g_once_init_leave (&amp;g_define_type_id__volatile, g_define_type_id);
    }
  return g_define_type_id__volatile;
}
</pre></div>
<p>
The only pieces which have to be manually provided are the definitions of
the instance and class structure and the definitions of the instance and
class init functions.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>TN</code></em> :</span></p></td>
<td>The name of the new type, in Camel case.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>t_n</code></em> :</span></p></td>
<td>The name of the new type, in lowercase, with words
separated by '_'.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>T_P</code></em> :</span></p></td>
<td>The <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> of the parent type.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>_f_</code></em> :</span></p></td>
<td>
<a class="link" href="gobject-Type-Information.html#GTypeFlags" title="enum GTypeFlags"><span class="type">GTypeFlags</span></a> to pass to <a class="link" href="gobject-Type-Information.html#g-type-register-static" title="g_type_register_static ()"><code class="function">g_type_register_static()</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>_C_</code></em> :</span></p></td>
<td>Custom code that gets inserted in the *_get_type() function.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.4</p>
</div>
<hr>
<div class="refsect2">
<a name="G-DEFINE-BOXED-TYPE:CAPS"></a><h3>G_DEFINE_BOXED_TYPE()</h3>
<pre class="programlisting">#define G_DEFINE_BOXED_TYPE(TypeName, type_name, copy_func, free_func) G_DEFINE_BOXED_TYPE_WITH_CODE (TypeName, type_name, copy_func, free_func, {})
</pre>
<p>
A convenience macro for boxed type implementations, which defines a
<code class="function">type_name_get_type()</code> function registering the boxed type.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>TypeName</code></em> :</span></p></td>
<td>The name of the new type, in Camel case.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>type_name</code></em> :</span></p></td>
<td>The name of the new type, in lowercase, with words
separated by '_'.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>copy_func</code></em> :</span></p></td>
<td>the <a class="link" href="gobject-Boxed-Types.html#GBoxedCopyFunc" title="GBoxedCopyFunc ()"><span class="type">GBoxedCopyFunc</span></a> for the new type</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>free_func</code></em> :</span></p></td>
<td>the <a class="link" href="gobject-Boxed-Types.html#GBoxedFreeFunc" title="GBoxedFreeFunc ()"><span class="type">GBoxedFreeFunc</span></a> for the new type</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.26</p>
</div>
<hr>
<div class="refsect2">
<a name="G-DEFINE-BOXED-TYPE-WITH-CODE:CAPS"></a><h3>G_DEFINE_BOXED_TYPE_WITH_CODE()</h3>
<pre class="programlisting">#define G_DEFINE_BOXED_TYPE_WITH_CODE(TypeName, type_name, copy_func, free_func, _C_) _G_DEFINE_BOXED_TYPE_BEGIN (TypeName, type_name, copy_func, free_func) {_C_;} _G_DEFINE_TYPE_EXTENDED_END()
</pre>
<p>
A convenience macro for boxed type implementations.
Similar to <a class="link" href="gobject-Type-Information.html#G-DEFINE-BOXED-TYPE:CAPS" title="G_DEFINE_BOXED_TYPE()"><code class="function">G_DEFINE_BOXED_TYPE()</code></a>, but allows to insert custom code into the
<code class="function">type_name_get_type()</code> function, e.g. to register value transformations with
<a class="link" href="gobject-Generic-values.html#g-value-register-transform-func" title="g_value_register_transform_func ()"><code class="function">g_value_register_transform_func()</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>TypeName</code></em> :</span></p></td>
<td>The name of the new type, in Camel case.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>type_name</code></em> :</span></p></td>
<td>The name of the new type, in lowercase, with words
separated by '_'.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>copy_func</code></em> :</span></p></td>
<td>the <a class="link" href="gobject-Boxed-Types.html#GBoxedCopyFunc" title="GBoxedCopyFunc ()"><span class="type">GBoxedCopyFunc</span></a> for the new type</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>free_func</code></em> :</span></p></td>
<td>the <a class="link" href="gobject-Boxed-Types.html#GBoxedFreeFunc" title="GBoxedFreeFunc ()"><span class="type">GBoxedFreeFunc</span></a> for the new type</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>_C_</code></em> :</span></p></td>
<td>Custom code that gets inserted in the *_get_type() function.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.26</p>
</div>
<hr>
<div class="refsect2">
<a name="G-DEFINE-POINTER-TYPE:CAPS"></a><h3>G_DEFINE_POINTER_TYPE()</h3>
<pre class="programlisting">#define G_DEFINE_POINTER_TYPE(TypeName, type_name) G_DEFINE_POINTER_TYPE_WITH_CODE (TypeName, type_name, {})
</pre>
<p>
A convenience macro for pointer type implementations, which defines a
<code class="function">type_name_get_type()</code> function registering the pointer type.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>TypeName</code></em> :</span></p></td>
<td>The name of the new type, in Camel case.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>type_name</code></em> :</span></p></td>
<td>The name of the new type, in lowercase, with words
separated by '_'.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.26</p>
</div>
<hr>
<div class="refsect2">
<a name="G-DEFINE-POINTER-TYPE-WITH-CODE:CAPS"></a><h3>G_DEFINE_POINTER_TYPE_WITH_CODE()</h3>
<pre class="programlisting">#define G_DEFINE_POINTER_TYPE_WITH_CODE(TypeName, type_name, _C_) _G_DEFINE_POINTER_TYPE_BEGIN (TypeName, type_name) {_C_;} _G_DEFINE_TYPE_EXTENDED_END()
</pre>
<p>
A convenience macro for pointer type implementations.
Similar to <a class="link" href="gobject-Type-Information.html#G-DEFINE-POINTER-TYPE:CAPS" title="G_DEFINE_POINTER_TYPE()"><code class="function">G_DEFINE_POINTER_TYPE()</code></a>, but allows to insert custom code into the
<code class="function">type_name_get_type()</code> function.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>TypeName</code></em> :</span></p></td>
<td>The name of the new type, in Camel case.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>type_name</code></em> :</span></p></td>
<td>The name of the new type, in lowercase, with words
separated by '_'.</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>_C_</code></em> :</span></p></td>
<td>Custom code that gets inserted in the *_get_type() function.</td>
</tr>
</tbody>
</table></div>
<p class="since">Since 2.26</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-INVALID:CAPS"></a><h3>G_TYPE_INVALID</h3>
<pre class="programlisting">#define G_TYPE_INVALID			G_TYPE_MAKE_FUNDAMENTAL (0)
</pre>
<p>
An invalid <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> used as error return value in some functions which return
a <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a>.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-NONE:CAPS"></a><h3>G_TYPE_NONE</h3>
<pre class="programlisting">#define G_TYPE_NONE			G_TYPE_MAKE_FUNDAMENTAL (1)
</pre>
<p>
A fundamental type which is used as a replacement for the C
<code class="literal">void</code> return type.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-INTERFACE:CAPS"></a><h3>G_TYPE_INTERFACE</h3>
<pre class="programlisting">#define G_TYPE_INTERFACE		G_TYPE_MAKE_FUNDAMENTAL (2)
</pre>
<p>
The fundamental type from which all interfaces are derived.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-CHAR:CAPS"></a><h3>G_TYPE_CHAR</h3>
<pre class="programlisting">#define G_TYPE_CHAR			G_TYPE_MAKE_FUNDAMENTAL (3)
</pre>
<p>
The fundamental type corresponding to <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a>.
The type designated by G_TYPE_CHAR is unconditionally an 8-bit signed integer.
This may or may not be the same type a the C type "gchar".
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-UCHAR:CAPS"></a><h3>G_TYPE_UCHAR</h3>
<pre class="programlisting">#define G_TYPE_UCHAR			G_TYPE_MAKE_FUNDAMENTAL (4)
</pre>
<p>
The fundamental type corresponding to <a href="../glib/glib-Basic-Types.html#guchar"><span class="type">guchar</span></a>.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-BOOLEAN:CAPS"></a><h3>G_TYPE_BOOLEAN</h3>
<pre class="programlisting">#define G_TYPE_BOOLEAN			G_TYPE_MAKE_FUNDAMENTAL (5)
</pre>
<p>
The fundamental type corresponding to <a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a>.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-INT:CAPS"></a><h3>G_TYPE_INT</h3>
<pre class="programlisting">#define G_TYPE_INT			G_TYPE_MAKE_FUNDAMENTAL (6)
</pre>
<p>
The fundamental type corresponding to <a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a>.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-UINT:CAPS"></a><h3>G_TYPE_UINT</h3>
<pre class="programlisting">#define G_TYPE_UINT			G_TYPE_MAKE_FUNDAMENTAL (7)
</pre>
<p>
The fundamental type corresponding to <a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a>.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-LONG:CAPS"></a><h3>G_TYPE_LONG</h3>
<pre class="programlisting">#define G_TYPE_LONG			G_TYPE_MAKE_FUNDAMENTAL (8)
</pre>
<p>
The fundamental type corresponding to <a href="../glib/glib-Basic-Types.html#glong"><span class="type">glong</span></a>.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-ULONG:CAPS"></a><h3>G_TYPE_ULONG</h3>
<pre class="programlisting">#define G_TYPE_ULONG			G_TYPE_MAKE_FUNDAMENTAL (9)
</pre>
<p>
The fundamental type corresponding to <a href="../glib/glib-Basic-Types.html#gulong"><span class="type">gulong</span></a>.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-INT64:CAPS"></a><h3>G_TYPE_INT64</h3>
<pre class="programlisting">#define G_TYPE_INT64			G_TYPE_MAKE_FUNDAMENTAL (10)
</pre>
<p>
The fundamental type corresponding to <a href="../glib/glib-Basic-Types.html#gint64"><span class="type">gint64</span></a>.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-UINT64:CAPS"></a><h3>G_TYPE_UINT64</h3>
<pre class="programlisting">#define G_TYPE_UINT64			G_TYPE_MAKE_FUNDAMENTAL (11)
</pre>
<p>
The fundamental type corresponding to <a href="../glib/glib-Basic-Types.html#guint64"><span class="type">guint64</span></a>.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-ENUM:CAPS"></a><h3>G_TYPE_ENUM</h3>
<pre class="programlisting">#define G_TYPE_ENUM			G_TYPE_MAKE_FUNDAMENTAL (12)
</pre>
<p>
The fundamental type from which all enumeration types are derived.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-FLAGS:CAPS"></a><h3>G_TYPE_FLAGS</h3>
<pre class="programlisting">#define G_TYPE_FLAGS			G_TYPE_MAKE_FUNDAMENTAL (13)
</pre>
<p>
The fundamental type from which all flags types are derived.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-FLOAT:CAPS"></a><h3>G_TYPE_FLOAT</h3>
<pre class="programlisting">#define G_TYPE_FLOAT			G_TYPE_MAKE_FUNDAMENTAL (14)
</pre>
<p>
The fundamental type corresponding to <a href="../glib/glib-Basic-Types.html#gfloat"><span class="type">gfloat</span></a>.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-DOUBLE:CAPS"></a><h3>G_TYPE_DOUBLE</h3>
<pre class="programlisting">#define G_TYPE_DOUBLE			G_TYPE_MAKE_FUNDAMENTAL (15)
</pre>
<p>
The fundamental type corresponding to <a href="../glib/glib-Basic-Types.html#gdouble"><span class="type">gdouble</span></a>.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-STRING:CAPS"></a><h3>G_TYPE_STRING</h3>
<pre class="programlisting">#define G_TYPE_STRING			G_TYPE_MAKE_FUNDAMENTAL (16)
</pre>
<p>
The fundamental type corresponding to nul-terminated C strings.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-POINTER:CAPS"></a><h3>G_TYPE_POINTER</h3>
<pre class="programlisting">#define G_TYPE_POINTER			G_TYPE_MAKE_FUNDAMENTAL (17)
</pre>
<p>
The fundamental type corresponding to <a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a>.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-BOXED:CAPS"></a><h3>G_TYPE_BOXED</h3>
<pre class="programlisting">#define G_TYPE_BOXED			G_TYPE_MAKE_FUNDAMENTAL (18)
</pre>
<p>
The fundamental type from which all boxed types are derived.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-PARAM:CAPS"></a><h3>G_TYPE_PARAM</h3>
<pre class="programlisting">#define G_TYPE_PARAM			G_TYPE_MAKE_FUNDAMENTAL (19)
</pre>
<p>
The fundamental type from which all <a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="type">GParamSpec</span></a> types are derived.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-OBJECT:CAPS"></a><h3>G_TYPE_OBJECT</h3>
<pre class="programlisting">#define G_TYPE_OBJECT			G_TYPE_MAKE_FUNDAMENTAL (20)
</pre>
<p>
The fundamental type for <a class="link" href="gobject-The-Base-Object-Type.html#GObject"><span class="type">GObject</span></a>.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-GTYPE:CAPS"></a><h3>G_TYPE_GTYPE</h3>
<pre class="programlisting">#define G_TYPE_GTYPE			 (g_gtype_get_type())
</pre>
<p>
The type for <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a>.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-VARIANT:CAPS"></a><h3>G_TYPE_VARIANT</h3>
<pre class="programlisting">#define G_TYPE_VARIANT                  G_TYPE_MAKE_FUNDAMENTAL (21)
</pre>
<p>
The fundamental type corresponding to <a href="../glib/glib-GVariant.html#GVariant"><span class="type">GVariant</span></a>.
</p>
<p>
All floating <a href="../glib/glib-GVariant.html#GVariant"><span class="type">GVariant</span></a> instances passed through the <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> system are
consumed.
</p>
<p>
Note that callbacks in closures, and signal handlers
for signals of return type <a class="link" href="gobject-Type-Information.html#G-TYPE-VARIANT:CAPS" title="G_TYPE_VARIANT"><code class="literal">G_TYPE_VARIANT</code></a>, must never return floating
variants.
</p>
<p>
Note: GLib 2.24 did include a boxed type with this name. It was replaced
with this fundamental type in 2.26.
</p>
<p class="since">Since 2.26</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-RESERVED-GLIB-FIRST:CAPS"></a><h3>G_TYPE_RESERVED_GLIB_FIRST</h3>
<pre class="programlisting">#define G_TYPE_RESERVED_GLIB_FIRST (22)
</pre>
<p>
First fundamental type number to create a new fundamental type id with
<a class="link" href="gobject-Type-Information.html#G-TYPE-MAKE-FUNDAMENTAL:CAPS" title="G_TYPE_MAKE_FUNDAMENTAL()"><code class="function">G_TYPE_MAKE_FUNDAMENTAL()</code></a> reserved for GLib.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-RESERVED-GLIB-LAST:CAPS"></a><h3>G_TYPE_RESERVED_GLIB_LAST</h3>
<pre class="programlisting">#define G_TYPE_RESERVED_GLIB_LAST (31)
</pre>
<p>
Last fundamental type number reserved for GLib.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-RESERVED-BSE-FIRST:CAPS"></a><h3>G_TYPE_RESERVED_BSE_FIRST</h3>
<pre class="programlisting">#define G_TYPE_RESERVED_BSE_FIRST (32)
</pre>
<p>
First fundamental type number to create a new fundamental type id with
<a class="link" href="gobject-Type-Information.html#G-TYPE-MAKE-FUNDAMENTAL:CAPS" title="G_TYPE_MAKE_FUNDAMENTAL()"><code class="function">G_TYPE_MAKE_FUNDAMENTAL()</code></a> reserved for BSE.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-RESERVED-BSE-LAST:CAPS"></a><h3>G_TYPE_RESERVED_BSE_LAST</h3>
<pre class="programlisting">#define G_TYPE_RESERVED_BSE_LAST (48)
</pre>
<p>
Last fundamental type number reserved for BSE.
</p>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-RESERVED-USER-FIRST:CAPS"></a><h3>G_TYPE_RESERVED_USER_FIRST</h3>
<pre class="programlisting">#define G_TYPE_RESERVED_USER_FIRST (49)
</pre>
<p>
First available fundamental type number to create new fundamental 
type id with <a class="link" href="gobject-Type-Information.html#G-TYPE-MAKE-FUNDAMENTAL:CAPS" title="G_TYPE_MAKE_FUNDAMENTAL()"><code class="function">G_TYPE_MAKE_FUNDAMENTAL()</code></a>.
</p>
</div>
</div>
</div>
<div class="footer">
<hr>
          Generated by GTK-Doc V1.18</div>
</body>
</html>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Parameters and Values</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.76.1">
<link rel="home" href="index.html" title="GObject Reference Manual">
<link rel="up" href="rn01.html" title="API Reference">
<link rel="prev" href="gobject-Generic-values.html" title="Generic values">
<link rel="next" href="gobject-GParamSpec.html" title="GParamSpec">
<meta name="generator" content="GTK-Doc V1.18 (XML mode)">
<link rel="stylesheet" href="style.css" type="text/css">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF">
<table class="navigation" id="top" width="100%" summary="Navigation header" cellpadding="2" cellspacing="2">
<tr valign="middle">
<td><a accesskey="p" href="gobject-Generic-values.html"><img src="left.png" width="24" height="24" border="0" alt="Prev"></a></td>
<td><a accesskey="u" href="rn01.html"><img src="up.png" width="24" height="24" border="0" alt="Up"></a></td>
<td><a accesskey="h" href="index.html"><img src="home.png" width="24" height="24" border="0" alt="Home"></a></td>
<th width="100%" align="center">GObject Reference Manual</th>
<td><a accesskey="n" href="gobject-GParamSpec.html"><img src="right.png" width="24" height="24" border="0" alt="Next"></a></td>
</tr>
<tr><td colspan="5" class="shortcuts">
<a href="#gobject-Standard-Parameter-and-Value-Types.synopsis" class="shortcut">Top</a>
                   | 
                  <a href="#gobject-Standard-Parameter-and-Value-Types.description" class="shortcut">Description</a>
</td></tr>
</table>
<div class="refentry">
<a name="gobject-Standard-Parameter-and-Value-Types"></a><div class="titlepage"></div>
<div class="refnamediv"><table width="100%"><tr>
<td valign="top">
<h2><span class="refentrytitle"><a name="gobject-Standard-Parameter-and-Value-Types.top_of_page"></a>Parameters and Values</span></h2>
<p>Parameters and Values — Standard Parameter and Value Types</p>
</td>
<td valign="top" align="right"></td>
</tr></table></div>
<div class="refsynopsisdiv">
<a name="gobject-Standard-Parameter-and-Value-Types.synopsis"></a><h2>Synopsis</h2>
<pre class="synopsis">
#include &lt;glib-object.h&gt;

#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-BOOLEAN:CAPS" title="G_IS_PARAM_SPEC_BOOLEAN()">G_IS_PARAM_SPEC_BOOLEAN</a>             (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-BOOLEAN:CAPS" title="G_PARAM_SPEC_BOOLEAN()">G_PARAM_SPEC_BOOLEAN</a>                (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-BOOLEAN:CAPS" title="G_VALUE_HOLDS_BOOLEAN()">G_VALUE_HOLDS_BOOLEAN</a>               (value)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-BOOLEAN:CAPS" title="G_TYPE_PARAM_BOOLEAN">G_TYPE_PARAM_BOOLEAN</a>
struct              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecBoolean" title="struct GParamSpecBoolean">GParamSpecBoolean</a>;
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-boolean" title="g_param_spec_boolean ()">g_param_spec_boolean</a>                (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *nick</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *blurb</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> default_value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags"><span class="type">GParamFlags</span></a> flags</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-boolean" title="g_value_set_boolean ()">g_value_set_boolean</a>                 (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> v_boolean</code></em>);
<a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-boolean" title="g_value_get_boolean ()">g_value_get_boolean</a>                 (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);

#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-CHAR:CAPS" title="G_IS_PARAM_SPEC_CHAR()">G_IS_PARAM_SPEC_CHAR</a>                (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-CHAR:CAPS" title="G_PARAM_SPEC_CHAR()">G_PARAM_SPEC_CHAR</a>                   (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-CHAR:CAPS" title="G_VALUE_HOLDS_CHAR()">G_VALUE_HOLDS_CHAR</a>                  (value)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-CHAR:CAPS" title="G_TYPE_PARAM_CHAR">G_TYPE_PARAM_CHAR</a>
struct              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecChar" title="struct GParamSpecChar">GParamSpecChar</a>;
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-char" title="g_param_spec_char ()">g_param_spec_char</a>                   (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *nick</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *blurb</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint8"><span class="type">gint8</span></a> minimum</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint8"><span class="type">gint8</span></a> maximum</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint8"><span class="type">gint8</span></a> default_value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags"><span class="type">GParamFlags</span></a> flags</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-char" title="g_value_set_char ()">g_value_set_char</a>                    (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> v_char</code></em>);
<a href="../glib/glib-Basic-Types.html#gchar"><span class="returnvalue">gchar</span></a>               <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-char" title="g_value_get_char ()">g_value_get_char</a>                    (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);
<a href="../glib/glib-Basic-Types.html#gint8"><span class="returnvalue">gint8</span></a>               <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-schar" title="g_value_get_schar ()">g_value_get_schar</a>                   (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-schar" title="g_value_set_schar ()">g_value_set_schar</a>                   (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint8"><span class="type">gint8</span></a> v_char</code></em>);

#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-UCHAR:CAPS" title="G_IS_PARAM_SPEC_UCHAR()">G_IS_PARAM_SPEC_UCHAR</a>               (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-UCHAR:CAPS" title="G_PARAM_SPEC_UCHAR()">G_PARAM_SPEC_UCHAR</a>                  (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-UCHAR:CAPS" title="G_VALUE_HOLDS_UCHAR()">G_VALUE_HOLDS_UCHAR</a>                 (value)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-UCHAR:CAPS" title="G_TYPE_PARAM_UCHAR">G_TYPE_PARAM_UCHAR</a>
struct              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecUChar" title="struct GParamSpecUChar">GParamSpecUChar</a>;
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-uchar" title="g_param_spec_uchar ()">g_param_spec_uchar</a>                  (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *nick</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *blurb</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint8"><span class="type">guint8</span></a> minimum</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint8"><span class="type">guint8</span></a> maximum</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint8"><span class="type">guint8</span></a> default_value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags"><span class="type">GParamFlags</span></a> flags</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-uchar" title="g_value_set_uchar ()">g_value_set_uchar</a>                   (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guchar"><span class="type">guchar</span></a> v_uchar</code></em>);
<a href="../glib/glib-Basic-Types.html#guchar"><span class="returnvalue">guchar</span></a>              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-uchar" title="g_value_get_uchar ()">g_value_get_uchar</a>                   (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);

#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-INT:CAPS" title="G_IS_PARAM_SPEC_INT()">G_IS_PARAM_SPEC_INT</a>                 (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-INT:CAPS" title="G_PARAM_SPEC_INT()">G_PARAM_SPEC_INT</a>                    (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-INT:CAPS" title="G_VALUE_HOLDS_INT()">G_VALUE_HOLDS_INT</a>                   (value)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-INT:CAPS" title="G_TYPE_PARAM_INT">G_TYPE_PARAM_INT</a>
struct              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecInt" title="struct GParamSpecInt">GParamSpecInt</a>;
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-int" title="g_param_spec_int ()">g_param_spec_int</a>                    (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *nick</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *blurb</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a> minimum</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a> maximum</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a> default_value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags"><span class="type">GParamFlags</span></a> flags</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-int" title="g_value_set_int ()">g_value_set_int</a>                     (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a> v_int</code></em>);
<a href="../glib/glib-Basic-Types.html#gint"><span class="returnvalue">gint</span></a>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-int" title="g_value_get_int ()">g_value_get_int</a>                     (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);

#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-UINT:CAPS" title="G_IS_PARAM_SPEC_UINT()">G_IS_PARAM_SPEC_UINT</a>                (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-UINT:CAPS" title="G_PARAM_SPEC_UINT()">G_PARAM_SPEC_UINT</a>                   (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-UINT:CAPS" title="G_VALUE_HOLDS_UINT()">G_VALUE_HOLDS_UINT</a>                  (value)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-UINT:CAPS" title="G_TYPE_PARAM_UINT">G_TYPE_PARAM_UINT</a>
struct              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecUInt" title="struct GParamSpecUInt">GParamSpecUInt</a>;
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-uint" title="g_param_spec_uint ()">g_param_spec_uint</a>                   (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *nick</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *blurb</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> minimum</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> maximum</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> default_value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags"><span class="type">GParamFlags</span></a> flags</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-uint" title="g_value_set_uint ()">g_value_set_uint</a>                    (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> v_uint</code></em>);
<a href="../glib/glib-Basic-Types.html#guint"><span class="returnvalue">guint</span></a>               <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-uint" title="g_value_get_uint ()">g_value_get_uint</a>                    (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);

#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-LONG:CAPS" title="G_IS_PARAM_SPEC_LONG()">G_IS_PARAM_SPEC_LONG</a>                (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-LONG:CAPS" title="G_PARAM_SPEC_LONG()">G_PARAM_SPEC_LONG</a>                   (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-LONG:CAPS" title="G_VALUE_HOLDS_LONG()">G_VALUE_HOLDS_LONG</a>                  (value)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-LONG:CAPS" title="G_TYPE_PARAM_LONG">G_TYPE_PARAM_LONG</a>
struct              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecLong" title="struct GParamSpecLong">GParamSpecLong</a>;
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-long" title="g_param_spec_long ()">g_param_spec_long</a>                   (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *nick</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *blurb</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#glong"><span class="type">glong</span></a> minimum</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#glong"><span class="type">glong</span></a> maximum</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#glong"><span class="type">glong</span></a> default_value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags"><span class="type">GParamFlags</span></a> flags</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-long" title="g_value_set_long ()">g_value_set_long</a>                    (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#glong"><span class="type">glong</span></a> v_long</code></em>);
<a href="../glib/glib-Basic-Types.html#glong"><span class="returnvalue">glong</span></a>               <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-long" title="g_value_get_long ()">g_value_get_long</a>                    (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);

#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-ULONG:CAPS" title="G_IS_PARAM_SPEC_ULONG()">G_IS_PARAM_SPEC_ULONG</a>               (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-ULONG:CAPS" title="G_PARAM_SPEC_ULONG()">G_PARAM_SPEC_ULONG</a>                  (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-ULONG:CAPS" title="G_VALUE_HOLDS_ULONG()">G_VALUE_HOLDS_ULONG</a>                 (value)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-ULONG:CAPS" title="G_TYPE_PARAM_ULONG">G_TYPE_PARAM_ULONG</a>
struct              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecULong" title="struct GParamSpecULong">GParamSpecULong</a>;
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-ulong" title="g_param_spec_ulong ()">g_param_spec_ulong</a>                  (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *nick</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *blurb</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gulong"><span class="type">gulong</span></a> minimum</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gulong"><span class="type">gulong</span></a> maximum</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gulong"><span class="type">gulong</span></a> default_value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags"><span class="type">GParamFlags</span></a> flags</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-ulong" title="g_value_set_ulong ()">g_value_set_ulong</a>                   (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gulong"><span class="type">gulong</span></a> v_ulong</code></em>);
<a href="../glib/glib-Basic-Types.html#gulong"><span class="returnvalue">gulong</span></a>              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-ulong" title="g_value_get_ulong ()">g_value_get_ulong</a>                   (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);

#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-INT64:CAPS" title="G_IS_PARAM_SPEC_INT64()">G_IS_PARAM_SPEC_INT64</a>               (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-INT64:CAPS" title="G_PARAM_SPEC_INT64()">G_PARAM_SPEC_INT64</a>                  (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-INT64:CAPS" title="G_VALUE_HOLDS_INT64()">G_VALUE_HOLDS_INT64</a>                 (value)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-INT64:CAPS" title="G_TYPE_PARAM_INT64">G_TYPE_PARAM_INT64</a>
struct              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecInt64" title="struct GParamSpecInt64">GParamSpecInt64</a>;
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-int64" title="g_param_spec_int64 ()">g_param_spec_int64</a>                  (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *nick</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *blurb</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint64"><span class="type">gint64</span></a> minimum</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint64"><span class="type">gint64</span></a> maximum</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint64"><span class="type">gint64</span></a> default_value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags"><span class="type">GParamFlags</span></a> flags</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-int64" title="g_value_set_int64 ()">g_value_set_int64</a>                   (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint64"><span class="type">gint64</span></a> v_int64</code></em>);
<a href="../glib/glib-Basic-Types.html#gint64"><span class="returnvalue">gint64</span></a>              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-int64" title="g_value_get_int64 ()">g_value_get_int64</a>                   (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);

#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-UINT64:CAPS" title="G_IS_PARAM_SPEC_UINT64()">G_IS_PARAM_SPEC_UINT64</a>              (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-UINT64:CAPS" title="G_PARAM_SPEC_UINT64()">G_PARAM_SPEC_UINT64</a>                 (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-UINT64:CAPS" title="G_VALUE_HOLDS_UINT64()">G_VALUE_HOLDS_UINT64</a>                (value)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-UINT64:CAPS" title="G_TYPE_PARAM_UINT64">G_TYPE_PARAM_UINT64</a>
struct              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecUInt64" title="struct GParamSpecUInt64">GParamSpecUInt64</a>;
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-uint64" title="g_param_spec_uint64 ()">g_param_spec_uint64</a>                 (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *nick</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *blurb</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint64"><span class="type">guint64</span></a> minimum</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint64"><span class="type">guint64</span></a> maximum</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint64"><span class="type">guint64</span></a> default_value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags"><span class="type">GParamFlags</span></a> flags</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-uint64" title="g_value_set_uint64 ()">g_value_set_uint64</a>                  (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint64"><span class="type">guint64</span></a> v_uint64</code></em>);
<a href="../glib/glib-Basic-Types.html#guint64"><span class="returnvalue">guint64</span></a>             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-uint64" title="g_value_get_uint64 ()">g_value_get_uint64</a>                  (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);

#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-FLOAT:CAPS" title="G_IS_PARAM_SPEC_FLOAT()">G_IS_PARAM_SPEC_FLOAT</a>               (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-FLOAT:CAPS" title="G_PARAM_SPEC_FLOAT()">G_PARAM_SPEC_FLOAT</a>                  (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-FLOAT:CAPS" title="G_VALUE_HOLDS_FLOAT()">G_VALUE_HOLDS_FLOAT</a>                 (value)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-FLOAT:CAPS" title="G_TYPE_PARAM_FLOAT">G_TYPE_PARAM_FLOAT</a>
struct              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecFloat" title="struct GParamSpecFloat">GParamSpecFloat</a>;
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-float" title="g_param_spec_float ()">g_param_spec_float</a>                  (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *nick</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *blurb</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gfloat"><span class="type">gfloat</span></a> minimum</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gfloat"><span class="type">gfloat</span></a> maximum</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gfloat"><span class="type">gfloat</span></a> default_value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags"><span class="type">GParamFlags</span></a> flags</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-float" title="g_value_set_float ()">g_value_set_float</a>                   (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gfloat"><span class="type">gfloat</span></a> v_float</code></em>);
<a href="../glib/glib-Basic-Types.html#gfloat"><span class="returnvalue">gfloat</span></a>              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-float" title="g_value_get_float ()">g_value_get_float</a>                   (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);

#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-DOUBLE:CAPS" title="G_IS_PARAM_SPEC_DOUBLE()">G_IS_PARAM_SPEC_DOUBLE</a>              (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-DOUBLE:CAPS" title="G_PARAM_SPEC_DOUBLE()">G_PARAM_SPEC_DOUBLE</a>                 (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-DOUBLE:CAPS" title="G_VALUE_HOLDS_DOUBLE()">G_VALUE_HOLDS_DOUBLE</a>                (value)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-DOUBLE:CAPS" title="G_TYPE_PARAM_DOUBLE">G_TYPE_PARAM_DOUBLE</a>
struct              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecDouble" title="struct GParamSpecDouble">GParamSpecDouble</a>;
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-double" title="g_param_spec_double ()">g_param_spec_double</a>                 (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *nick</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *blurb</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gdouble"><span class="type">gdouble</span></a> minimum</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gdouble"><span class="type">gdouble</span></a> maximum</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gdouble"><span class="type">gdouble</span></a> default_value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags"><span class="type">GParamFlags</span></a> flags</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-double" title="g_value_set_double ()">g_value_set_double</a>                  (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gdouble"><span class="type">gdouble</span></a> v_double</code></em>);
<a href="../glib/glib-Basic-Types.html#gdouble"><span class="returnvalue">gdouble</span></a>             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-double" title="g_value_get_double ()">g_value_get_double</a>                  (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);

#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-ENUM:CAPS" title="G_IS_PARAM_SPEC_ENUM()">G_IS_PARAM_SPEC_ENUM</a>                (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-ENUM:CAPS" title="G_PARAM_SPEC_ENUM()">G_PARAM_SPEC_ENUM</a>                   (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-ENUM:CAPS" title="G_VALUE_HOLDS_ENUM()">G_VALUE_HOLDS_ENUM</a>                  (value)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-ENUM:CAPS" title="G_TYPE_PARAM_ENUM">G_TYPE_PARAM_ENUM</a>
struct              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecEnum" title="struct GParamSpecEnum">GParamSpecEnum</a>;
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-enum" title="g_param_spec_enum ()">g_param_spec_enum</a>                   (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *nick</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *blurb</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> enum_type</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a> default_value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags"><span class="type">GParamFlags</span></a> flags</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-enum" title="g_value_set_enum ()">g_value_set_enum</a>                    (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gint"><span class="type">gint</span></a> v_enum</code></em>);
<a href="../glib/glib-Basic-Types.html#gint"><span class="returnvalue">gint</span></a>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-enum" title="g_value_get_enum ()">g_value_get_enum</a>                    (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);

#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-FLAGS:CAPS" title="G_IS_PARAM_SPEC_FLAGS()">G_IS_PARAM_SPEC_FLAGS</a>               (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-FLAGS:CAPS" title="G_PARAM_SPEC_FLAGS()">G_PARAM_SPEC_FLAGS</a>                  (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-FLAGS:CAPS" title="G_VALUE_HOLDS_FLAGS()">G_VALUE_HOLDS_FLAGS</a>                 (value)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-FLAGS:CAPS" title="G_TYPE_PARAM_FLAGS">G_TYPE_PARAM_FLAGS</a>
struct              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecFlags" title="struct GParamSpecFlags">GParamSpecFlags</a>;
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-flags" title="g_param_spec_flags ()">g_param_spec_flags</a>                  (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *nick</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *blurb</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> flags_type</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> default_value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags"><span class="type">GParamFlags</span></a> flags</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-flags" title="g_value_set_flags ()">g_value_set_flags</a>                   (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#guint"><span class="type">guint</span></a> v_flags</code></em>);
<a href="../glib/glib-Basic-Types.html#guint"><span class="returnvalue">guint</span></a>               <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-flags" title="g_value_get_flags ()">g_value_get_flags</a>                   (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);

#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-STRING:CAPS" title="G_IS_PARAM_SPEC_STRING()">G_IS_PARAM_SPEC_STRING</a>              (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-STRING:CAPS" title="G_PARAM_SPEC_STRING()">G_PARAM_SPEC_STRING</a>                 (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-STRING:CAPS" title="G_VALUE_HOLDS_STRING()">G_VALUE_HOLDS_STRING</a>                (value)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-STRING:CAPS" title="G_TYPE_PARAM_STRING">G_TYPE_PARAM_STRING</a>
struct              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecString" title="struct GParamSpecString">GParamSpecString</a>;
typedef             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#gchararray" title="gchararray">gchararray</a>;
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-string" title="g_param_spec_string ()">g_param_spec_string</a>                 (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *nick</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *blurb</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *default_value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags"><span class="type">GParamFlags</span></a> flags</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-string" title="g_value_set_string ()">g_value_set_string</a>                  (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *v_string</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-static-string" title="g_value_set_static_string ()">g_value_set_static_string</a>           (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *v_string</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-take-string" title="g_value_take_string ()">g_value_take_string</a>                 (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *v_string</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-string-take-ownership" title="g_value_set_string_take_ownership ()">g_value_set_string_take_ownership</a>   (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *v_string</code></em>);
const <a href="../glib/glib-Basic-Types.html#gchar"><span class="returnvalue">gchar</span></a> *       <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-string" title="g_value_get_string ()">g_value_get_string</a>                  (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);
<a href="../glib/glib-Basic-Types.html#gchar"><span class="returnvalue">gchar</span></a> *             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-dup-string" title="g_value_dup_string ()">g_value_dup_string</a>                  (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);

#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-PARAM:CAPS" title="G_IS_PARAM_SPEC_PARAM()">G_IS_PARAM_SPEC_PARAM</a>               (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-PARAM:CAPS" title="G_PARAM_SPEC_PARAM()">G_PARAM_SPEC_PARAM</a>                  (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-PARAM:CAPS" title="G_VALUE_HOLDS_PARAM()">G_VALUE_HOLDS_PARAM</a>                 (value)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-PARAM:CAPS" title="G_TYPE_PARAM_PARAM">G_TYPE_PARAM_PARAM</a>
struct              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecParam" title="struct GParamSpecParam">GParamSpecParam</a>;
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-param" title="g_param_spec_param ()">g_param_spec_param</a>                  (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *nick</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *blurb</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> param_type</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags"><span class="type">GParamFlags</span></a> flags</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-param" title="g_value_set_param ()">g_value_set_param</a>                   (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="type">GParamSpec</span></a> *param</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-take-param" title="g_value_take_param ()">g_value_take_param</a>                  (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="type">GParamSpec</span></a> *param</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-param-take-ownership" title="g_value_set_param_take_ownership ()">g_value_set_param_take_ownership</a>    (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="type">GParamSpec</span></a> *param</code></em>);
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-param" title="g_value_get_param ()">g_value_get_param</a>                   (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-dup-param" title="g_value_dup_param ()">g_value_dup_param</a>                   (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);

#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-BOXED:CAPS" title="G_IS_PARAM_SPEC_BOXED()">G_IS_PARAM_SPEC_BOXED</a>               (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-BOXED:CAPS" title="G_PARAM_SPEC_BOXED()">G_PARAM_SPEC_BOXED</a>                  (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-BOXED:CAPS" title="G_VALUE_HOLDS_BOXED()">G_VALUE_HOLDS_BOXED</a>                 (value)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-BOXED:CAPS" title="G_TYPE_PARAM_BOXED">G_TYPE_PARAM_BOXED</a>
struct              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecBoxed" title="struct GParamSpecBoxed">GParamSpecBoxed</a>;
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-boxed" title="g_param_spec_boxed ()">g_param_spec_boxed</a>                  (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *nick</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *blurb</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> boxed_type</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags"><span class="type">GParamFlags</span></a> flags</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-boxed" title="g_value_set_boxed ()">g_value_set_boxed</a>                   (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gconstpointer"><span class="type">gconstpointer</span></a> v_boxed</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-static-boxed" title="g_value_set_static_boxed ()">g_value_set_static_boxed</a>            (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gconstpointer"><span class="type">gconstpointer</span></a> v_boxed</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-take-boxed" title="g_value_take_boxed ()">g_value_take_boxed</a>                  (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gconstpointer"><span class="type">gconstpointer</span></a> v_boxed</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-boxed-take-ownership" title="g_value_set_boxed_take_ownership ()">g_value_set_boxed_take_ownership</a>    (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gconstpointer"><span class="type">gconstpointer</span></a> v_boxed</code></em>);
<a href="../glib/glib-Basic-Types.html#gpointer"><span class="returnvalue">gpointer</span></a>            <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-boxed" title="g_value_get_boxed ()">g_value_get_boxed</a>                   (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);
<a href="../glib/glib-Basic-Types.html#gpointer"><span class="returnvalue">gpointer</span></a>            <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-dup-boxed" title="g_value_dup_boxed ()">g_value_dup_boxed</a>                   (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);

#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-POINTER:CAPS" title="G_IS_PARAM_SPEC_POINTER()">G_IS_PARAM_SPEC_POINTER</a>             (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-POINTER:CAPS" title="G_PARAM_SPEC_POINTER()">G_PARAM_SPEC_POINTER</a>                (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-POINTER:CAPS" title="G_VALUE_HOLDS_POINTER()">G_VALUE_HOLDS_POINTER</a>               (value)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-POINTER:CAPS" title="G_TYPE_PARAM_POINTER">G_TYPE_PARAM_POINTER</a>
struct              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecPointer" title="struct GParamSpecPointer">GParamSpecPointer</a>;
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-pointer" title="g_param_spec_pointer ()">g_param_spec_pointer</a>                (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *nick</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *blurb</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags"><span class="type">GParamFlags</span></a> flags</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-pointer" title="g_value_set_pointer ()">g_value_set_pointer</a>                 (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> v_pointer</code></em>);
<a href="../glib/glib-Basic-Types.html#gpointer"><span class="returnvalue">gpointer</span></a>            <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-pointer" title="g_value_get_pointer ()">g_value_get_pointer</a>                 (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);

#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-OBJECT:CAPS" title="G_IS_PARAM_SPEC_OBJECT()">G_IS_PARAM_SPEC_OBJECT</a>              (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-OBJECT:CAPS" title="G_PARAM_SPEC_OBJECT()">G_PARAM_SPEC_OBJECT</a>                 (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-OBJECT:CAPS" title="G_VALUE_HOLDS_OBJECT()">G_VALUE_HOLDS_OBJECT</a>                (value)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-OBJECT:CAPS" title="G_TYPE_PARAM_OBJECT">G_TYPE_PARAM_OBJECT</a>
struct              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecObject" title="struct GParamSpecObject">GParamSpecObject</a>;
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-object" title="g_param_spec_object ()">g_param_spec_object</a>                 (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *nick</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *blurb</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> object_type</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags"><span class="type">GParamFlags</span></a> flags</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-object" title="g_value_set_object ()">g_value_set_object</a>                  (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> v_object</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-take-object" title="g_value_take_object ()">g_value_take_object</a>                 (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> v_object</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-object-take-ownership" title="g_value_set_object_take_ownership ()">g_value_set_object_take_ownership</a>   (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gpointer"><span class="type">gpointer</span></a> v_object</code></em>);
<a href="../glib/glib-Basic-Types.html#gpointer"><span class="returnvalue">gpointer</span></a>            <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-object" title="g_value_get_object ()">g_value_get_object</a>                  (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);
<a href="../glib/glib-Basic-Types.html#gpointer"><span class="returnvalue">gpointer</span></a>            <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-dup-object" title="g_value_dup_object ()">g_value_dup_object</a>                  (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);

#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-UNICHAR:CAPS" title="G_IS_PARAM_SPEC_UNICHAR()">G_IS_PARAM_SPEC_UNICHAR</a>             (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-UNICHAR:CAPS" title="G_PARAM_SPEC_UNICHAR()">G_PARAM_SPEC_UNICHAR</a>                (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-UNICHAR:CAPS" title="G_TYPE_PARAM_UNICHAR">G_TYPE_PARAM_UNICHAR</a>
struct              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecUnichar" title="struct GParamSpecUnichar">GParamSpecUnichar</a>;
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-unichar" title="g_param_spec_unichar ()">g_param_spec_unichar</a>                (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *nick</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *blurb</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Unicode-Manipulation.html#gunichar"><span class="type">gunichar</span></a> default_value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags"><span class="type">GParamFlags</span></a> flags</code></em>);

#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-VALUE-ARRAY:CAPS" title="G_IS_PARAM_SPEC_VALUE_ARRAY()">G_IS_PARAM_SPEC_VALUE_ARRAY</a>         (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-VALUE-ARRAY:CAPS" title="G_PARAM_SPEC_VALUE_ARRAY()">G_PARAM_SPEC_VALUE_ARRAY</a>            (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-VALUE-ARRAY:CAPS" title="G_TYPE_PARAM_VALUE_ARRAY">G_TYPE_PARAM_VALUE_ARRAY</a>
struct              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecValueArray" title="struct GParamSpecValueArray">GParamSpecValueArray</a>;
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-value-array" title="g_param_spec_value_array ()">g_param_spec_value_array</a>            (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *nick</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *blurb</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="type">GParamSpec</span></a> *element_spec</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags"><span class="type">GParamFlags</span></a> flags</code></em>);

#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-OVERRIDE:CAPS" title="G_IS_PARAM_SPEC_OVERRIDE()">G_IS_PARAM_SPEC_OVERRIDE</a>            (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-OVERRIDE:CAPS" title="G_PARAM_SPEC_OVERRIDE()">G_PARAM_SPEC_OVERRIDE</a>               (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-OVERRIDE:CAPS" title="G_TYPE_PARAM_OVERRIDE">G_TYPE_PARAM_OVERRIDE</a>
struct              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecOverride" title="struct GParamSpecOverride">GParamSpecOverride</a>;
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-override" title="g_param_spec_override ()">g_param_spec_override</a>               (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="type">GParamSpec</span></a> *overridden</code></em>);

#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-GTYPE:CAPS" title="G_IS_PARAM_SPEC_GTYPE()">G_IS_PARAM_SPEC_GTYPE</a>               (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-GTYPE:CAPS" title="G_PARAM_SPEC_GTYPE()">G_PARAM_SPEC_GTYPE</a>                  (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-GTYPE:CAPS" title="G_VALUE_HOLDS_GTYPE()">G_VALUE_HOLDS_GTYPE</a>                 (value)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-GTYPE:CAPS" title="G_TYPE_PARAM_GTYPE">G_TYPE_PARAM_GTYPE</a>
struct              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecGType" title="struct GParamSpecGType">GParamSpecGType</a>;
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-gtype" title="g_param_spec_gtype ()">g_param_spec_gtype</a>                  (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *nick</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *blurb</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> is_a_type</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags"><span class="type">GParamFlags</span></a> flags</code></em>);
<a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="returnvalue">GType</span></a>               <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-gtype" title="g_value_get_gtype ()">g_value_get_gtype</a>                   (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-gtype" title="g_value_set_gtype ()">g_value_set_gtype</a>                   (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> v_gtype</code></em>);

#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-IS-PARAM-SPEC-VARIANT:CAPS" title="G_IS_PARAM_SPEC_VARIANT()">G_IS_PARAM_SPEC_VARIANT</a>             (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-PARAM-SPEC-VARIANT:CAPS" title="G_PARAM_SPEC_VARIANT()">G_PARAM_SPEC_VARIANT</a>                (pspec)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-VALUE-HOLDS-VARIANT:CAPS" title="G_VALUE_HOLDS_VARIANT()">G_VALUE_HOLDS_VARIANT</a>               (value)
#define             <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-VARIANT:CAPS" title="G_TYPE_PARAM_VARIANT">G_TYPE_PARAM_VARIANT</a>
struct              <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecVariant" title="struct GParamSpecVariant">GParamSpecVariant</a>;
<a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-param-spec-variant" title="g_param_spec_variant ()">g_param_spec_variant</a>                (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *nick</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *blurb</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-GVariantType.html#GVariantType"><span class="type">GVariantType</span></a> *type</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-GVariant.html#GVariant"><span class="type">GVariant</span></a> *default_value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags"><span class="type">GParamFlags</span></a> flags</code></em>);
<a href="../glib/glib-GVariant.html#GVariant"><span class="returnvalue">GVariant</span></a> *          <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-get-variant" title="g_value_get_variant ()">g_value_get_variant</a>                 (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);
<a href="../glib/glib-GVariant.html#GVariant"><span class="returnvalue">GVariant</span></a> *          <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-dup-variant" title="g_value_dup_variant ()">g_value_dup_variant</a>                 (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-set-variant" title="g_value_set_variant ()">g_value_set_variant</a>                 (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-GVariant.html#GVariant"><span class="type">GVariant</span></a> *variant</code></em>);
<span class="returnvalue">void</span>                <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#g-value-take-variant" title="g_value_take_variant ()">g_value_take_variant</a>                (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-GVariant.html#GVariant"><span class="type">GVariant</span></a> *variant</code></em>);
</pre>
</div>
<div class="refsect1">
<a name="gobject-Standard-Parameter-and-Value-Types.description"></a><h2>Description</h2>
<p>
<a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> provides an abstract container structure which can be
copied, transformed and compared while holding a value of any
(derived) type, which is registered as a <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> with a
<a class="link" href="gobject-Type-Information.html#GTypeValueTable" title="struct GTypeValueTable"><span class="type">GTypeValueTable</span></a> in its <a class="link" href="gobject-Type-Information.html#GTypeInfo" title="struct GTypeInfo"><span class="type">GTypeInfo</span></a> structure.  Parameter
specifications for most value types can be created as <a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="type">GParamSpec</span></a>
derived instances, to implement e.g. <a class="link" href="gobject-The-Base-Object-Type.html#GObject"><span class="type">GObject</span></a> properties which
operate on <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> containers.
</p>
<p>
Parameter names need to start with a letter (a-z or A-Z). Subsequent
characters can be letters, numbers or a '-'.
All other characters are replaced by a '-' during construction.
</p>
</div>
<div class="refsect1">
<a name="gobject-Standard-Parameter-and-Value-Types.details"></a><h2>Details</h2>
<div class="refsect2">
<a name="G-IS-PARAM-SPEC-BOOLEAN:CAPS"></a><h3>G_IS_PARAM_SPEC_BOOLEAN()</h3>
<pre class="programlisting">#define G_IS_PARAM_SPEC_BOOLEAN(pspec)     (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_BOOLEAN))
</pre>
<p>
Checks whether the given <a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="type">GParamSpec</span></a> is of type <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-BOOLEAN:CAPS" title="G_TYPE_PARAM_BOOLEAN"><code class="literal">G_TYPE_PARAM_BOOLEAN</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>pspec</code></em> :</span></p></td>
<td>a valid <a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="type">GParamSpec</span></a> instance</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-PARAM-SPEC-BOOLEAN:CAPS"></a><h3>G_PARAM_SPEC_BOOLEAN()</h3>
<pre class="programlisting">#define G_PARAM_SPEC_BOOLEAN(pspec)        (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_BOOLEAN, GParamSpecBoolean))
</pre>
<p>
Cast a <a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="type">GParamSpec</span></a> instance into a <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecBoolean" title="struct GParamSpecBoolean"><span class="type">GParamSpecBoolean</span></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody><tr>
<td><p><span class="term"><em class="parameter"><code>pspec</code></em> :</span></p></td>
<td>a valid <a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="type">GParamSpec</span></a> instance</td>
</tr></tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-VALUE-HOLDS-BOOLEAN:CAPS"></a><h3>G_VALUE_HOLDS_BOOLEAN()</h3>
<pre class="programlisting">#define G_VALUE_HOLDS_BOOLEAN(value)	 (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_BOOLEAN))
</pre>
<p>
Checks whether the given <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> can hold values of type <a class="link" href="gobject-Type-Information.html#G-TYPE-BOOLEAN:CAPS" title="G_TYPE_BOOLEAN"><code class="literal">G_TYPE_BOOLEAN</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>value</code></em> :</span></p></td>
<td>a valid <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> structure</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-PARAM-BOOLEAN:CAPS"></a><h3>G_TYPE_PARAM_BOOLEAN</h3>
<pre class="programlisting">#define G_TYPE_PARAM_BOOLEAN		   (g_param_spec_types[2])
</pre>
<p>
The <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> of <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecBoolean" title="struct GParamSpecBoolean"><span class="type">GParamSpecBoolean</span></a>.
</p>
</div>
<hr>
<div class="refsect2">
<a name="GParamSpecBoolean"></a><h3>struct GParamSpecBoolean</h3>
<pre class="programlisting">struct GParamSpecBoolean {
  GParamSpec    parent_instance;
  
  gboolean      default_value;
};
</pre>
<p>
A <a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="type">GParamSpec</span></a> derived structure that contains the meta data for boolean properties.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="type">GParamSpec</span></a> <em class="structfield"><code><a name="GParamSpecBoolean.parent-instance"></a>parent_instance</code></em>;</span></p></td>
<td>private <a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="type">GParamSpec</span></a> portion</td>
</tr>
<tr>
<td><p><span class="term"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> <em class="structfield"><code><a name="GParamSpecBoolean.default-value"></a>default_value</code></em>;</span></p></td>
<td>default value for the property specified</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-param-spec-boolean"></a><h3>g_param_spec_boolean ()</h3>
<pre class="programlisting"><a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="returnvalue">GParamSpec</span></a> *        g_param_spec_boolean                (<em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *name</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *nick</code></em>,
                                                         <em class="parameter"><code>const <a href="../glib/glib-Basic-Types.html#gchar"><span class="type">gchar</span></a> *blurb</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> default_value</code></em>,
                                                         <em class="parameter"><code><a class="link" href="gobject-GParamSpec.html#GParamFlags" title="enum GParamFlags"><span class="type">GParamFlags</span></a> flags</code></em>);</pre>
<p>
Creates a new <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecBoolean" title="struct GParamSpecBoolean"><span class="type">GParamSpecBoolean</span></a> instance specifying a <a class="link" href="gobject-Type-Information.html#G-TYPE-BOOLEAN:CAPS" title="G_TYPE_BOOLEAN"><code class="literal">G_TYPE_BOOLEAN</code></a>
property.
</p>
<p>
See <a class="link" href="gobject-GParamSpec.html#g-param-spec-internal" title="g_param_spec_internal ()"><code class="function">g_param_spec_internal()</code></a> for details on property names.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>name</code></em> :</span></p></td>
<td>canonical name of the property specified</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>nick</code></em> :</span></p></td>
<td>nick name for the property specified</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>blurb</code></em> :</span></p></td>
<td>description of the property specified</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>default_value</code></em> :</span></p></td>
<td>default value for the property specified</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>flags</code></em> :</span></p></td>
<td>flags for the property specified</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>a newly created parameter specification</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-value-set-boolean"></a><h3>g_value_set_boolean ()</h3>
<pre class="programlisting"><span class="returnvalue">void</span>                g_value_set_boolean                 (<em class="parameter"><code><a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>,
                                                         <em class="parameter"><code><a href="../glib/glib-Basic-Types.html#gboolean"><span class="type">gboolean</span></a> v_boolean</code></em>);</pre>
<p>
Set the contents of a <a class="link" href="gobject-Type-Information.html#G-TYPE-BOOLEAN:CAPS" title="G_TYPE_BOOLEAN"><code class="literal">G_TYPE_BOOLEAN</code></a> <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> to <em class="parameter"><code>v_boolean</code></em>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>value</code></em> :</span></p></td>
<td>a valid <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> of type <a class="link" href="gobject-Type-Information.html#G-TYPE-BOOLEAN:CAPS" title="G_TYPE_BOOLEAN"><code class="literal">G_TYPE_BOOLEAN</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><em class="parameter"><code>v_boolean</code></em> :</span></p></td>
<td>boolean value to be set</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="g-value-get-boolean"></a><h3>g_value_get_boolean ()</h3>
<pre class="programlisting"><a href="../glib/glib-Basic-Types.html#gboolean"><span class="returnvalue">gboolean</span></a>            g_value_get_boolean                 (<em class="parameter"><code>const <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> *value</code></em>);</pre>
<p>
Get the contents of a <a class="link" href="gobject-Type-Information.html#G-TYPE-BOOLEAN:CAPS" title="G_TYPE_BOOLEAN"><code class="literal">G_TYPE_BOOLEAN</code></a> <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>value</code></em> :</span></p></td>
<td>a valid <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> of type <a class="link" href="gobject-Type-Information.html#G-TYPE-BOOLEAN:CAPS" title="G_TYPE_BOOLEAN"><code class="literal">G_TYPE_BOOLEAN</code></a>
</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>boolean contents of <em class="parameter"><code>value</code></em>
</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-IS-PARAM-SPEC-CHAR:CAPS"></a><h3>G_IS_PARAM_SPEC_CHAR()</h3>
<pre class="programlisting">#define G_IS_PARAM_SPEC_CHAR(pspec)        (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_CHAR))
</pre>
<p>
Checks whether the given <a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="type">GParamSpec</span></a> is of type <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-CHAR:CAPS" title="G_TYPE_PARAM_CHAR"><code class="literal">G_TYPE_PARAM_CHAR</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>pspec</code></em> :</span></p></td>
<td>a valid <a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="type">GParamSpec</span></a> instance</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-PARAM-SPEC-CHAR:CAPS"></a><h3>G_PARAM_SPEC_CHAR()</h3>
<pre class="programlisting">#define G_PARAM_SPEC_CHAR(pspec)           (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_CHAR, GParamSpecChar))
</pre>
<p>
Cast a <a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="type">GParamSpec</span></a> instance into a <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecChar" title="struct GParamSpecChar"><span class="type">GParamSpecChar</span></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody><tr>
<td><p><span class="term"><em class="parameter"><code>pspec</code></em> :</span></p></td>
<td>a valid <a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="type">GParamSpec</span></a> instance</td>
</tr></tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-VALUE-HOLDS-CHAR:CAPS"></a><h3>G_VALUE_HOLDS_CHAR()</h3>
<pre class="programlisting">#define G_VALUE_HOLDS_CHAR(value)	 (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_CHAR))
</pre>
<p>
Checks whether the given <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> can hold values of type <a class="link" href="gobject-Type-Information.html#G-TYPE-CHAR:CAPS" title="G_TYPE_CHAR"><code class="literal">G_TYPE_CHAR</code></a>.
</p>
<div class="variablelist"><table border="0">
<col align="left" valign="top">
<tbody>
<tr>
<td><p><span class="term"><em class="parameter"><code>value</code></em> :</span></p></td>
<td>a valid <a class="link" href="gobject-Generic-values.html#GValue" title="GValue"><span class="type">GValue</span></a> structure</td>
</tr>
<tr>
<td><p><span class="term"><span class="emphasis"><em>Returns</em></span> :</span></p></td>
<td>
<a href="../glib/glib-Standard-Macros.html#TRUE:CAPS"><code class="literal">TRUE</code></a> on success.</td>
</tr>
</tbody>
</table></div>
</div>
<hr>
<div class="refsect2">
<a name="G-TYPE-PARAM-CHAR:CAPS"></a><h3>G_TYPE_PARAM_CHAR</h3>
<pre class="programlisting">#define G_TYPE_PARAM_CHAR		   (g_param_spec_types[0])
</pre>
<p>
The <a class="link" href="gobject-Type-Information.html#GType" title="GType"><span class="type">GType</span></a> of <a class="link" href="gobject-Standard-Parameter-and-Value-Types.html#GParamSpecChar" title="struct GParamSpecChar"><span class="type">GParamSpecChar</span></a>.
</p>
</div>
<hr>
<div class="refsect2">
<a name="GParamSpecChar"></a><h3>struct GParamSpecChar</h3>
<pre class="programlisting">struct GParamSpecChar {
  GParamSpec    parent_instance;
  
  gint8         minimum;
  gint8         maximum;
  gint8         default_value;
};
</pre>
<p>
A <a class="link" href="gobject-GParamSpec.html#GParamSpec" title="struct GParamSpec"><span class="type">GParamSpec</span></a> derived structure that contains the meta data for character properties.
</p>
<div class="variableli